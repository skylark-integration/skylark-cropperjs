{"version":3,"sources":["render.js"],"names":["define","constants","utilities","[object Object]","this","initContainer","initCanvas","initCropBox","renderCanvas","cropped","renderCropBox","element","options","container","cropper","addClass","CLASS_HIDDEN","removeClass","containerData","width","Math","max","offsetWidth","Number","minContainerWidth","height","offsetHeight","minContainerHeight","setStyle","imageData","viewMode","rotated","abs","rotate","naturalWidth","naturalHeight","aspectRatio","canvasWidth","canvasHeight","canvasData","left","top","oldLeft","oldTop","limited","limitCanvas","initialImageData","assign","initialCanvasData","sizeLimited","positionLimited","cropBoxData","minCanvasWidth","minCanvasHeight","getAdjustedSizes","minWidth","minHeight","maxWidth","Infinity","maxHeight","newCanvasLeft","newCanvasTop","minLeft","min","minTop","maxLeft","maxTop","changed","transformed","getRotatedSizes","scaleX","scaleY","degree","canvas","getTransforms","translateX","translateY","renderImage","limitCropBox","image","output","initialAspectRatio","autoCropArea","initialCropBoxData","minCropBoxWidth","minCropBoxHeight","maxCropBoxWidth","maxCropBoxHeight","movable","cropBoxMovable","setData","face","DATA_ACTION","ACTION_MOVE","ACTION_ALL","cropBox","disabled","preview","dispatchEvent","EVENT_CROP","getData"],"mappings":"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","file":"../render.js","sourcesContent":["define([\n    './constants',\n    './utilities'\n], function (constants, utilities) {\n    'use strict';\n    return {\n        render() {\n            this.initContainer();\n            this.initCanvas();\n            this.initCropBox();\n            this.renderCanvas();\n            if (this.cropped) {\n                this.renderCropBox();\n            }\n        },\n        initContainer() {\n            const {element, options, container, cropper} = this;\n            utilities.addClass(cropper, constants.CLASS_HIDDEN);\n            utilities.removeClass(element, constants.CLASS_HIDDEN);\n            const containerData = {\n                width: Math.max(container.offsetWidth, Number(options.minContainerWidth) || 200),\n                height: Math.max(container.offsetHeight, Number(options.minContainerHeight) || 100)\n            };\n            this.containerData = containerData;\n            utilities.setStyle(cropper, {\n                width: containerData.width,\n                height: containerData.height\n            });\n            utilities.addClass(element, constants.CLASS_HIDDEN);\n            utilities.removeClass(cropper, constants.CLASS_HIDDEN);\n        },\n        initCanvas() {\n            const {containerData, imageData} = this;\n            const {viewMode} = this.options;\n            const rotated = Math.abs(imageData.rotate) % 180 === 90;\n            const naturalWidth = rotated ? imageData.naturalHeight : imageData.naturalWidth;\n            const naturalHeight = rotated ? imageData.naturalWidth : imageData.naturalHeight;\n            const aspectRatio = naturalWidth / naturalHeight;\n            let canvasWidth = containerData.width;\n            let canvasHeight = containerData.height;\n            if (containerData.height * aspectRatio > containerData.width) {\n                if (viewMode === 3) {\n                    canvasWidth = containerData.height * aspectRatio;\n                } else {\n                    canvasHeight = containerData.width / aspectRatio;\n                }\n            } else if (viewMode === 3) {\n                canvasHeight = containerData.width / aspectRatio;\n            } else {\n                canvasWidth = containerData.height * aspectRatio;\n            }\n            const canvasData = {\n                aspectRatio,\n                naturalWidth,\n                naturalHeight,\n                width: canvasWidth,\n                height: canvasHeight\n            };\n            canvasData.left = (containerData.width - canvasWidth) / 2;\n            canvasData.top = (containerData.height - canvasHeight) / 2;\n            canvasData.oldLeft = canvasData.left;\n            canvasData.oldTop = canvasData.top;\n            this.canvasData = canvasData;\n            this.limited = viewMode === 1 || viewMode === 2;\n            this.limitCanvas(true, true);\n            this.initialImageData = utilities.assign({}, imageData);\n            this.initialCanvasData = utilities.assign({}, canvasData);\n        },\n        limitCanvas(sizeLimited, positionLimited) {\n            const {options, containerData, canvasData, cropBoxData} = this;\n            const {viewMode} = options;\n            const {aspectRatio} = canvasData;\n            const cropped = this.cropped && cropBoxData;\n            if (sizeLimited) {\n                let minCanvasWidth = Number(options.minCanvasWidth) || 0;\n                let minCanvasHeight = Number(options.minCanvasHeight) || 0;\n                if (viewMode > 1) {\n                    minCanvasWidth = Math.max(minCanvasWidth, containerData.width);\n                    minCanvasHeight = Math.max(minCanvasHeight, containerData.height);\n                    if (viewMode === 3) {\n                        if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n                            minCanvasWidth = minCanvasHeight * aspectRatio;\n                        } else {\n                            minCanvasHeight = minCanvasWidth / aspectRatio;\n                        }\n                    }\n                } else if (viewMode > 0) {\n                    if (minCanvasWidth) {\n                        minCanvasWidth = Math.max(minCanvasWidth, cropped ? cropBoxData.width : 0);\n                    } else if (minCanvasHeight) {\n                        minCanvasHeight = Math.max(minCanvasHeight, cropped ? cropBoxData.height : 0);\n                    } else if (cropped) {\n                        minCanvasWidth = cropBoxData.width;\n                        minCanvasHeight = cropBoxData.height;\n                        if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n                            minCanvasWidth = minCanvasHeight * aspectRatio;\n                        } else {\n                            minCanvasHeight = minCanvasWidth / aspectRatio;\n                        }\n                    }\n                }\n                ({\n                    width: minCanvasWidth,\n                    height: minCanvasHeight\n                } = utilities.getAdjustedSizes({\n                    aspectRatio,\n                    width: minCanvasWidth,\n                    height: minCanvasHeight\n                }));\n                canvasData.minWidth = minCanvasWidth;\n                canvasData.minHeight = minCanvasHeight;\n                canvasData.maxWidth = Infinity;\n                canvasData.maxHeight = Infinity;\n            }\n            if (positionLimited) {\n                if (viewMode > (cropped ? 0 : 1)) {\n                    const newCanvasLeft = containerData.width - canvasData.width;\n                    const newCanvasTop = containerData.height - canvasData.height;\n                    canvasData.minLeft = Math.min(0, newCanvasLeft);\n                    canvasData.minTop = Math.min(0, newCanvasTop);\n                    canvasData.maxLeft = Math.max(0, newCanvasLeft);\n                    canvasData.maxTop = Math.max(0, newCanvasTop);\n                    if (cropped && this.limited) {\n                        canvasData.minLeft = Math.min(cropBoxData.left, cropBoxData.left + (cropBoxData.width - canvasData.width));\n                        canvasData.minTop = Math.min(cropBoxData.top, cropBoxData.top + (cropBoxData.height - canvasData.height));\n                        canvasData.maxLeft = cropBoxData.left;\n                        canvasData.maxTop = cropBoxData.top;\n                        if (viewMode === 2) {\n                            if (canvasData.width >= containerData.width) {\n                                canvasData.minLeft = Math.min(0, newCanvasLeft);\n                                canvasData.maxLeft = Math.max(0, newCanvasLeft);\n                            }\n                            if (canvasData.height >= containerData.height) {\n                                canvasData.minTop = Math.min(0, newCanvasTop);\n                                canvasData.maxTop = Math.max(0, newCanvasTop);\n                            }\n                        }\n                    }\n                } else {\n                    canvasData.minLeft = -canvasData.width;\n                    canvasData.minTop = -canvasData.height;\n                    canvasData.maxLeft = containerData.width;\n                    canvasData.maxTop = containerData.height;\n                }\n            }\n        },\n        renderCanvas(changed, transformed) {\n            const {canvasData, imageData} = this;\n            if (transformed) {\n                const {\n                    width: naturalWidth,\n                    height: naturalHeight\n                } = utilities.getRotatedSizes({\n                    width: imageData.naturalWidth * Math.abs(imageData.scaleX || 1),\n                    height: imageData.naturalHeight * Math.abs(imageData.scaleY || 1),\n                    degree: imageData.rotate || 0\n                });\n                const width = canvasData.width * (naturalWidth / canvasData.naturalWidth);\n                const height = canvasData.height * (naturalHeight / canvasData.naturalHeight);\n                canvasData.left -= (width - canvasData.width) / 2;\n                canvasData.top -= (height - canvasData.height) / 2;\n                canvasData.width = width;\n                canvasData.height = height;\n                canvasData.aspectRatio = naturalWidth / naturalHeight;\n                canvasData.naturalWidth = naturalWidth;\n                canvasData.naturalHeight = naturalHeight;\n                this.limitCanvas(true, false);\n            }\n            if (canvasData.width > canvasData.maxWidth || canvasData.width < canvasData.minWidth) {\n                canvasData.left = canvasData.oldLeft;\n            }\n            if (canvasData.height > canvasData.maxHeight || canvasData.height < canvasData.minHeight) {\n                canvasData.top = canvasData.oldTop;\n            }\n            canvasData.width = Math.min(Math.max(canvasData.width, canvasData.minWidth), canvasData.maxWidth);\n            canvasData.height = Math.min(Math.max(canvasData.height, canvasData.minHeight), canvasData.maxHeight);\n            this.limitCanvas(false, true);\n            canvasData.left = Math.min(Math.max(canvasData.left, canvasData.minLeft), canvasData.maxLeft);\n            canvasData.top = Math.min(Math.max(canvasData.top, canvasData.minTop), canvasData.maxTop);\n            canvasData.oldLeft = canvasData.left;\n            canvasData.oldTop = canvasData.top;\n            utilities.setStyle(this.canvas, utilities.assign({\n                width: canvasData.width,\n                height: canvasData.height\n            }, utilities.getTransforms({\n                translateX: canvasData.left,\n                translateY: canvasData.top\n            })));\n            this.renderImage(changed);\n            if (this.cropped && this.limited) {\n                this.limitCropBox(true, true);\n            }\n        },\n        renderImage(changed) {\n            const {canvasData, imageData} = this;\n            const width = imageData.naturalWidth * (canvasData.width / canvasData.naturalWidth);\n            const height = imageData.naturalHeight * (canvasData.height / canvasData.naturalHeight);\n            utilities.assign(imageData, {\n                width,\n                height,\n                left: (canvasData.width - width) / 2,\n                top: (canvasData.height - height) / 2\n            });\n            utilities.setStyle(this.image, utilities.assign({\n                width: imageData.width,\n                height: imageData.height\n            }, utilities.getTransforms(utilities.assign({\n                translateX: imageData.left,\n                translateY: imageData.top\n            }, imageData))));\n            if (changed) {\n                this.output();\n            }\n        },\n        initCropBox() {\n            const {options, canvasData} = this;\n            const aspectRatio = options.aspectRatio || options.initialAspectRatio;\n            const autoCropArea = Number(options.autoCropArea) || 0.8;\n            const cropBoxData = {\n                width: canvasData.width,\n                height: canvasData.height\n            };\n            if (aspectRatio) {\n                if (canvasData.height * aspectRatio > canvasData.width) {\n                    cropBoxData.height = cropBoxData.width / aspectRatio;\n                } else {\n                    cropBoxData.width = cropBoxData.height * aspectRatio;\n                }\n            }\n            this.cropBoxData = cropBoxData;\n            this.limitCropBox(true, true);\n            cropBoxData.width = Math.min(Math.max(cropBoxData.width, cropBoxData.minWidth), cropBoxData.maxWidth);\n            cropBoxData.height = Math.min(Math.max(cropBoxData.height, cropBoxData.minHeight), cropBoxData.maxHeight);\n            cropBoxData.width = Math.max(cropBoxData.minWidth, cropBoxData.width * autoCropArea);\n            cropBoxData.height = Math.max(cropBoxData.minHeight, cropBoxData.height * autoCropArea);\n            cropBoxData.left = canvasData.left + (canvasData.width - cropBoxData.width) / 2;\n            cropBoxData.top = canvasData.top + (canvasData.height - cropBoxData.height) / 2;\n            cropBoxData.oldLeft = cropBoxData.left;\n            cropBoxData.oldTop = cropBoxData.top;\n            this.initialCropBoxData = utilities.assign({}, cropBoxData);\n        },\n        limitCropBox(sizeLimited, positionLimited) {\n            const {options, containerData, canvasData, cropBoxData, limited} = this;\n            const {aspectRatio} = options;\n            if (sizeLimited) {\n                let minCropBoxWidth = Number(options.minCropBoxWidth) || 0;\n                let minCropBoxHeight = Number(options.minCropBoxHeight) || 0;\n                let maxCropBoxWidth = limited ? Math.min(containerData.width, canvasData.width, canvasData.width + canvasData.left, containerData.width - canvasData.left) : containerData.width;\n                let maxCropBoxHeight = limited ? Math.min(containerData.height, canvasData.height, canvasData.height + canvasData.top, containerData.height - canvasData.top) : containerData.height;\n                minCropBoxWidth = Math.min(minCropBoxWidth, containerData.width);\n                minCropBoxHeight = Math.min(minCropBoxHeight, containerData.height);\n                if (aspectRatio) {\n                    if (minCropBoxWidth && minCropBoxHeight) {\n                        if (minCropBoxHeight * aspectRatio > minCropBoxWidth) {\n                            minCropBoxHeight = minCropBoxWidth / aspectRatio;\n                        } else {\n                            minCropBoxWidth = minCropBoxHeight * aspectRatio;\n                        }\n                    } else if (minCropBoxWidth) {\n                        minCropBoxHeight = minCropBoxWidth / aspectRatio;\n                    } else if (minCropBoxHeight) {\n                        minCropBoxWidth = minCropBoxHeight * aspectRatio;\n                    }\n                    if (maxCropBoxHeight * aspectRatio > maxCropBoxWidth) {\n                        maxCropBoxHeight = maxCropBoxWidth / aspectRatio;\n                    } else {\n                        maxCropBoxWidth = maxCropBoxHeight * aspectRatio;\n                    }\n                }\n                cropBoxData.minWidth = Math.min(minCropBoxWidth, maxCropBoxWidth);\n                cropBoxData.minHeight = Math.min(minCropBoxHeight, maxCropBoxHeight);\n                cropBoxData.maxWidth = maxCropBoxWidth;\n                cropBoxData.maxHeight = maxCropBoxHeight;\n            }\n            if (positionLimited) {\n                if (limited) {\n                    cropBoxData.minLeft = Math.max(0, canvasData.left);\n                    cropBoxData.minTop = Math.max(0, canvasData.top);\n                    cropBoxData.maxLeft = Math.min(containerData.width, canvasData.left + canvasData.width) - cropBoxData.width;\n                    cropBoxData.maxTop = Math.min(containerData.height, canvasData.top + canvasData.height) - cropBoxData.height;\n                } else {\n                    cropBoxData.minLeft = 0;\n                    cropBoxData.minTop = 0;\n                    cropBoxData.maxLeft = containerData.width - cropBoxData.width;\n                    cropBoxData.maxTop = containerData.height - cropBoxData.height;\n                }\n            }\n        },\n        renderCropBox() {\n            const {options, containerData, cropBoxData} = this;\n            if (cropBoxData.width > cropBoxData.maxWidth || cropBoxData.width < cropBoxData.minWidth) {\n                cropBoxData.left = cropBoxData.oldLeft;\n            }\n            if (cropBoxData.height > cropBoxData.maxHeight || cropBoxData.height < cropBoxData.minHeight) {\n                cropBoxData.top = cropBoxData.oldTop;\n            }\n            cropBoxData.width = Math.min(Math.max(cropBoxData.width, cropBoxData.minWidth), cropBoxData.maxWidth);\n            cropBoxData.height = Math.min(Math.max(cropBoxData.height, cropBoxData.minHeight), cropBoxData.maxHeight);\n            this.limitCropBox(false, true);\n            cropBoxData.left = Math.min(Math.max(cropBoxData.left, cropBoxData.minLeft), cropBoxData.maxLeft);\n            cropBoxData.top = Math.min(Math.max(cropBoxData.top, cropBoxData.minTop), cropBoxData.maxTop);\n            cropBoxData.oldLeft = cropBoxData.left;\n            cropBoxData.oldTop = cropBoxData.top;\n            if (options.movable && options.cropBoxMovable) {\n                utilities.setData(this.face, constants.DATA_ACTION, cropBoxData.width >= containerData.width && cropBoxData.height >= containerData.height ? constants.ACTION_MOVE : constants.ACTION_ALL);\n            }\n            utilities.setStyle(this.cropBox, utilities.assign({\n                width: cropBoxData.width,\n                height: cropBoxData.height\n            }, utilities.getTransforms({\n                translateX: cropBoxData.left,\n                translateY: cropBoxData.top\n            })));\n            if (this.cropped && this.limited) {\n                this.limitCanvas(true, true);\n            }\n            if (!this.disabled) {\n                this.output();\n            }\n        },\n        output() {\n            this.preview();\n            utilities.dispatchEvent(this.element, constants.EVENT_CROP, this.getData());\n        }\n    };\n});"]}