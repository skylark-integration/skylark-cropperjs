{"version":3,"sources":["change.js"],"names":["define","constants","utilities","[object Object]","event","options","canvasData","containerData","cropBoxData","pointers","this","action","aspectRatio","left","top","width","height","right","bottom","offset","minLeft","minTop","maxWidth","maxHeight","renderable","shiftKey","limited","Math","min","pointer","Object","keys","range","x","endX","startX","y","endY","startY","check","side","ACTION_EAST","ACTION_WEST","ACTION_NORTH","ACTION_SOUTH","ACTION_ALL","ACTION_NORTH_EAST","ACTION_SOUTH_WEST","ACTION_NORTH_WEST","ACTION_SOUTH_EAST","ACTION_MOVE","move","ACTION_ZOOM","zoom","getMaxZoomRatio","ACTION_CROP","getOffset","cropper","minWidth","minHeight","cropped","removeClass","cropBox","CLASS_HIDDEN","limitCropBox","renderCropBox","forEach","p"],"mappings":"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","file":"../change.js","sourcesContent":["define([\n    './constants',\n    './utilities'\n], function (constants, utilities) {\n    'use strict';\n    return {\n        change(event) {\n            const {options, canvasData, containerData, cropBoxData, pointers} = this;\n            let {action} = this;\n            let {aspectRatio} = options;\n            let {left, top, width, height} = cropBoxData;\n            const right = left + width;\n            const bottom = top + height;\n            let minLeft = 0;\n            let minTop = 0;\n            let maxWidth = containerData.width;\n            let maxHeight = containerData.height;\n            let renderable = true;\n            let offset;\n            if (!aspectRatio && event.shiftKey) {\n                aspectRatio = width && height ? width / height : 1;\n            }\n            if (this.limited) {\n                ({minLeft, minTop} = cropBoxData);\n                maxWidth = minLeft + Math.min(containerData.width, canvasData.width, canvasData.left + canvasData.width);\n                maxHeight = minTop + Math.min(containerData.height, canvasData.height, canvasData.top + canvasData.height);\n            }\n            const pointer = pointers[Object.keys(pointers)[0]];\n            const range = {\n                x: pointer.endX - pointer.startX,\n                y: pointer.endY - pointer.startY\n            };\n            const check = side => {\n                switch (side) {\n                case constants.ACTION_EAST:\n                    if (right + range.x > maxWidth) {\n                        range.x = maxWidth - right;\n                    }\n                    break;\n                case constants.ACTION_WEST:\n                    if (left + range.x < minLeft) {\n                        range.x = minLeft - left;\n                    }\n                    break;\n                case constants.ACTION_NORTH:\n                    if (top + range.y < minTop) {\n                        range.y = minTop - top;\n                    }\n                    break;\n                case constants.ACTION_SOUTH:\n                    if (bottom + range.y > maxHeight) {\n                        range.y = maxHeight - bottom;\n                    }\n                    break;\n                default:\n                }\n            };\n            switch (action) {\n            case constants.ACTION_ALL:\n                left += range.x;\n                top += range.y;\n                break;\n            case constants.ACTION_EAST:\n                if (range.x >= 0 && (right >= maxWidth || aspectRatio && (top <= minTop || bottom >= maxHeight))) {\n                    renderable = false;\n                    break;\n                }\n                check(constants.ACTION_EAST);\n                width += range.x;\n                if (width < 0) {\n                    action = constants.ACTION_WEST;\n                    width = -width;\n                    left -= width;\n                }\n                if (aspectRatio) {\n                    height = width / aspectRatio;\n                    top += (cropBoxData.height - height) / 2;\n                }\n                break;\n            case constants.ACTION_NORTH:\n                if (range.y <= 0 && (top <= minTop || aspectRatio && (left <= minLeft || right >= maxWidth))) {\n                    renderable = false;\n                    break;\n                }\n                check(constants.ACTION_NORTH);\n                height -= range.y;\n                top += range.y;\n                if (height < 0) {\n                    action = constants.ACTION_SOUTH;\n                    height = -height;\n                    top -= height;\n                }\n                if (aspectRatio) {\n                    width = height * aspectRatio;\n                    left += (cropBoxData.width - width) / 2;\n                }\n                break;\n            case constants.ACTION_WEST:\n                if (range.x <= 0 && (left <= minLeft || aspectRatio && (top <= minTop || bottom >= maxHeight))) {\n                    renderable = false;\n                    break;\n                }\n                check(constants.ACTION_WEST);\n                width -= range.x;\n                left += range.x;\n                if (width < 0) {\n                    action = constants.ACTION_EAST;\n                    width = -width;\n                    left -= width;\n                }\n                if (aspectRatio) {\n                    height = width / aspectRatio;\n                    top += (cropBoxData.height - height) / 2;\n                }\n                break;\n            case constants.ACTION_SOUTH:\n                if (range.y >= 0 && (bottom >= maxHeight || aspectRatio && (left <= minLeft || right >= maxWidth))) {\n                    renderable = false;\n                    break;\n                }\n                check(constants.ACTION_SOUTH);\n                height += range.y;\n                if (height < 0) {\n                    action = constants.ACTION_NORTH;\n                    height = -height;\n                    top -= height;\n                }\n                if (aspectRatio) {\n                    width = height * aspectRatio;\n                    left += (cropBoxData.width - width) / 2;\n                }\n                break;\n            case constants.ACTION_NORTH_EAST:\n                if (aspectRatio) {\n                    if (range.y <= 0 && (top <= minTop || right >= maxWidth)) {\n                        renderable = false;\n                        break;\n                    }\n                    check(constants.ACTION_NORTH);\n                    height -= range.y;\n                    top += range.y;\n                    width = height * aspectRatio;\n                } else {\n                    check(constants.ACTION_NORTH);\n                    check(constants.ACTION_EAST);\n                    if (range.x >= 0) {\n                        if (right < maxWidth) {\n                            width += range.x;\n                        } else if (range.y <= 0 && top <= minTop) {\n                            renderable = false;\n                        }\n                    } else {\n                        width += range.x;\n                    }\n                    if (range.y <= 0) {\n                        if (top > minTop) {\n                            height -= range.y;\n                            top += range.y;\n                        }\n                    } else {\n                        height -= range.y;\n                        top += range.y;\n                    }\n                }\n                if (width < 0 && height < 0) {\n                    action = constants.ACTION_SOUTH_WEST;\n                    height = -height;\n                    width = -width;\n                    top -= height;\n                    left -= width;\n                } else if (width < 0) {\n                    action = constants.ACTION_NORTH_WEST;\n                    width = -width;\n                    left -= width;\n                } else if (height < 0) {\n                    action = constants.ACTION_SOUTH_EAST;\n                    height = -height;\n                    top -= height;\n                }\n                break;\n            case constants.ACTION_NORTH_WEST:\n                if (aspectRatio) {\n                    if (range.y <= 0 && (top <= minTop || left <= minLeft)) {\n                        renderable = false;\n                        break;\n                    }\n                    check(constants.ACTION_NORTH);\n                    height -= range.y;\n                    top += range.y;\n                    width = height * aspectRatio;\n                    left += cropBoxData.width - width;\n                } else {\n                    check(constants.ACTION_NORTH);\n                    check(constants.ACTION_WEST);\n                    if (range.x <= 0) {\n                        if (left > minLeft) {\n                            width -= range.x;\n                            left += range.x;\n                        } else if (range.y <= 0 && top <= minTop) {\n                            renderable = false;\n                        }\n                    } else {\n                        width -= range.x;\n                        left += range.x;\n                    }\n                    if (range.y <= 0) {\n                        if (top > minTop) {\n                            height -= range.y;\n                            top += range.y;\n                        }\n                    } else {\n                        height -= range.y;\n                        top += range.y;\n                    }\n                }\n                if (width < 0 && height < 0) {\n                    action = constants.ACTION_SOUTH_EAST;\n                    height = -height;\n                    width = -width;\n                    top -= height;\n                    left -= width;\n                } else if (width < 0) {\n                    action = constants.ACTION_NORTH_EAST;\n                    width = -width;\n                    left -= width;\n                } else if (height < 0) {\n                    action = constants.ACTION_SOUTH_WEST;\n                    height = -height;\n                    top -= height;\n                }\n                break;\n            case constants.ACTION_SOUTH_WEST:\n                if (aspectRatio) {\n                    if (range.x <= 0 && (left <= minLeft || bottom >= maxHeight)) {\n                        renderable = false;\n                        break;\n                    }\n                    check(constants.ACTION_WEST);\n                    width -= range.x;\n                    left += range.x;\n                    height = width / aspectRatio;\n                } else {\n                    check(constants.ACTION_SOUTH);\n                    check(constants.ACTION_WEST);\n                    if (range.x <= 0) {\n                        if (left > minLeft) {\n                            width -= range.x;\n                            left += range.x;\n                        } else if (range.y >= 0 && bottom >= maxHeight) {\n                            renderable = false;\n                        }\n                    } else {\n                        width -= range.x;\n                        left += range.x;\n                    }\n                    if (range.y >= 0) {\n                        if (bottom < maxHeight) {\n                            height += range.y;\n                        }\n                    } else {\n                        height += range.y;\n                    }\n                }\n                if (width < 0 && height < 0) {\n                    action = constants.ACTION_NORTH_EAST;\n                    height = -height;\n                    width = -width;\n                    top -= height;\n                    left -= width;\n                } else if (width < 0) {\n                    action = constants.ACTION_SOUTH_EAST;\n                    width = -width;\n                    left -= width;\n                } else if (height < 0) {\n                    action = constants.ACTION_NORTH_WEST;\n                    height = -height;\n                    top -= height;\n                }\n                break;\n            case constants.ACTION_SOUTH_EAST:\n                if (aspectRatio) {\n                    if (range.x >= 0 && (right >= maxWidth || bottom >= maxHeight)) {\n                        renderable = false;\n                        break;\n                    }\n                    check(constants.ACTION_EAST);\n                    width += range.x;\n                    height = width / aspectRatio;\n                } else {\n                    check(constants.ACTION_SOUTH);\n                    check(constants.ACTION_EAST);\n                    if (range.x >= 0) {\n                        if (right < maxWidth) {\n                            width += range.x;\n                        } else if (range.y >= 0 && bottom >= maxHeight) {\n                            renderable = false;\n                        }\n                    } else {\n                        width += range.x;\n                    }\n                    if (range.y >= 0) {\n                        if (bottom < maxHeight) {\n                            height += range.y;\n                        }\n                    } else {\n                        height += range.y;\n                    }\n                }\n                if (width < 0 && height < 0) {\n                    action = constants.ACTION_NORTH_WEST;\n                    height = -height;\n                    width = -width;\n                    top -= height;\n                    left -= width;\n                } else if (width < 0) {\n                    action = constants.ACTION_SOUTH_WEST;\n                    width = -width;\n                    left -= width;\n                } else if (height < 0) {\n                    action = constants.ACTION_NORTH_EAST;\n                    height = -height;\n                    top -= height;\n                }\n                break;\n            case constants.ACTION_MOVE:\n                this.move(range.x, range.y);\n                renderable = false;\n                break;\n            case constants.ACTION_ZOOM:\n                this.zoom(utilities.getMaxZoomRatio(pointers), event);\n                renderable = false;\n                break;\n            case constants.ACTION_CROP:\n                if (!range.x || !range.y) {\n                    renderable = false;\n                    break;\n                }\n                offset = utilities.getOffset(this.cropper);\n                left = pointer.startX - offset.left;\n                top = pointer.startY - offset.top;\n                width = cropBoxData.minWidth;\n                height = cropBoxData.minHeight;\n                if (range.x > 0) {\n                    action = range.y > 0 ? constants.ACTION_SOUTH_EAST : constants.ACTION_NORTH_EAST;\n                } else if (range.x < 0) {\n                    left -= width;\n                    action = range.y > 0 ? constants.ACTION_SOUTH_WEST : constants.ACTION_NORTH_WEST;\n                }\n                if (range.y < 0) {\n                    top -= height;\n                }\n                if (!this.cropped) {\n                    utilities.removeClass(this.cropBox, constants.CLASS_HIDDEN);\n                    this.cropped = true;\n                    if (this.limited) {\n                        this.limitCropBox(true, true);\n                    }\n                }\n                break;\n            default:\n            }\n            if (renderable) {\n                cropBoxData.width = width;\n                cropBoxData.height = height;\n                cropBoxData.left = left;\n                cropBoxData.top = top;\n                this.action = action;\n                this.renderCropBox();\n            }\n            utilities.forEach(pointers, p => {\n                p.startX = p.endX;\n                p.startY = p.endY;\n            });\n        }\n    };\n});"]}