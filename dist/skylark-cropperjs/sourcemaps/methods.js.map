{"version":3,"sources":["methods.js"],"names":["define","constants","utilities","[object Object]","this","ready","cropped","disabled","limitCropBox","options","modal","addClass","dragBox","CLASS_MODAL","removeClass","cropBox","CLASS_HIDDEN","setCropBoxData","initialCropBoxData","imageData","assign","initialImageData","canvasData","initialCanvasData","cropBoxData","renderCanvas","renderCropBox","left","top","width","height","limitCanvas","url","hasSameSize","isImg","element","src","image","viewBoxImage","forEach","previews","getElementsByTagName","replaced","data","uncreate","load","cropper","CLASS_DISABLED","NAMESPACE","undefined","originalUrl","offsetX","offsetY","moveTo","isUndefined","Number","x","y","changed","movable","isNumber","ratio","_originalEvent","zoomTo","naturalWidth","pivot","naturalHeight","zoomable","newWidth","newHeight","dispatchEvent","EVENT_ZOOM","oldRatio","originalEvent","pointers","offset","getOffset","center","Object","keys","length","getPointersCenter","pageX","pageY","isPlainObject","degree","rotateTo","rotate","rotatable","scaleX","scaleY","scale","transformed","scalable","rounded","n","i","bottom","Math","round","right","containerData","sized","aspectRatio","widthChanged","heightChanged","window","HTMLCanvasElement","source","getSourceCanvas","initialX","initialY","initialWidth","initialHeight","getData","floor","maxSizes","getAdjustedSizes","maxWidth","Infinity","maxHeight","minSizes","minWidth","minHeight","min","max","canvas","document","createElement","context","getContext","normalizeDecimalNumber","fillStyle","fillColor","fillRect","imageSmoothingEnabled","imageSmoothingQuality","sourceWidth","sourceHeight","srcWidth","srcHeight","dstX","dstY","dstWidth","dstHeight","srcX","srcY","params","push","drawImage","map","param","NaN","initCropBox","mode","face","croppable","DRAG_MODE_CROP","DRAG_MODE_MOVE","DRAG_MODE_NONE","dragMode","setData","DATA_ACTION","toggleClass","CLASS_CROP","CLASS_MOVE","cropBoxMovable"],"mappings":"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","file":"../methods.js","sourcesContent":["define([\n    './constants',\n    './utilities'\n], function (constants, utilities) {\n    'use strict';\n    return {\n        crop() {\n            if (this.ready && !this.cropped && !this.disabled) {\n                this.cropped = true;\n                this.limitCropBox(true, true);\n                if (this.options.modal) {\n                    utilities.addClass(this.dragBox, constants.CLASS_MODAL);\n                }\n                utilities.removeClass(this.cropBox, constants.CLASS_HIDDEN);\n                this.setCropBoxData(this.initialCropBoxData);\n            }\n            return this;\n        },\n        reset() {\n            if (this.ready && !this.disabled) {\n                this.imageData = utilities.assign({}, this.initialImageData);\n                this.canvasData = utilities.assign({}, this.initialCanvasData);\n                this.cropBoxData = utilities.assign({}, this.initialCropBoxData);\n                this.renderCanvas();\n                if (this.cropped) {\n                    this.renderCropBox();\n                }\n            }\n            return this;\n        },\n        clear() {\n            if (this.cropped && !this.disabled) {\n                utilities.assign(this.cropBoxData, {\n                    left: 0,\n                    top: 0,\n                    width: 0,\n                    height: 0\n                });\n                this.cropped = false;\n                this.renderCropBox();\n                this.limitCanvas(true, true);\n                this.renderCanvas();\n                utilities.removeClass(this.dragBox, constants.CLASS_MODAL);\n                utilities.addClass(this.cropBox, constants.CLASS_HIDDEN);\n            }\n            return this;\n        },\n        replace(url, hasSameSize = false) {\n            if (!this.disabled && url) {\n                if (this.isImg) {\n                    this.element.src = url;\n                }\n                if (hasSameSize) {\n                    this.url = url;\n                    this.image.src = url;\n                    if (this.ready) {\n                        this.viewBoxImage.src = url;\n                        utilities.forEach(this.previews, element => {\n                            element.getElementsByTagName('img')[0].src = url;\n                        });\n                    }\n                } else {\n                    if (this.isImg) {\n                        this.replaced = true;\n                    }\n                    this.options.data = null;\n                    this.uncreate();\n                    this.load(url);\n                }\n            }\n            return this;\n        },\n        enable() {\n            if (this.ready && this.disabled) {\n                this.disabled = false;\n                utilities.removeClass(this.cropper, constants.CLASS_DISABLED);\n            }\n            return this;\n        },\n        disable() {\n            if (this.ready && !this.disabled) {\n                this.disabled = true;\n                utilities.addClass(this.cropper, constants.CLASS_DISABLED);\n            }\n            return this;\n        },\n        destroy() {\n            const {element} = this;\n            if (!element[constants.NAMESPACE]) {\n                return this;\n            }\n            element[constants.NAMESPACE] = undefined;\n            if (this.isImg && this.replaced) {\n                element.src = this.originalUrl;\n            }\n            this.uncreate();\n            return this;\n        },\n        move(offsetX, offsetY = offsetX) {\n            const {left, top} = this.canvasData;\n            return this.moveTo(utilities.isUndefined(offsetX) ? offsetX : left + Number(offsetX), utilities.isUndefined(offsetY) ? offsetY : top + Number(offsetY));\n        },\n        moveTo(x, y = x) {\n            const {canvasData} = this;\n            let changed = false;\n            x = Number(x);\n            y = Number(y);\n            if (this.ready && !this.disabled && this.options.movable) {\n                if (utilities.isNumber(x)) {\n                    canvasData.left = x;\n                    changed = true;\n                }\n                if (utilities.isNumber(y)) {\n                    canvasData.top = y;\n                    changed = true;\n                }\n                if (changed) {\n                    this.renderCanvas(true);\n                }\n            }\n            return this;\n        },\n        zoom(ratio, _originalEvent) {\n            const {canvasData} = this;\n            ratio = Number(ratio);\n            if (ratio < 0) {\n                ratio = 1 / (1 - ratio);\n            } else {\n                ratio = 1 + ratio;\n            }\n            return this.zoomTo(canvasData.width * ratio / canvasData.naturalWidth, null, _originalEvent);\n        },\n        zoomTo(ratio, pivot, _originalEvent) {\n            const {options, canvasData} = this;\n            const {width, height, naturalWidth, naturalHeight} = canvasData;\n            ratio = Number(ratio);\n            if (ratio >= 0 && this.ready && !this.disabled && options.zoomable) {\n                const newWidth = naturalWidth * ratio;\n                const newHeight = naturalHeight * ratio;\n                if (utilities.dispatchEvent(this.element, constants.EVENT_ZOOM, {\n                        ratio,\n                        oldRatio: width / naturalWidth,\n                        originalEvent: _originalEvent\n                    }) === false) {\n                    return this;\n                }\n                if (_originalEvent) {\n                    const {pointers} = this;\n                    const offset = utilities.getOffset(this.cropper);\n                    const center = pointers && Object.keys(pointers).length ? utilities.getPointersCenter(pointers) : {\n                        pageX: _originalEvent.pageX,\n                        pageY: _originalEvent.pageY\n                    };\n                    canvasData.left -= (newWidth - width) * ((center.pageX - offset.left - canvasData.left) / width);\n                    canvasData.top -= (newHeight - height) * ((center.pageY - offset.top - canvasData.top) / height);\n                } else if (utilities.isPlainObject(pivot) && utilities.isNumber(pivot.x) && utilities.isNumber(pivot.y)) {\n                    canvasData.left -= (newWidth - width) * ((pivot.x - canvasData.left) / width);\n                    canvasData.top -= (newHeight - height) * ((pivot.y - canvasData.top) / height);\n                } else {\n                    canvasData.left -= (newWidth - width) / 2;\n                    canvasData.top -= (newHeight - height) / 2;\n                }\n                canvasData.width = newWidth;\n                canvasData.height = newHeight;\n                this.renderCanvas(true);\n            }\n            return this;\n        },\n        rotate(degree) {\n            return this.rotateTo((this.imageData.rotate || 0) + Number(degree));\n        },\n        rotateTo(degree) {\n            degree = Number(degree);\n            if (utilities.isNumber(degree) && this.ready && !this.disabled && this.options.rotatable) {\n                this.imageData.rotate = degree % 360;\n                this.renderCanvas(true, true);\n            }\n            return this;\n        },\n        scaleX(scaleX) {\n            const {scaleY} = this.imageData;\n            return this.scale(scaleX, utilities.isNumber(scaleY) ? scaleY : 1);\n        },\n        scaleY(scaleY) {\n            const {scaleX} = this.imageData;\n            return this.scale(utilities.isNumber(scaleX) ? scaleX : 1, scaleY);\n        },\n        scale(scaleX, scaleY = scaleX) {\n            const {imageData} = this;\n            let transformed = false;\n            scaleX = Number(scaleX);\n            scaleY = Number(scaleY);\n            if (this.ready && !this.disabled && this.options.scalable) {\n                if (utilities.isNumber(scaleX)) {\n                    imageData.scaleX = scaleX;\n                    transformed = true;\n                }\n                if (utilities.isNumber(scaleY)) {\n                    imageData.scaleY = scaleY;\n                    transformed = true;\n                }\n                if (transformed) {\n                    this.renderCanvas(true, true);\n                }\n            }\n            return this;\n        },\n        getData(rounded = false) {\n            const {options, imageData, canvasData, cropBoxData} = this;\n            let data;\n            if (this.ready && this.cropped) {\n                data = {\n                    x: cropBoxData.left - canvasData.left,\n                    y: cropBoxData.top - canvasData.top,\n                    width: cropBoxData.width,\n                    height: cropBoxData.height\n                };\n                const ratio = imageData.width / imageData.naturalWidth;\n                utilities.forEach(data, (n, i) => {\n                    data[i] = n / ratio;\n                });\n                if (rounded) {\n                    const bottom = Math.round(data.y + data.height);\n                    const right = Math.round(data.x + data.width);\n                    data.x = Math.round(data.x);\n                    data.y = Math.round(data.y);\n                    data.width = right - data.x;\n                    data.height = bottom - data.y;\n                }\n            } else {\n                data = {\n                    x: 0,\n                    y: 0,\n                    width: 0,\n                    height: 0\n                };\n            }\n            if (options.rotatable) {\n                data.rotate = imageData.rotate || 0;\n            }\n            if (options.scalable) {\n                data.scaleX = imageData.scaleX || 1;\n                data.scaleY = imageData.scaleY || 1;\n            }\n            return data;\n        },\n        setData(data) {\n            const {options, imageData, canvasData} = this;\n            const cropBoxData = {};\n            if (this.ready && !this.disabled && utilities.isPlainObject(data)) {\n                let transformed = false;\n                if (options.rotatable) {\n                    if (utilities.isNumber(data.rotate) && data.rotate !== imageData.rotate) {\n                        imageData.rotate = data.rotate;\n                        transformed = true;\n                    }\n                }\n                if (options.scalable) {\n                    if (utilities.isNumber(data.scaleX) && data.scaleX !== imageData.scaleX) {\n                        imageData.scaleX = data.scaleX;\n                        transformed = true;\n                    }\n                    if (utilities.isNumber(data.scaleY) && data.scaleY !== imageData.scaleY) {\n                        imageData.scaleY = data.scaleY;\n                        transformed = true;\n                    }\n                }\n                if (transformed) {\n                    this.renderCanvas(true, true);\n                }\n                const ratio = imageData.width / imageData.naturalWidth;\n                if (utilities.isNumber(data.x)) {\n                    cropBoxData.left = data.x * ratio + canvasData.left;\n                }\n                if (utilities.isNumber(data.y)) {\n                    cropBoxData.top = data.y * ratio + canvasData.top;\n                }\n                if (utilities.isNumber(data.width)) {\n                    cropBoxData.width = data.width * ratio;\n                }\n                if (utilities.isNumber(data.height)) {\n                    cropBoxData.height = data.height * ratio;\n                }\n                this.setCropBoxData(cropBoxData);\n            }\n            return this;\n        },\n        getContainerData() {\n            return this.ready ? utilities.assign({}, this.containerData) : {};\n        },\n        getImageData() {\n            return this.sized ? utilities.assign({}, this.imageData) : {};\n        },\n        getCanvasData() {\n            const {canvasData} = this;\n            const data = {};\n            if (this.ready) {\n                utilities.forEach([\n                    'left',\n                    'top',\n                    'width',\n                    'height',\n                    'naturalWidth',\n                    'naturalHeight'\n                ], n => {\n                    data[n] = canvasData[n];\n                });\n            }\n            return data;\n        },\n        setCanvasData(data) {\n            const {canvasData} = this;\n            const {aspectRatio} = canvasData;\n            if (this.ready && !this.disabled && utilities.isPlainObject(data)) {\n                if (utilities.isNumber(data.left)) {\n                    canvasData.left = data.left;\n                }\n                if (utilities.isNumber(data.top)) {\n                    canvasData.top = data.top;\n                }\n                if (utilities.isNumber(data.width)) {\n                    canvasData.width = data.width;\n                    canvasData.height = data.width / aspectRatio;\n                } else if (utilities.isNumber(data.height)) {\n                    canvasData.height = data.height;\n                    canvasData.width = data.height * aspectRatio;\n                }\n                this.renderCanvas(true);\n            }\n            return this;\n        },\n        getCropBoxData() {\n            const {cropBoxData} = this;\n            let data;\n            if (this.ready && this.cropped) {\n                data = {\n                    left: cropBoxData.left,\n                    top: cropBoxData.top,\n                    width: cropBoxData.width,\n                    height: cropBoxData.height\n                };\n            }\n            return data || {};\n        },\n        setCropBoxData(data) {\n            const {cropBoxData} = this;\n            const {aspectRatio} = this.options;\n            let widthChanged;\n            let heightChanged;\n            if (this.ready && this.cropped && !this.disabled && utilities.isPlainObject(data)) {\n                if (utilities.isNumber(data.left)) {\n                    cropBoxData.left = data.left;\n                }\n                if (utilities.isNumber(data.top)) {\n                    cropBoxData.top = data.top;\n                }\n                if (utilities.isNumber(data.width) && data.width !== cropBoxData.width) {\n                    widthChanged = true;\n                    cropBoxData.width = data.width;\n                }\n                if (utilities.isNumber(data.height) && data.height !== cropBoxData.height) {\n                    heightChanged = true;\n                    cropBoxData.height = data.height;\n                }\n                if (aspectRatio) {\n                    if (widthChanged) {\n                        cropBoxData.height = cropBoxData.width / aspectRatio;\n                    } else if (heightChanged) {\n                        cropBoxData.width = cropBoxData.height * aspectRatio;\n                    }\n                }\n                this.renderCropBox();\n            }\n            return this;\n        },\n        getCroppedCanvas(options = {}) {\n            if (!this.ready || !window.HTMLCanvasElement) {\n                return null;\n            }\n            const {canvasData} = this;\n            const source = utilities.getSourceCanvas(this.image, this.imageData, canvasData, options);\n            if (!this.cropped) {\n                return source;\n            }\n            let {\n                x: initialX,\n                y: initialY,\n                width: initialWidth,\n                height: initialHeight\n            } = this.getData();\n            const ratio = source.width / Math.floor(canvasData.naturalWidth);\n            if (ratio !== 1) {\n                initialX *= ratio;\n                initialY *= ratio;\n                initialWidth *= ratio;\n                initialHeight *= ratio;\n            }\n            const aspectRatio = initialWidth / initialHeight;\n            const maxSizes = utilities.getAdjustedSizes({\n                aspectRatio,\n                width: options.maxWidth || Infinity,\n                height: options.maxHeight || Infinity\n            });\n            const minSizes = utilities.getAdjustedSizes({\n                aspectRatio,\n                width: options.minWidth || 0,\n                height: options.minHeight || 0\n            }, 'cover');\n            let {width, height} = utilities.getAdjustedSizes({\n                aspectRatio,\n                width: options.width || (ratio !== 1 ? source.width : initialWidth),\n                height: options.height || (ratio !== 1 ? source.height : initialHeight)\n            });\n            width = Math.min(maxSizes.width, Math.max(minSizes.width, width));\n            height = Math.min(maxSizes.height, Math.max(minSizes.height, height));\n            const canvas = document.createElement('canvas');\n            const context = canvas.getContext('2d');\n            canvas.width = utilities.normalizeDecimalNumber(width);\n            canvas.height = utilities.normalizeDecimalNumber(height);\n            context.fillStyle = options.fillColor || 'transparent';\n            context.fillRect(0, 0, width, height);\n            const {imageSmoothingEnabled = true, imageSmoothingQuality} = options;\n            context.imageSmoothingEnabled = imageSmoothingEnabled;\n            if (imageSmoothingQuality) {\n                context.imageSmoothingQuality = imageSmoothingQuality;\n            }\n            const sourceWidth = source.width;\n            const sourceHeight = source.height;\n            let srcX = initialX;\n            let srcY = initialY;\n            let srcWidth;\n            let srcHeight;\n            let dstX;\n            let dstY;\n            let dstWidth;\n            let dstHeight;\n            if (srcX <= -initialWidth || srcX > sourceWidth) {\n                srcX = 0;\n                srcWidth = 0;\n                dstX = 0;\n                dstWidth = 0;\n            } else if (srcX <= 0) {\n                dstX = -srcX;\n                srcX = 0;\n                srcWidth = Math.min(sourceWidth, initialWidth + srcX);\n                dstWidth = srcWidth;\n            } else if (srcX <= sourceWidth) {\n                dstX = 0;\n                srcWidth = Math.min(initialWidth, sourceWidth - srcX);\n                dstWidth = srcWidth;\n            }\n            if (srcWidth <= 0 || srcY <= -initialHeight || srcY > sourceHeight) {\n                srcY = 0;\n                srcHeight = 0;\n                dstY = 0;\n                dstHeight = 0;\n            } else if (srcY <= 0) {\n                dstY = -srcY;\n                srcY = 0;\n                srcHeight = Math.min(sourceHeight, initialHeight + srcY);\n                dstHeight = srcHeight;\n            } else if (srcY <= sourceHeight) {\n                dstY = 0;\n                srcHeight = Math.min(initialHeight, sourceHeight - srcY);\n                dstHeight = srcHeight;\n            }\n            const params = [\n                srcX,\n                srcY,\n                srcWidth,\n                srcHeight\n            ];\n            if (dstWidth > 0 && dstHeight > 0) {\n                const scale = width / initialWidth;\n                params.push(dstX * scale, dstY * scale, dstWidth * scale, dstHeight * scale);\n            }\n            context.drawImage(source, ...params.map(param => Math.floor(utilities.normalizeDecimalNumber(param))));\n            return canvas;\n        },\n        setAspectRatio(aspectRatio) {\n            const {options} = this;\n            if (!this.disabled && !utilities.isUndefined(aspectRatio)) {\n                options.aspectRatio = Math.max(0, aspectRatio) || NaN;\n                if (this.ready) {\n                    this.initCropBox();\n                    if (this.cropped) {\n                        this.renderCropBox();\n                    }\n                }\n            }\n            return this;\n        },\n        setDragMode(mode) {\n            const {options, dragBox, face} = this;\n            if (this.ready && !this.disabled) {\n                const croppable = mode === constants.DRAG_MODE_CROP;\n                const movable = options.movable && mode === constants.DRAG_MODE_MOVE;\n                mode = croppable || movable ? mode : constants.DRAG_MODE_NONE;\n                options.dragMode = mode;\n                utilities.setData(dragBox, constants.DATA_ACTION, mode);\n                utilities.toggleClass(dragBox, constants.CLASS_CROP, croppable);\n                utilities.toggleClass(dragBox, constants.CLASS_MOVE, movable);\n                if (!options.cropBoxMovable) {\n                    utilities.setData(face, constants.DATA_ACTION, mode);\n                    utilities.toggleClass(face, constants.CLASS_CROP, croppable);\n                    utilities.toggleClass(face, constants.CLASS_MOVE, movable);\n                }\n            }\n            return this;\n        }\n    };\n});"]}