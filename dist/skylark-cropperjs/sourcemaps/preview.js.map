{"version":3,"sources":["preview.js"],"names":["define","constants","utilities","[object Object]","element","crossOrigin","this","preview","options","url","crossOriginUrl","alt","image","document","createElement","src","viewBox","appendChild","viewBoxImage","previews","ownerDocument","querySelectorAll","querySelector","forEach","el","img","setData","DATA_PREVIEW","width","offsetWidth","height","offsetHeight","html","innerHTML","style","cssText","data","getData","setStyle","removeData","imageData","canvasData","cropBoxData","cropBoxWidth","cropBoxHeight","left","top","cropped","disabled","assign","getTransforms","translateX","translateY","originalWidth","originalHeight","newWidth","newHeight","ratio","getElementsByTagName"],"mappings":";;;;;;;AAAAA,QACI,cACA,eACD,SAAUC,EAAWC,GACpB,aACA,OACIC,cACI,MAAMC,QAACA,EAAOC,YAAEA,GAAeC,MACzBC,QAACA,GAAWD,KAAKE,QACjBC,EAAMJ,EAAcC,KAAKI,eAAiBJ,KAAKG,IAC/CE,EAAMP,EAAQO,KAAO,uBACrBC,EAAQC,SAASC,cAAc,OAQrC,GAPIT,IACAO,EAAMP,YAAcA,GAExBO,EAAMG,IAAMN,EACZG,EAAMD,IAAMA,EACZL,KAAKU,QAAQC,YAAYL,GACzBN,KAAKY,aAAeN,GACfL,EACD,OAEJ,IAAIY,EAAWZ,EACQ,iBAAZA,EACPY,EAAWf,EAAQgB,cAAcC,iBAAiBd,GAC3CA,EAAQe,gBACfH,GAAYZ,IAEhBD,KAAKa,SAAWA,EAChBjB,EAAUqB,QAAQJ,EAAUK,IACxB,MAAMC,EAAMZ,SAASC,cAAc,OACnCZ,EAAUwB,QAAQF,EAAIvB,EAAU0B,cAC5BC,MAAOJ,EAAGK,YACVC,OAAQN,EAAGO,aACXC,KAAMR,EAAGS,YAET5B,IACAoB,EAAIpB,YAAcA,GAEtBoB,EAAIV,IAAMN,EACVgB,EAAId,IAAMA,EACVc,EAAIS,MAAMC,QAAU,0KACpBX,EAAGS,UAAY,GACfT,EAAGP,YAAYQ,MAGvBtB,eACID,EAAUqB,QAAQjB,KAAKa,SAAUf,IAC7B,MAAMgC,EAAOlC,EAAUmC,QAAQjC,EAASH,EAAU0B,cAClDzB,EAAUoC,SAASlC,GACfwB,MAAOQ,EAAKR,MACZE,OAAQM,EAAKN,SAEjB1B,EAAQ6B,UAAYG,EAAKJ,KACzB9B,EAAUqC,WAAWnC,EAASH,EAAU0B,iBAGhDxB,UACI,MAAMqC,UAACA,EAASC,WAAEA,EAAUC,YAAEA,GAAepC,MAEzCsB,MAAOe,EACPb,OAAQc,GACRF,GACEd,MAACA,EAAKE,OAAEA,GAAUU,EAClBK,EAAOH,EAAYG,KAAOJ,EAAWI,KAAOL,EAAUK,KACtDC,EAAMJ,EAAYI,IAAML,EAAWK,IAAMN,EAAUM,IACpDxC,KAAKyC,UAAWzC,KAAK0C,WAG1B9C,EAAUoC,SAAShC,KAAKY,aAAchB,EAAU+C,QAC5CrB,MAAAA,EACAE,OAAAA,GACD5B,EAAUgD,cAAchD,EAAU+C,QACjCE,YAAaN,EACbO,YAAaN,GACdN,MACHtC,EAAUqB,QAAQjB,KAAKa,SAAUf,IAC7B,MAAMgC,EAAOlC,EAAUmC,QAAQjC,EAASH,EAAU0B,cAC5C0B,EAAgBjB,EAAKR,MACrB0B,EAAiBlB,EAAKN,OAC5B,IAAIyB,EAAWF,EACXG,EAAYF,EACZG,EAAQ,EACRd,IAEAa,EAAYZ,GADZa,EAAQJ,EAAgBV,IAGxBC,GAAiBY,EAAYF,IAE7BC,EAAWZ,GADXc,EAAQH,EAAiBV,GAEzBY,EAAYF,GAEhBpD,EAAUoC,SAASlC,GACfwB,MAAO2B,EACPzB,OAAQ0B,IAEZtD,EAAUoC,SAASlC,EAAQsD,qBAAqB,OAAO,GAAIxD,EAAU+C,QACjErB,MAAOA,EAAQ6B,EACf3B,OAAQA,EAAS2B,GAClBvD,EAAUgD,cAAchD,EAAU+C,QACjCE,YAAaN,EAAOY,EACpBL,YAAaN,EAAMW,GACpBjB","file":"../preview.js","sourcesContent":["define([\n    './constants',\n    './utilities'\n], function (constants, utilities) {\n    'use strict';\n    return {\n        initPreview() {\n            const {element, crossOrigin} = this;\n            const {preview} = this.options;\n            const url = crossOrigin ? this.crossOriginUrl : this.url;\n            const alt = element.alt || 'The image to preview';\n            const image = document.createElement('img');\n            if (crossOrigin) {\n                image.crossOrigin = crossOrigin;\n            }\n            image.src = url;\n            image.alt = alt;\n            this.viewBox.appendChild(image);\n            this.viewBoxImage = image;\n            if (!preview) {\n                return;\n            }\n            let previews = preview;\n            if (typeof preview === 'string') {\n                previews = element.ownerDocument.querySelectorAll(preview);\n            } else if (preview.querySelector) {\n                previews = [preview];\n            }\n            this.previews = previews;\n            utilities.forEach(previews, el => {\n                const img = document.createElement('img');\n                utilities.setData(el, constants.DATA_PREVIEW, {\n                    width: el.offsetWidth,\n                    height: el.offsetHeight,\n                    html: el.innerHTML\n                });\n                if (crossOrigin) {\n                    img.crossOrigin = crossOrigin;\n                }\n                img.src = url;\n                img.alt = alt;\n                img.style.cssText = 'display:block;' + 'width:100%;' + 'height:auto;' + 'min-width:0!important;' + 'min-height:0!important;' + 'max-width:none!important;' + 'max-height:none!important;' + 'image-orientation:0deg!important;\"';\n                el.innerHTML = '';\n                el.appendChild(img);\n            });\n        },\n        resetPreview() {\n            utilities.forEach(this.previews, element => {\n                const data = utilities.getData(element, constants.DATA_PREVIEW);\n                utilities.setStyle(element, {\n                    width: data.width,\n                    height: data.height\n                });\n                element.innerHTML = data.html;\n                utilities.removeData(element, constants.DATA_PREVIEW);\n            });\n        },\n        preview() {\n            const {imageData, canvasData, cropBoxData} = this;\n            const {\n                width: cropBoxWidth,\n                height: cropBoxHeight\n            } = cropBoxData;\n            const {width, height} = imageData;\n            const left = cropBoxData.left - canvasData.left - imageData.left;\n            const top = cropBoxData.top - canvasData.top - imageData.top;\n            if (!this.cropped || this.disabled) {\n                return;\n            }\n            utilities.setStyle(this.viewBoxImage, utilities.assign({\n                width,\n                height\n            }, utilities.getTransforms(utilities.assign({\n                translateX: -left,\n                translateY: -top\n            }, imageData))));\n            utilities.forEach(this.previews, element => {\n                const data = utilities.getData(element, constants.DATA_PREVIEW);\n                const originalWidth = data.width;\n                const originalHeight = data.height;\n                let newWidth = originalWidth;\n                let newHeight = originalHeight;\n                let ratio = 1;\n                if (cropBoxWidth) {\n                    ratio = originalWidth / cropBoxWidth;\n                    newHeight = cropBoxHeight * ratio;\n                }\n                if (cropBoxHeight && newHeight > originalHeight) {\n                    ratio = originalHeight / cropBoxHeight;\n                    newWidth = cropBoxWidth * ratio;\n                    newHeight = originalHeight;\n                }\n                utilities.setStyle(element, {\n                    width: newWidth,\n                    height: newHeight\n                });\n                utilities.setStyle(element.getElementsByTagName('img')[0], utilities.assign({\n                    width: width * ratio,\n                    height: height * ratio\n                }, utilities.getTransforms(utilities.assign({\n                    translateX: -left * ratio,\n                    translateY: -top * ratio\n                }, imageData))));\n            });\n        }\n    };\n});"]}