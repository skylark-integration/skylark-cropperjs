{"version":3,"sources":["skylark-cropperjs-all.js"],"names":["define","obj1","path","obj2","split","length","ns","i","name","_attach","skylark","attach","obj","main","IS_BROWSER","window","document","WINDOW","IS_TOUCH_DEVICE","documentElement","HAS_POINTER_EVENT","CLASS_CROP","CLASS_DISABLED","CLASS_HIDDEN","CLASS_HIDE","CLASS_INVISIBLE","CLASS_MODAL","CLASS_MOVE","DATA_ACTION","DATA_PREVIEW","EVENT_TOUCH_START","EVENT_TOUCH_MOVE","EVENT_TOUCH_END","EVENT_POINTER_DOWN","EVENT_POINTER_MOVE","EVENT_POINTER_UP","NAMESPACE","ACTION_ALL","ACTION_CROP","ACTION_MOVE","ACTION_ZOOM","ACTION_EAST","ACTION_WEST","ACTION_SOUTH","ACTION_NORTH","ACTION_NORTH_EAST","ACTION_NORTH_WEST","ACTION_SOUTH_EAST","ACTION_SOUTH_WEST","DRAG_MODE_CROP","DRAG_MODE_MOVE","DRAG_MODE_NONE","EVENT_CROP","EVENT_CROP_END","EVENT_CROP_MOVE","EVENT_CROP_START","EVENT_DBLCLICK","EVENT_READY","EVENT_RESIZE","EVENT_WHEEL","EVENT_ZOOM","MIME_TYPE_JPEG","REGEXP_ACTIONS","REGEXP_DATA_URL","REGEXP_DATA_URL_JPEG","REGEXP_TAG_NAME","MIN_CONTAINER_WIDTH","MIN_CONTAINER_HEIGHT","a","viewMode","dragMode","initialAspectRatio","NaN","aspectRatio","data","preview","responsive","restore","checkCrossOrigin","checkOrientation","modal","guides","center","highlight","background","autoCrop","autoCropArea","movable","rotatable","scalable","zoomable","zoomOnTouch","zoomOnWheel","wheelZoomRatio","cropBoxMovable","cropBoxResizable","toggleDragModeOnDblclick","minCanvasWidth","minCanvasHeight","minCropBoxWidth","minCropBoxHeight","minContainerWidth","minContainerHeight","ready","cropstart","cropmove","cropend","crop","zoom","constants","isNaN","Number","isNumber","value","isPositiveNumber","Infinity","isObject","_typeof","hasOwnProperty","Object","prototype","isFunction","slice","Array","toArray","from","call","forEach","callback","isArray","key","keys","assign","target","_len","arguments","args","_key","arg","REGEXP_DECIMALS","normalizeDecimalNumber","times","undefined","test","Math","round","REGEXP_SUFFIX","addClass","element","elem","classList","add","className","trim","indexOf","concat","removeClass","remove","replace","REGEXP_CAMEL_CASE","toParamCase","toLowerCase","REGEXP_SPACES","onceSupported","supported","once","listener","options","defineProperty","get","set","addEventListener","removeEventListener","location","REGEXP_ORIGINS","getAdjustedSizes","_ref4","height","width","type","isValidWidth","isValidHeight","adjustedWidth","fromCharCode","String","getStringFromCharCode","dataView","start","str","getUint8","REGEXP_DATA_URL_HEAD","isUndefined","isPlainObject","_constructor","constructor","error","setStyle","styles","style","property","hasClass","contains","toggleClass","added","getData","dataset","getAttribute","setData","setAttribute","removeData","removeAttribute","removeListener","handler","event","listeners","addListener","_handler","_element$listeners","_len2","_key2","apply","dispatchEvent","Event","CustomEvent","detail","bubbles","cancelable","createEvent","initCustomEvent","getOffset","box","getBoundingClientRect","left","pageXOffset","clientLeft","top","pageYOffset","clientTop","isCrossOriginURL","url","parts","match","protocol","hostname","port","addTimestamp","timestamp","Date","getTime","getTransforms","_ref","rotate","scaleX","scaleY","translateX","translateY","values","push","transform","join","WebkitTransform","msTransform","getMaxZoomRatio","pointers","pointers2","_objectSpread2","ratios","pointer","pointerId","pointer2","x1","abs","startX","y1","startY","x2","endX","y2","endY","z1","sqrt","ratio","sort","b","getPointer","_ref2","endOnly","pageX","pageY","end","getPointersCenter","count","_ref3","getRotatedSizes","_ref5","degree","arc","PI","sinArc","sin","cosArc","cos","newWidth","newHeight","getSourceCanvas","image","_ref6","_ref7","_ref8","imageAspectRatio","imageNaturalWidth","naturalWidth","imageNaturalHeight","naturalHeight","_ref6$rotate","_ref6$scaleX","_ref6$scaleY","_ref8$fillColor","fillColor","_ref8$imageSmoothingE","imageSmoothingEnabled","_ref8$imageSmoothingQ","imageSmoothingQuality","_ref8$maxWidth","maxWidth","_ref8$maxHeight","maxHeight","_ref8$minWidth","minWidth","_ref8$minHeight","minHeight","canvas","createElement","context","getContext","maxSizes","minSizes","min","max","destMaxSizes","destMinSizes","destWidth","destHeight","params","fillStyle","fillRect","save","translate","scale","drawImage","_toConsumableArray","map","param","floor","dataURLToArrayBuffer","dataURL","base64","binary","atob","arrayBuffer","ArrayBuffer","uint8","Uint8Array","charCodeAt","arrayBufferToDataURL","mimeType","chunks","subarray","btoa","resetAndGetOrientation","orientation","DataView","littleEndian","app1Start","ifdStart","byteLength","offset","exifIDCode","tiffOffset","endianness","getUint16","firstIFDOffset","getUint32","_offset","_length","setUint16","parseOrientation","utilities","[object Object]","this","initContainer","initCanvas","initCropBox","renderCanvas","cropped","renderCropBox","container","cropper","containerData","offsetWidth","offsetHeight","imageData","rotated","canvasWidth","canvasHeight","canvasData","oldLeft","oldTop","limited","limitCanvas","initialImageData","initialCanvasData","sizeLimited","positionLimited","cropBoxData","newCanvasLeft","newCanvasTop","minLeft","minTop","maxLeft","maxTop","changed","transformed","renderImage","limitCropBox","output","initialCropBoxData","maxCropBoxWidth","maxCropBoxHeight","face","cropBox","disabled","crossOrigin","crossOriginUrl","alt","src","viewBox","appendChild","viewBoxImage","previews","ownerDocument","querySelectorAll","querySelector","el","img","html","innerHTML","cssText","cropBoxWidth","cropBoxHeight","originalWidth","originalHeight","getElementsByTagName","onCropStart","cropStart","bind","onWheel","wheel","passive","capture","onDblclick","dblclick","onCropMove","cropMove","onCropEnd","cropEnd","onResize","resize","getCanvasData","getCropBoxData","render","setCanvasData","n","setCropBoxData","setDragMode","dragBox","delta","preventDefault","wheeling","setTimeout","deltaY","wheelDelta","buttons","button","pointerType","ctrlKey","action","changedTouches","touch","identifier","originalEvent","cropping","change","right","bottom","renderable","shiftKey","range","x","y","check","side","move","p","hasSameSize","isImg","replaced","uncreate","load","originalUrl","offsetX","offsetY","moveTo","_originalEvent","zoomTo","pivot","oldRatio","rotateTo","rounded","sized","widthChanged","heightChanged","HTMLCanvasElement","source","initialX","initialY","initialWidth","initialHeight","sourceWidth","sourceHeight","srcWidth","srcHeight","dstX","dstY","dstWidth","dstHeight","srcX","srcY","mode","croppable","DEFAULTS","TEMPLATE","events","handlers","methods","AnotherCropper","Cropper","tagName","Error","reloading","sizing","init","toDataURL","clone","read","xhr","XMLHttpRequest","onabort","onerror","ontimeout","onprogress","getResponseHeader","abort","onload","response","onloadend","open","responseType","withCredentials","send","stop","parentNode","insertBefore","nextSibling","isIOSWebKit","navigator","userAgent","done","build","sizingImage","body","removeChild","template","initPreview","getElementsByClassName","unbind","resetPreview","unbuild"],"mappings":"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","file":"../skylark-cropperjs-all.js","sourcesContent":["define('skylark-langx-ns/_attach',[],function(){\r\n    return  function attach(obj1,path,obj2) {\r\n        if (typeof path == \"string\") {\r\n            path = path.split(\".\");//[path]\r\n        };\r\n        var length = path.length,\r\n            ns=obj1,\r\n            i=0,\r\n            name = path[i++];\r\n\r\n        while (i < length) {\r\n            ns = ns[name] = ns[name] || {};\r\n            name = path[i++];\r\n        }\r\n\r\n        return ns[name] = obj2;\r\n    }\r\n});\ndefine('skylark-langx-ns/ns',[\r\n    \"./_attach\"\r\n], function(_attach) {\r\n    var skylark = {\r\n    \tattach : function(path,obj) {\r\n    \t\treturn _attach(skylark,path,obj);\r\n    \t}\r\n    };\r\n    return skylark;\r\n});\r\n\ndefine('skylark-langx-ns/main',[\r\n\t\"./ns\"\r\n],function(skylark){\r\n\treturn skylark;\r\n});\ndefine('skylark-langx-ns', ['skylark-langx-ns/main'], function (main) { return main; });\n\ndefine('skylark-langx/skylark',[\r\n    \"skylark-langx-ns\"\r\n], function(ns) {\r\n\treturn ns;\r\n});\r\n\ndefine('skylark-cropperjs/constants',[],function () {\n    'use strict';\n    const IS_BROWSER = typeof window !== 'undefined' && typeof window.document !== 'undefined';\n    const WINDOW = IS_BROWSER ? window : {};\n    const IS_TOUCH_DEVICE = IS_BROWSER ? 'ontouchstart' in WINDOW.document.documentElement : false;\n    const HAS_POINTER_EVENT = IS_BROWSER ? 'PointerEvent' in WINDOW : false;\n    const NAMESPACE = 'cropper';\n    const ACTION_ALL = 'all';\n    const ACTION_CROP = 'crop';\n    const ACTION_MOVE = 'move';\n    const ACTION_ZOOM = 'zoom';\n    const ACTION_EAST = 'e';\n    const ACTION_WEST = 'w';\n    const ACTION_SOUTH = 's';\n    const ACTION_NORTH = 'n';\n    const ACTION_NORTH_EAST = 'ne';\n    const ACTION_NORTH_WEST = 'nw';\n    const ACTION_SOUTH_EAST = 'se';\n    const ACTION_SOUTH_WEST = 'sw';\n    const CLASS_CROP = `${ NAMESPACE }-crop`;\n    const CLASS_DISABLED = `${ NAMESPACE }-disabled`;\n    const CLASS_HIDDEN = `${ NAMESPACE }-hidden`;\n    const CLASS_HIDE = `${ NAMESPACE }-hide`;\n    const CLASS_INVISIBLE = `${ NAMESPACE }-invisible`;\n    const CLASS_MODAL = `${ NAMESPACE }-modal`;\n    const CLASS_MOVE = `${ NAMESPACE }-move`;\n    const DATA_ACTION = `${ NAMESPACE }Action`;\n    const DATA_PREVIEW = `${ NAMESPACE }Preview`;\n    const DRAG_MODE_CROP = 'crop';\n    const DRAG_MODE_MOVE = 'move';\n    const DRAG_MODE_NONE = 'none';\n    const EVENT_CROP = 'crop';\n    const EVENT_CROP_END = 'cropend';\n    const EVENT_CROP_MOVE = 'cropmove';\n    const EVENT_CROP_START = 'cropstart';\n    const EVENT_DBLCLICK = 'dblclick';\n    const EVENT_TOUCH_START = IS_TOUCH_DEVICE ? 'touchstart' : 'mousedown';\n    const EVENT_TOUCH_MOVE = IS_TOUCH_DEVICE ? 'touchmove' : 'mousemove';\n    const EVENT_TOUCH_END = IS_TOUCH_DEVICE ? 'touchend touchcancel' : 'mouseup';\n    const EVENT_POINTER_DOWN = HAS_POINTER_EVENT ? 'pointerdown' : EVENT_TOUCH_START;\n    const EVENT_POINTER_MOVE = HAS_POINTER_EVENT ? 'pointermove' : EVENT_TOUCH_MOVE;\n    const EVENT_POINTER_UP = HAS_POINTER_EVENT ? 'pointerup pointercancel' : EVENT_TOUCH_END;\n    const EVENT_READY = 'ready';\n    const EVENT_RESIZE = 'resize';\n    const EVENT_WHEEL = 'wheel';\n    const EVENT_ZOOM = 'zoom';\n    const MIME_TYPE_JPEG = 'image/jpeg';\n    const REGEXP_ACTIONS = /^e|w|s|n|se|sw|ne|nw|all|crop|move|zoom$/;\n    const REGEXP_DATA_URL = /^data:/;\n    const REGEXP_DATA_URL_JPEG = /^data:image\\/jpeg;base64,/;\n    const REGEXP_TAG_NAME = /^img|canvas$/i;\n    const MIN_CONTAINER_WIDTH = 200;\n    const MIN_CONTAINER_HEIGHT = 100;\n    return {\n        IS_BROWSER: IS_BROWSER,\n        WINDOW: WINDOW,\n        IS_TOUCH_DEVICE: IS_TOUCH_DEVICE,\n        HAS_POINTER_EVENT: HAS_POINTER_EVENT,\n        NAMESPACE: NAMESPACE,\n        ACTION_ALL: ACTION_ALL,\n        ACTION_CROP: ACTION_CROP,\n        ACTION_MOVE: ACTION_MOVE,\n        ACTION_ZOOM: ACTION_ZOOM,\n        ACTION_EAST: ACTION_EAST,\n        ACTION_WEST: ACTION_WEST,\n        ACTION_SOUTH: ACTION_SOUTH,\n        ACTION_NORTH: ACTION_NORTH,\n        ACTION_NORTH_EAST: ACTION_NORTH_EAST,\n        ACTION_NORTH_WEST: ACTION_NORTH_WEST,\n        ACTION_SOUTH_EAST: ACTION_SOUTH_EAST,\n        ACTION_SOUTH_WEST: ACTION_SOUTH_WEST,\n        CLASS_CROP: CLASS_CROP,\n        CLASS_DISABLED: CLASS_DISABLED,\n        CLASS_HIDDEN: CLASS_HIDDEN,\n        CLASS_HIDE: CLASS_HIDE,\n        CLASS_INVISIBLE: CLASS_INVISIBLE,\n        CLASS_MODAL: CLASS_MODAL,\n        CLASS_MOVE: CLASS_MOVE,\n        DATA_ACTION: DATA_ACTION,\n        DATA_PREVIEW: DATA_PREVIEW,\n        DRAG_MODE_CROP: DRAG_MODE_CROP,\n        DRAG_MODE_MOVE: DRAG_MODE_MOVE,\n        DRAG_MODE_NONE: DRAG_MODE_NONE,\n        EVENT_CROP: EVENT_CROP,\n        EVENT_CROP_END: EVENT_CROP_END,\n        EVENT_CROP_MOVE: EVENT_CROP_MOVE,\n        EVENT_CROP_START: EVENT_CROP_START,\n        EVENT_DBLCLICK: EVENT_DBLCLICK,\n        EVENT_TOUCH_START: EVENT_TOUCH_START,\n        EVENT_TOUCH_MOVE: EVENT_TOUCH_MOVE,\n        EVENT_TOUCH_END: EVENT_TOUCH_END,\n        EVENT_POINTER_DOWN: EVENT_POINTER_DOWN,\n        EVENT_POINTER_MOVE: EVENT_POINTER_MOVE,\n        EVENT_POINTER_UP: EVENT_POINTER_UP,\n        EVENT_READY: EVENT_READY,\n        EVENT_RESIZE: EVENT_RESIZE,\n        EVENT_WHEEL: EVENT_WHEEL,\n        EVENT_ZOOM: EVENT_ZOOM,\n        MIME_TYPE_JPEG: MIME_TYPE_JPEG,\n        REGEXP_ACTIONS: REGEXP_ACTIONS,\n        REGEXP_DATA_URL: REGEXP_DATA_URL,\n        REGEXP_DATA_URL_JPEG: REGEXP_DATA_URL_JPEG,\n        REGEXP_TAG_NAME: REGEXP_TAG_NAME,\n        MIN_CONTAINER_WIDTH: MIN_CONTAINER_WIDTH,\n        MIN_CONTAINER_HEIGHT: MIN_CONTAINER_HEIGHT\n    };\n});\ndefine('skylark-cropperjs/defaults',['./constants'], function (a) {\n    'use strict';\n    return {\n        viewMode: 0,\n        dragMode: a.DRAG_MODE_CROP,\n        initialAspectRatio: NaN,\n        aspectRatio: NaN,\n        data: null,\n        preview: '',\n        responsive: true,\n        restore: true,\n        checkCrossOrigin: true,\n        checkOrientation: true,\n        modal: true,\n        guides: true,\n        center: true,\n        highlight: true,\n        background: true,\n        autoCrop: true,\n        autoCropArea: 0.8,\n        movable: true,\n        rotatable: true,\n        scalable: true,\n        zoomable: true,\n        zoomOnTouch: true,\n        zoomOnWheel: true,\n        wheelZoomRatio: 0.1,\n        cropBoxMovable: true,\n        cropBoxResizable: true,\n        toggleDragModeOnDblclick: true,\n        minCanvasWidth: 0,\n        minCanvasHeight: 0,\n        minCropBoxWidth: 0,\n        minCropBoxHeight: 0,\n        minContainerWidth: 200,\n        minContainerHeight: 100,\n        ready: null,\n        cropstart: null,\n        cropmove: null,\n        cropend: null,\n        crop: null,\n        zoom: null\n    };\n});\ndefine('skylark-cropperjs/template',[],function () {\n    'use strict';\n    return '<div class=\"cropper-container\" touch-action=\"none\">' + '<div class=\"cropper-wrap-box\">' + '<div class=\"cropper-canvas\"></div>' + '</div>' + '<div class=\"cropper-drag-box\"></div>' + '<div class=\"cropper-crop-box\">' + '<span class=\"cropper-view-box\"></span>' + '<span class=\"cropper-dashed dashed-h\"></span>' + '<span class=\"cropper-dashed dashed-v\"></span>' + '<span class=\"cropper-center\"></span>' + '<span class=\"cropper-face\"></span>' + '<span class=\"cropper-line line-e\" data-cropper-action=\"e\"></span>' + '<span class=\"cropper-line line-n\" data-cropper-action=\"n\"></span>' + '<span class=\"cropper-line line-w\" data-cropper-action=\"w\"></span>' + '<span class=\"cropper-line line-s\" data-cropper-action=\"s\"></span>' + '<span class=\"cropper-point point-e\" data-cropper-action=\"e\"></span>' + '<span class=\"cropper-point point-n\" data-cropper-action=\"n\"></span>' + '<span class=\"cropper-point point-w\" data-cropper-action=\"w\"></span>' + '<span class=\"cropper-point point-s\" data-cropper-action=\"s\"></span>' + '<span class=\"cropper-point point-ne\" data-cropper-action=\"ne\"></span>' + '<span class=\"cropper-point point-nw\" data-cropper-action=\"nw\"></span>' + '<span class=\"cropper-point point-sw\" data-cropper-action=\"sw\"></span>' + '<span class=\"cropper-point point-se\" data-cropper-action=\"se\"></span>' + '</div>' + '</div>';\n});\ndefine('skylark-cropperjs/utilities',['./constants'], function (constants) {\n    'use strict';\n\n\n\n/**\n * Check if the given value is not a number.\n */\n\nvar isNaN = Number.isNaN || constants.WINDOW.isNaN;\n/**\n * Check if the given value is a number.\n * @param {*} value - The value to check.\n * @returns {boolean} Returns `true` if the given value is a number, else `false`.\n */\n\nfunction isNumber(value) {\n  return typeof value === 'number' && !isNaN(value);\n}\n/**\n * Check if the given value is a positive number.\n * @param {*} value - The value to check.\n * @returns {boolean} Returns `true` if the given value is a positive number, else `false`.\n */\n\nvar isPositiveNumber = function isPositiveNumber(value) {\n  return value > 0 && value < Infinity;\n};\n/**\n * Check if the given value is undefined.\n * @param {*} value - The value to check.\n * @returns {boolean} Returns `true` if the given value is undefined, else `false`.\n */\n\nfunction isUndefined(value) {\n  return typeof value === 'undefined';\n}\n/**\n * Check if the given value is an object.\n * @param {*} value - The value to check.\n * @returns {boolean} Returns `true` if the given value is an object, else `false`.\n */\n\nfunction isObject(value) {\n  return _typeof(value) === 'object' && value !== null;\n}\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n/**\n * Check if the given value is a plain object.\n * @param {*} value - The value to check.\n * @returns {boolean} Returns `true` if the given value is a plain object, else `false`.\n */\n\nfunction isPlainObject(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n\n  try {\n    var _constructor = value.constructor;\n    var prototype = _constructor.prototype;\n    return _constructor && prototype && hasOwnProperty.call(prototype, 'isPrototypeOf');\n  } catch (error) {\n    return false;\n  }\n}\n/**\n * Check if the given value is a function.\n * @param {*} value - The value to check.\n * @returns {boolean} Returns `true` if the given value is a function, else `false`.\n */\n\nfunction isFunction(value) {\n  return typeof value === 'function';\n}\nvar slice = Array.prototype.slice;\n/**\n * Convert array-like or iterable object to an array.\n * @param {*} value - The value to convert.\n * @returns {Array} Returns a new array.\n */\n\nfunction toArray(value) {\n  return Array.from ? Array.from(value) : slice.call(value);\n}\n/**\n * Iterate the given data.\n * @param {*} data - The data to iterate.\n * @param {Function} callback - The process function for each element.\n * @returns {*} The original data.\n */\n\nfunction forEach(data, callback) {\n  if (data && isFunction(callback)) {\n    if (Array.isArray(data) || isNumber(data.length)\n    /* array-like */\n    ) {\n        toArray(data).forEach(function (value, key) {\n          callback.call(data, value, key, data);\n        });\n      } else if (isObject(data)) {\n      Object.keys(data).forEach(function (key) {\n        callback.call(data, data[key], key, data);\n      });\n    }\n  }\n\n  return data;\n}\n/**\n * Extend the given object.\n * @param {*} target - The target object to extend.\n * @param {*} args - The rest objects for merging to the target object.\n * @returns {Object} The extended object.\n */\n\nvar assign = Object.assign || function assign(target) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  if (isObject(target) && args.length > 0) {\n    args.forEach(function (arg) {\n      if (isObject(arg)) {\n        Object.keys(arg).forEach(function (key) {\n          target[key] = arg[key];\n        });\n      }\n    });\n  }\n\n  return target;\n};\nvar REGEXP_DECIMALS = /\\.\\d*(?:0|9){12}\\d*$/;\n/**\n * Normalize decimal number.\n * Check out {@link http://0.30000000000000004.com/}\n * @param {number} value - The value to normalize.\n * @param {number} [times=100000000000] - The times for normalizing.\n * @returns {number} Returns the normalized number.\n */\n\nfunction normalizeDecimalNumber(value) {\n  var times = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100000000000;\n  return REGEXP_DECIMALS.test(value) ? Math.round(value * times) / times : value;\n}\nvar REGEXP_SUFFIX = /^width|height|left|top|marginLeft|marginTop$/;\n/**\n * Apply styles to the given element.\n * @param {Element} element - The target element.\n * @param {Object} styles - The styles for applying.\n */\n\nfunction setStyle(element, styles) {\n  var style = element.style;\n  forEach(styles, function (value, property) {\n    if (REGEXP_SUFFIX.test(property) && isNumber(value)) {\n      value = \"\".concat(value, \"px\");\n    }\n\n    style[property] = value;\n  });\n}\n/**\n * Check if the given element has a special class.\n * @param {Element} element - The element to check.\n * @param {string} value - The class to search.\n * @returns {boolean} Returns `true` if the special class was found.\n */\n\nfunction hasClass(element, value) {\n  return element.classList ? element.classList.contains(value) : element.className.indexOf(value) > -1;\n}\n/**\n * Add classes to the given element.\n * @param {Element} element - The target element.\n * @param {string} value - The classes to be added.\n */\n\nfunction addClass(element, value) {\n  if (!value) {\n    return;\n  }\n\n  if (isNumber(element.length)) {\n    forEach(element, function (elem) {\n      addClass(elem, value);\n    });\n    return;\n  }\n\n  if (element.classList) {\n    element.classList.add(value);\n    return;\n  }\n\n  var className = element.className.trim();\n\n  if (!className) {\n    element.className = value;\n  } else if (className.indexOf(value) < 0) {\n    element.className = \"\".concat(className, \" \").concat(value);\n  }\n}\n/**\n * Remove classes from the given element.\n * @param {Element} element - The target element.\n * @param {string} value - The classes to be removed.\n */\n\nfunction removeClass(element, value) {\n  if (!value) {\n    return;\n  }\n\n  if (isNumber(element.length)) {\n    forEach(element, function (elem) {\n      removeClass(elem, value);\n    });\n    return;\n  }\n\n  if (element.classList) {\n    element.classList.remove(value);\n    return;\n  }\n\n  if (element.className.indexOf(value) >= 0) {\n    element.className = element.className.replace(value, '');\n  }\n}\n/**\n * Add or remove classes from the given element.\n * @param {Element} element - The target element.\n * @param {string} value - The classes to be toggled.\n * @param {boolean} added - Add only.\n */\n\nfunction toggleClass(element, value, added) {\n  if (!value) {\n    return;\n  }\n\n  if (isNumber(element.length)) {\n    forEach(element, function (elem) {\n      toggleClass(elem, value, added);\n    });\n    return;\n  } // IE10-11 doesn't support the second parameter of `classList.toggle`\n\n\n  if (added) {\n    addClass(element, value);\n  } else {\n    removeClass(element, value);\n  }\n}\nvar REGEXP_CAMEL_CASE = /([a-z\\d])([A-Z])/g;\n/**\n * Transform the given string from camelCase to kebab-case\n * @param {string} value - The value to transform.\n * @returns {string} The transformed value.\n */\n\nfunction toParamCase(value) {\n  return value.replace(REGEXP_CAMEL_CASE, '$1-$2').toLowerCase();\n}\n/**\n * Get data from the given element.\n * @param {Element} element - The target element.\n * @param {string} name - The data key to get.\n * @returns {string} The data value.\n */\n\nfunction getData(element, name) {\n  if (isObject(element[name])) {\n    return element[name];\n  }\n\n  if (element.dataset) {\n    return element.dataset[name];\n  }\n\n  return element.getAttribute(\"data-\".concat(toParamCase(name)));\n}\n/**\n * Set data to the given element.\n * @param {Element} element - The target element.\n * @param {string} name - The data key to set.\n * @param {string} data - The data value.\n */\n\nfunction setData(element, name, data) {\n  if (isObject(data)) {\n    element[name] = data;\n  } else if (element.dataset) {\n    element.dataset[name] = data;\n  } else {\n    element.setAttribute(\"data-\".concat(toParamCase(name)), data);\n  }\n}\n/**\n * Remove data from the given element.\n * @param {Element} element - The target element.\n * @param {string} name - The data key to remove.\n */\n\nfunction removeData(element, name) {\n  if (isObject(element[name])) {\n    try {\n      delete element[name];\n    } catch (error) {\n      element[name] = undefined;\n    }\n  } else if (element.dataset) {\n    // #128 Safari not allows to delete dataset property\n    try {\n      delete element.dataset[name];\n    } catch (error) {\n      element.dataset[name] = undefined;\n    }\n  } else {\n    element.removeAttribute(\"data-\".concat(toParamCase(name)));\n  }\n}\nvar REGEXP_SPACES = /\\s\\s*/;\n\nvar onceSupported = function () {\n  var supported = false;\n\n  if (constants.IS_BROWSER) {\n    var once = false;\n\n    var listener = function listener() {};\n\n    var options = Object.defineProperty({}, 'once', {\n      get: function get() {\n        supported = true;\n        return once;\n      },\n\n      /**\n       * This setter can fix a `TypeError` in strict mode\n       * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Getter_only}\n       * @param {boolean} value - The value to set\n       */\n      set: function set(value) {\n        once = value;\n      }\n    });\n    constants.WINDOW.addEventListener('test', listener, options);\n    constants.WINDOW.removeEventListener('test', listener, options);\n  }\n\n  return supported;\n}();\n/**\n * Remove event listener from the target element.\n * @param {Element} element - The event target.\n * @param {string} type - The event type(s).\n * @param {Function} listener - The event listener.\n * @param {Object} options - The event options.\n */\n\n\nfunction removeListener(element, type, listener) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var handler = listener;\n  type.trim().split(REGEXP_SPACES).forEach(function (event) {\n    if (!onceSupported) {\n      var listeners = element.listeners;\n\n      if (listeners && listeners[event] && listeners[event][listener]) {\n        handler = listeners[event][listener];\n        delete listeners[event][listener];\n\n        if (Object.keys(listeners[event]).length === 0) {\n          delete listeners[event];\n        }\n\n        if (Object.keys(listeners).length === 0) {\n          delete element.listeners;\n        }\n      }\n    }\n\n    element.removeEventListener(event, handler, options);\n  });\n}\n/**\n * Add event listener to the target element.\n * @param {Element} element - The event target.\n * @param {string} type - The event type(s).\n * @param {Function} listener - The event listener.\n * @param {Object} options - The event options.\n */\n\nfunction addListener(element, type, listener) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var _handler = listener;\n  type.trim().split(REGEXP_SPACES).forEach(function (event) {\n    if (options.once && !onceSupported) {\n      var _element$listeners = element.listeners,\n          listeners = _element$listeners === void 0 ? {} : _element$listeners;\n\n      _handler = function handler() {\n        delete listeners[event][listener];\n        element.removeEventListener(event, _handler, options);\n\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        listener.apply(element, args);\n      };\n\n      if (!listeners[event]) {\n        listeners[event] = {};\n      }\n\n      if (listeners[event][listener]) {\n        element.removeEventListener(event, listeners[event][listener], options);\n      }\n\n      listeners[event][listener] = _handler;\n      element.listeners = listeners;\n    }\n\n    element.addEventListener(event, _handler, options);\n  });\n}\n/**\n * Dispatch event on the target element.\n * @param {Element} element - The event target.\n * @param {string} type - The event type(s).\n * @param {Object} data - The additional event data.\n * @returns {boolean} Indicate if the event is default prevented or not.\n */\n\nfunction dispatchEvent(element, type, data) {\n  var event; // Event and CustomEvent on IE9-11 are global objects, not constructors\n\n  if (isFunction(Event) && isFunction(CustomEvent)) {\n    event = new CustomEvent(type, {\n      detail: data,\n      bubbles: true,\n      cancelable: true\n    });\n  } else {\n    event = document.createEvent('CustomEvent');\n    event.initCustomEvent(type, true, true, data);\n  }\n\n  return element.dispatchEvent(event);\n}\n/**\n * Get the offset base on the document.\n * @param {Element} element - The target element.\n * @returns {Object} The offset data.\n */\n\nfunction getOffset(element) {\n  var box = element.getBoundingClientRect();\n  return {\n    left: box.left + (window.pageXOffset - document.documentElement.clientLeft),\n    top: box.top + (window.pageYOffset - document.documentElement.clientTop)\n  };\n}\nvar location = constants.WINDOW.location;\nvar REGEXP_ORIGINS = /^(\\w+:)\\/\\/([^:/?#]*):?(\\d*)/i;\n/**\n * Check if the given URL is a cross origin URL.\n * @param {string} url - The target URL.\n * @returns {boolean} Returns `true` if the given URL is a cross origin URL, else `false`.\n */\n\nfunction isCrossOriginURL(url) {\n  var parts = url.match(REGEXP_ORIGINS);\n  return parts !== null && (parts[1] !== location.protocol || parts[2] !== location.hostname || parts[3] !== location.port);\n}\n/**\n * Add timestamp to the given URL.\n * @param {string} url - The target URL.\n * @returns {string} The result URL.\n */\n\nfunction addTimestamp(url) {\n  var timestamp = \"timestamp=\".concat(new Date().getTime());\n  return url + (url.indexOf('?') === -1 ? '?' : '&') + timestamp;\n}\n/**\n * Get transforms base on the given object.\n * @param {Object} obj - The target object.\n * @returns {string} A string contains transform values.\n */\n\nfunction getTransforms(_ref) {\n  var rotate = _ref.rotate,\n      scaleX = _ref.scaleX,\n      scaleY = _ref.scaleY,\n      translateX = _ref.translateX,\n      translateY = _ref.translateY;\n  var values = [];\n\n  if (isNumber(translateX) && translateX !== 0) {\n    values.push(\"translateX(\".concat(translateX, \"px)\"));\n  }\n\n  if (isNumber(translateY) && translateY !== 0) {\n    values.push(\"translateY(\".concat(translateY, \"px)\"));\n  } // Rotate should come first before scale to match orientation transform\n\n\n  if (isNumber(rotate) && rotate !== 0) {\n    values.push(\"rotate(\".concat(rotate, \"deg)\"));\n  }\n\n  if (isNumber(scaleX) && scaleX !== 1) {\n    values.push(\"scaleX(\".concat(scaleX, \")\"));\n  }\n\n  if (isNumber(scaleY) && scaleY !== 1) {\n    values.push(\"scaleY(\".concat(scaleY, \")\"));\n  }\n\n  var transform = values.length ? values.join(' ') : 'none';\n  return {\n    WebkitTransform: transform,\n    msTransform: transform,\n    transform: transform\n  };\n}\n/**\n * Get the max ratio of a group of pointers.\n * @param {string} pointers - The target pointers.\n * @returns {number} The result ratio.\n */\n\nfunction getMaxZoomRatio(pointers) {\n  var pointers2 = _objectSpread2({}, pointers);\n\n  var ratios = [];\n  forEach(pointers, function (pointer, pointerId) {\n    delete pointers2[pointerId];\n    forEach(pointers2, function (pointer2) {\n      var x1 = Math.abs(pointer.startX - pointer2.startX);\n      var y1 = Math.abs(pointer.startY - pointer2.startY);\n      var x2 = Math.abs(pointer.endX - pointer2.endX);\n      var y2 = Math.abs(pointer.endY - pointer2.endY);\n      var z1 = Math.sqrt(x1 * x1 + y1 * y1);\n      var z2 = Math.sqrt(x2 * x2 + y2 * y2);\n      var ratio = (z2 - z1) / z1;\n      ratios.push(ratio);\n    });\n  });\n  ratios.sort(function (a, b) {\n    return Math.abs(a) < Math.abs(b);\n  });\n  return ratios[0];\n}\n/**\n * Get a pointer from an event object.\n * @param {Object} event - The target event object.\n * @param {boolean} endOnly - Indicates if only returns the end point coordinate or not.\n * @returns {Object} The result pointer contains start and/or end point coordinates.\n */\n\nfunction getPointer(_ref2, endOnly) {\n  var pageX = _ref2.pageX,\n      pageY = _ref2.pageY;\n  var end = {\n    endX: pageX,\n    endY: pageY\n  };\n  return endOnly ? end : _objectSpread2({\n    startX: pageX,\n    startY: pageY\n  }, end);\n}\n/**\n * Get the center point coordinate of a group of pointers.\n * @param {Object} pointers - The target pointers.\n * @returns {Object} The center point coordinate.\n */\n\nfunction getPointersCenter(pointers) {\n  var pageX = 0;\n  var pageY = 0;\n  var count = 0;\n  forEach(pointers, function (_ref3) {\n    var startX = _ref3.startX,\n        startY = _ref3.startY;\n    pageX += startX;\n    pageY += startY;\n    count += 1;\n  });\n  pageX /= count;\n  pageY /= count;\n  return {\n    pageX: pageX,\n    pageY: pageY\n  };\n}\n/**\n * Get the max sizes in a rectangle under the given aspect ratio.\n * @param {Object} data - The original sizes.\n * @param {string} [type='contain'] - The adjust type.\n * @returns {Object} The result sizes.\n */\n\nfunction getAdjustedSizes(_ref4) // or 'cover'\n{\n  var aspectRatio = _ref4.aspectRatio,\n      height = _ref4.height,\n      width = _ref4.width;\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'contain';\n  var isValidWidth = isPositiveNumber(width);\n  var isValidHeight = isPositiveNumber(height);\n\n  if (isValidWidth && isValidHeight) {\n    var adjustedWidth = height * aspectRatio;\n\n    if (type === 'contain' && adjustedWidth > width || type === 'cover' && adjustedWidth < width) {\n      height = width / aspectRatio;\n    } else {\n      width = height * aspectRatio;\n    }\n  } else if (isValidWidth) {\n    height = width / aspectRatio;\n  } else if (isValidHeight) {\n    width = height * aspectRatio;\n  }\n\n  return {\n    width: width,\n    height: height\n  };\n}\n/**\n * Get the new sizes of a rectangle after rotated.\n * @param {Object} data - The original sizes.\n * @returns {Object} The result sizes.\n */\n\nfunction getRotatedSizes(_ref5) {\n  var width = _ref5.width,\n      height = _ref5.height,\n      degree = _ref5.degree;\n  degree = Math.abs(degree) % 180;\n\n  if (degree === 90) {\n    return {\n      width: height,\n      height: width\n    };\n  }\n\n  var arc = degree % 90 * Math.PI / 180;\n  var sinArc = Math.sin(arc);\n  var cosArc = Math.cos(arc);\n  var newWidth = width * cosArc + height * sinArc;\n  var newHeight = width * sinArc + height * cosArc;\n  return degree > 90 ? {\n    width: newHeight,\n    height: newWidth\n  } : {\n    width: newWidth,\n    height: newHeight\n  };\n}\n/**\n * Get a canvas which drew the given image.\n * @param {HTMLImageElement} image - The image for drawing.\n * @param {Object} imageData - The image data.\n * @param {Object} canvasData - The canvas data.\n * @param {Object} options - The options.\n * @returns {HTMLCanvasElement} The result canvas.\n */\n\nfunction getSourceCanvas(image, _ref6, _ref7, _ref8) {\n  var imageAspectRatio = _ref6.aspectRatio,\n      imageNaturalWidth = _ref6.naturalWidth,\n      imageNaturalHeight = _ref6.naturalHeight,\n      _ref6$rotate = _ref6.rotate,\n      rotate = _ref6$rotate === void 0 ? 0 : _ref6$rotate,\n      _ref6$scaleX = _ref6.scaleX,\n      scaleX = _ref6$scaleX === void 0 ? 1 : _ref6$scaleX,\n      _ref6$scaleY = _ref6.scaleY,\n      scaleY = _ref6$scaleY === void 0 ? 1 : _ref6$scaleY;\n  var aspectRatio = _ref7.aspectRatio,\n      naturalWidth = _ref7.naturalWidth,\n      naturalHeight = _ref7.naturalHeight;\n  var _ref8$fillColor = _ref8.fillColor,\n      fillColor = _ref8$fillColor === void 0 ? 'transparent' : _ref8$fillColor,\n      _ref8$imageSmoothingE = _ref8.imageSmoothingEnabled,\n      imageSmoothingEnabled = _ref8$imageSmoothingE === void 0 ? true : _ref8$imageSmoothingE,\n      _ref8$imageSmoothingQ = _ref8.imageSmoothingQuality,\n      imageSmoothingQuality = _ref8$imageSmoothingQ === void 0 ? 'low' : _ref8$imageSmoothingQ,\n      _ref8$maxWidth = _ref8.maxWidth,\n      maxWidth = _ref8$maxWidth === void 0 ? Infinity : _ref8$maxWidth,\n      _ref8$maxHeight = _ref8.maxHeight,\n      maxHeight = _ref8$maxHeight === void 0 ? Infinity : _ref8$maxHeight,\n      _ref8$minWidth = _ref8.minWidth,\n      minWidth = _ref8$minWidth === void 0 ? 0 : _ref8$minWidth,\n      _ref8$minHeight = _ref8.minHeight,\n      minHeight = _ref8$minHeight === void 0 ? 0 : _ref8$minHeight;\n  var canvas = document.createElement('canvas');\n  var context = canvas.getContext('2d');\n  var maxSizes = getAdjustedSizes({\n    aspectRatio: aspectRatio,\n    width: maxWidth,\n    height: maxHeight\n  });\n  var minSizes = getAdjustedSizes({\n    aspectRatio: aspectRatio,\n    width: minWidth,\n    height: minHeight\n  }, 'cover');\n  var width = Math.min(maxSizes.width, Math.max(minSizes.width, naturalWidth));\n  var height = Math.min(maxSizes.height, Math.max(minSizes.height, naturalHeight)); // Note: should always use image's natural sizes for drawing as\n  // imageData.naturalWidth === canvasData.naturalHeight when rotate % 180 === 90\n\n  var destMaxSizes = getAdjustedSizes({\n    aspectRatio: imageAspectRatio,\n    width: maxWidth,\n    height: maxHeight\n  });\n  var destMinSizes = getAdjustedSizes({\n    aspectRatio: imageAspectRatio,\n    width: minWidth,\n    height: minHeight\n  }, 'cover');\n  var destWidth = Math.min(destMaxSizes.width, Math.max(destMinSizes.width, imageNaturalWidth));\n  var destHeight = Math.min(destMaxSizes.height, Math.max(destMinSizes.height, imageNaturalHeight));\n  var params = [-destWidth / 2, -destHeight / 2, destWidth, destHeight];\n  canvas.width = normalizeDecimalNumber(width);\n  canvas.height = normalizeDecimalNumber(height);\n  context.fillStyle = fillColor;\n  context.fillRect(0, 0, width, height);\n  context.save();\n  context.translate(width / 2, height / 2);\n  context.rotate(rotate * Math.PI / 180);\n  context.scale(scaleX, scaleY);\n  context.imageSmoothingEnabled = imageSmoothingEnabled;\n  context.imageSmoothingQuality = imageSmoothingQuality;\n  context.drawImage.apply(context, [image].concat(_toConsumableArray(params.map(function (param) {\n    return Math.floor(normalizeDecimalNumber(param));\n  }))));\n  context.restore();\n  return canvas;\n}\nvar fromCharCode = String.fromCharCode;\n/**\n * Get string from char code in data view.\n * @param {DataView} dataView - The data view for read.\n * @param {number} start - The start index.\n * @param {number} length - The read length.\n * @returns {string} The read result.\n */\n\nfunction getStringFromCharCode(dataView, start, length) {\n  var str = '';\n  length += start;\n\n  for (var i = start; i < length; i += 1) {\n    str += fromCharCode(dataView.getUint8(i));\n  }\n\n  return str;\n}\nvar REGEXP_DATA_URL_HEAD = /^data:.*,/;\n/**\n * Transform Data URL to array buffer.\n * @param {string} dataURL - The Data URL to transform.\n * @returns {ArrayBuffer} The result array buffer.\n */\n\nfunction dataURLToArrayBuffer(dataURL) {\n  var base64 = dataURL.replace(REGEXP_DATA_URL_HEAD, '');\n  var binary = atob(base64);\n  var arrayBuffer = new ArrayBuffer(binary.length);\n  var uint8 = new Uint8Array(arrayBuffer);\n  forEach(uint8, function (value, i) {\n    uint8[i] = binary.charCodeAt(i);\n  });\n  return arrayBuffer;\n}\n/**\n * Transform array buffer to Data URL.\n * @param {ArrayBuffer} arrayBuffer - The array buffer to transform.\n * @param {string} mimeType - The mime type of the Data URL.\n * @returns {string} The result Data URL.\n */\n\nfunction arrayBufferToDataURL(arrayBuffer, mimeType) {\n  var chunks = []; // Chunk Typed Array for better performance (#435)\n\n  var chunkSize = 8192;\n  var uint8 = new Uint8Array(arrayBuffer);\n\n  while (uint8.length > 0) {\n    // XXX: Babel's `toConsumableArray` helper will throw error in IE or Safari 9\n    // eslint-disable-next-line prefer-spread\n    chunks.push(fromCharCode.apply(null, toArray(uint8.subarray(0, chunkSize))));\n    uint8 = uint8.subarray(chunkSize);\n  }\n\n  return \"data:\".concat(mimeType, \";base64,\").concat(btoa(chunks.join('')));\n}\n/**\n * Get orientation value from given array buffer.\n * @param {ArrayBuffer} arrayBuffer - The array buffer to read.\n * @returns {number} The read orientation value.\n */\n\nfunction resetAndGetOrientation(arrayBuffer) {\n  var dataView = new DataView(arrayBuffer);\n  var orientation; // Ignores range error when the image does not have correct Exif information\n\n  try {\n    var littleEndian;\n    var app1Start;\n    var ifdStart; // Only handle JPEG image (start by 0xFFD8)\n\n    if (dataView.getUint8(0) === 0xFF && dataView.getUint8(1) === 0xD8) {\n      var length = dataView.byteLength;\n      var offset = 2;\n\n      while (offset + 1 < length) {\n        if (dataView.getUint8(offset) === 0xFF && dataView.getUint8(offset + 1) === 0xE1) {\n          app1Start = offset;\n          break;\n        }\n\n        offset += 1;\n      }\n    }\n\n    if (app1Start) {\n      var exifIDCode = app1Start + 4;\n      var tiffOffset = app1Start + 10;\n\n      if (getStringFromCharCode(dataView, exifIDCode, 4) === 'Exif') {\n        var endianness = dataView.getUint16(tiffOffset);\n        littleEndian = endianness === 0x4949;\n\n        if (littleEndian || endianness === 0x4D4D\n        /* bigEndian */\n        ) {\n            if (dataView.getUint16(tiffOffset + 2, littleEndian) === 0x002A) {\n              var firstIFDOffset = dataView.getUint32(tiffOffset + 4, littleEndian);\n\n              if (firstIFDOffset >= 0x00000008) {\n                ifdStart = tiffOffset + firstIFDOffset;\n              }\n            }\n          }\n      }\n    }\n\n    if (ifdStart) {\n      var _length = dataView.getUint16(ifdStart, littleEndian);\n\n      var _offset;\n\n      var i;\n\n      for (i = 0; i < _length; i += 1) {\n        _offset = ifdStart + i * 12 + 2;\n\n        if (dataView.getUint16(_offset, littleEndian) === 0x0112\n        /* Orientation */\n        ) {\n            // 8 is the offset of the current tag's value\n            _offset += 8; // Get the original orientation value\n\n            orientation = dataView.getUint16(_offset, littleEndian); // Override the orientation with its default value\n\n            dataView.setUint16(_offset, 1, littleEndian);\n            break;\n          }\n      }\n    }\n  } catch (error) {\n    orientation = 1;\n  }\n\n  return orientation;\n}\n/**\n * Parse Exif Orientation value.\n * @param {number} orientation - The orientation to parse.\n * @returns {Object} The parsed result.\n */\n\nfunction parseOrientation(orientation) {\n  var rotate = 0;\n  var scaleX = 1;\n  var scaleY = 1;\n\n  switch (orientation) {\n    // Flip horizontal\n    case 2:\n      scaleX = -1;\n      break;\n    // Rotate left 180��\n\n    case 3:\n      rotate = -180;\n      break;\n    // Flip vertical\n\n    case 4:\n      scaleY = -1;\n      break;\n    // Flip vertical and rotate right 90��\n\n    case 5:\n      rotate = 90;\n      scaleY = -1;\n      break;\n    // Rotate right 90��\n\n    case 6:\n      rotate = 90;\n      break;\n    // Flip horizontal and rotate right 90��\n\n    case 7:\n      rotate = 90;\n      scaleX = -1;\n      break;\n    // Rotate left 90��\n\n    case 8:\n      rotate = -90;\n      break;\n\n    default:\n  }\n\n  return {\n    rotate: rotate,\n    scaleX: scaleX,\n    scaleY: scaleY\n  };\n}\n\n    return {\n        isNaN: isNaN,\n        isNumber: isNumber,\n        isPositiveNumber: isPositiveNumber,\n        isUndefined: isUndefined,\n        isObject: isObject,\n        isPlainObject: isPlainObject,\n        isFunction: isFunction,\n        toArray: toArray,\n        forEach: forEach,\n        assign: assign,\n        normalizeDecimalNumber: normalizeDecimalNumber,\n        setStyle: setStyle,\n        hasClass: hasClass,\n        addClass: addClass,\n        removeClass: removeClass,\n        toggleClass: toggleClass,\n        toParamCase: toParamCase,\n        getData: getData,\n        setData: setData,\n        removeData: removeData,\n        removeListener: removeListener,\n        addListener: addListener,\n        dispatchEvent: dispatchEvent,\n        getOffset: getOffset,\n        isCrossOriginURL: isCrossOriginURL,\n        addTimestamp: addTimestamp,\n        getTransforms: getTransforms,\n        getMaxZoomRatio: getMaxZoomRatio,\n        getPointer: getPointer,\n        getPointersCenter: getPointersCenter,\n        getAdjustedSizes: getAdjustedSizes,\n        getRotatedSizes: getRotatedSizes,\n        getSourceCanvas: getSourceCanvas,\n        getStringFromCharCode: getStringFromCharCode,\n        dataURLToArrayBuffer: dataURLToArrayBuffer,\n        arrayBufferToDataURL: arrayBufferToDataURL,\n        resetAndGetOrientation: resetAndGetOrientation,\n        parseOrientation: parseOrientation\n    };\n});\ndefine('skylark-cropperjs/render',[\n    './constants',\n    './utilities'\n], function (constants, utilities) {\n    'use strict';\n    return {\n        render() {\n            this.initContainer();\n            this.initCanvas();\n            this.initCropBox();\n            this.renderCanvas();\n            if (this.cropped) {\n                this.renderCropBox();\n            }\n        },\n        initContainer() {\n            const {element, options, container, cropper} = this;\n            utilities.addClass(cropper, constants.CLASS_HIDDEN);\n            utilities.removeClass(element, constants.CLASS_HIDDEN);\n            const containerData = {\n                width: Math.max(container.offsetWidth, Number(options.minContainerWidth) || 200),\n                height: Math.max(container.offsetHeight, Number(options.minContainerHeight) || 100)\n            };\n            this.containerData = containerData;\n            utilities.setStyle(cropper, {\n                width: containerData.width,\n                height: containerData.height\n            });\n            utilities.addClass(element, constants.CLASS_HIDDEN);\n            utilities.removeClass(cropper, constants.CLASS_HIDDEN);\n        },\n        initCanvas() {\n            const {containerData, imageData} = this;\n            const {viewMode} = this.options;\n            const rotated = Math.abs(imageData.rotate) % 180 === 90;\n            const naturalWidth = rotated ? imageData.naturalHeight : imageData.naturalWidth;\n            const naturalHeight = rotated ? imageData.naturalWidth : imageData.naturalHeight;\n            const aspectRatio = naturalWidth / naturalHeight;\n            let canvasWidth = containerData.width;\n            let canvasHeight = containerData.height;\n            if (containerData.height * aspectRatio > containerData.width) {\n                if (viewMode === 3) {\n                    canvasWidth = containerData.height * aspectRatio;\n                } else {\n                    canvasHeight = containerData.width / aspectRatio;\n                }\n            } else if (viewMode === 3) {\n                canvasHeight = containerData.width / aspectRatio;\n            } else {\n                canvasWidth = containerData.height * aspectRatio;\n            }\n            const canvasData = {\n                aspectRatio,\n                naturalWidth,\n                naturalHeight,\n                width: canvasWidth,\n                height: canvasHeight\n            };\n            canvasData.left = (containerData.width - canvasWidth) / 2;\n            canvasData.top = (containerData.height - canvasHeight) / 2;\n            canvasData.oldLeft = canvasData.left;\n            canvasData.oldTop = canvasData.top;\n            this.canvasData = canvasData;\n            this.limited = viewMode === 1 || viewMode === 2;\n            this.limitCanvas(true, true);\n            this.initialImageData = utilities.assign({}, imageData);\n            this.initialCanvasData = utilities.assign({}, canvasData);\n        },\n        limitCanvas(sizeLimited, positionLimited) {\n            const {options, containerData, canvasData, cropBoxData} = this;\n            const {viewMode} = options;\n            const {aspectRatio} = canvasData;\n            const cropped = this.cropped && cropBoxData;\n            if (sizeLimited) {\n                let minCanvasWidth = Number(options.minCanvasWidth) || 0;\n                let minCanvasHeight = Number(options.minCanvasHeight) || 0;\n                if (viewMode > 1) {\n                    minCanvasWidth = Math.max(minCanvasWidth, containerData.width);\n                    minCanvasHeight = Math.max(minCanvasHeight, containerData.height);\n                    if (viewMode === 3) {\n                        if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n                            minCanvasWidth = minCanvasHeight * aspectRatio;\n                        } else {\n                            minCanvasHeight = minCanvasWidth / aspectRatio;\n                        }\n                    }\n                } else if (viewMode > 0) {\n                    if (minCanvasWidth) {\n                        minCanvasWidth = Math.max(minCanvasWidth, cropped ? cropBoxData.width : 0);\n                    } else if (minCanvasHeight) {\n                        minCanvasHeight = Math.max(minCanvasHeight, cropped ? cropBoxData.height : 0);\n                    } else if (cropped) {\n                        minCanvasWidth = cropBoxData.width;\n                        minCanvasHeight = cropBoxData.height;\n                        if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n                            minCanvasWidth = minCanvasHeight * aspectRatio;\n                        } else {\n                            minCanvasHeight = minCanvasWidth / aspectRatio;\n                        }\n                    }\n                }\n                ({\n                    width: minCanvasWidth,\n                    height: minCanvasHeight\n                } = utilities.getAdjustedSizes({\n                    aspectRatio,\n                    width: minCanvasWidth,\n                    height: minCanvasHeight\n                }));\n                canvasData.minWidth = minCanvasWidth;\n                canvasData.minHeight = minCanvasHeight;\n                canvasData.maxWidth = Infinity;\n                canvasData.maxHeight = Infinity;\n            }\n            if (positionLimited) {\n                if (viewMode > (cropped ? 0 : 1)) {\n                    const newCanvasLeft = containerData.width - canvasData.width;\n                    const newCanvasTop = containerData.height - canvasData.height;\n                    canvasData.minLeft = Math.min(0, newCanvasLeft);\n                    canvasData.minTop = Math.min(0, newCanvasTop);\n                    canvasData.maxLeft = Math.max(0, newCanvasLeft);\n                    canvasData.maxTop = Math.max(0, newCanvasTop);\n                    if (cropped && this.limited) {\n                        canvasData.minLeft = Math.min(cropBoxData.left, cropBoxData.left + (cropBoxData.width - canvasData.width));\n                        canvasData.minTop = Math.min(cropBoxData.top, cropBoxData.top + (cropBoxData.height - canvasData.height));\n                        canvasData.maxLeft = cropBoxData.left;\n                        canvasData.maxTop = cropBoxData.top;\n                        if (viewMode === 2) {\n                            if (canvasData.width >= containerData.width) {\n                                canvasData.minLeft = Math.min(0, newCanvasLeft);\n                                canvasData.maxLeft = Math.max(0, newCanvasLeft);\n                            }\n                            if (canvasData.height >= containerData.height) {\n                                canvasData.minTop = Math.min(0, newCanvasTop);\n                                canvasData.maxTop = Math.max(0, newCanvasTop);\n                            }\n                        }\n                    }\n                } else {\n                    canvasData.minLeft = -canvasData.width;\n                    canvasData.minTop = -canvasData.height;\n                    canvasData.maxLeft = containerData.width;\n                    canvasData.maxTop = containerData.height;\n                }\n            }\n        },\n        renderCanvas(changed, transformed) {\n            const {canvasData, imageData} = this;\n            if (transformed) {\n                const {\n                    width: naturalWidth,\n                    height: naturalHeight\n                } = utilities.getRotatedSizes({\n                    width: imageData.naturalWidth * Math.abs(imageData.scaleX || 1),\n                    height: imageData.naturalHeight * Math.abs(imageData.scaleY || 1),\n                    degree: imageData.rotate || 0\n                });\n                const width = canvasData.width * (naturalWidth / canvasData.naturalWidth);\n                const height = canvasData.height * (naturalHeight / canvasData.naturalHeight);\n                canvasData.left -= (width - canvasData.width) / 2;\n                canvasData.top -= (height - canvasData.height) / 2;\n                canvasData.width = width;\n                canvasData.height = height;\n                canvasData.aspectRatio = naturalWidth / naturalHeight;\n                canvasData.naturalWidth = naturalWidth;\n                canvasData.naturalHeight = naturalHeight;\n                this.limitCanvas(true, false);\n            }\n            if (canvasData.width > canvasData.maxWidth || canvasData.width < canvasData.minWidth) {\n                canvasData.left = canvasData.oldLeft;\n            }\n            if (canvasData.height > canvasData.maxHeight || canvasData.height < canvasData.minHeight) {\n                canvasData.top = canvasData.oldTop;\n            }\n            canvasData.width = Math.min(Math.max(canvasData.width, canvasData.minWidth), canvasData.maxWidth);\n            canvasData.height = Math.min(Math.max(canvasData.height, canvasData.minHeight), canvasData.maxHeight);\n            this.limitCanvas(false, true);\n            canvasData.left = Math.min(Math.max(canvasData.left, canvasData.minLeft), canvasData.maxLeft);\n            canvasData.top = Math.min(Math.max(canvasData.top, canvasData.minTop), canvasData.maxTop);\n            canvasData.oldLeft = canvasData.left;\n            canvasData.oldTop = canvasData.top;\n            utilities.setStyle(this.canvas, utilities.assign({\n                width: canvasData.width,\n                height: canvasData.height\n            }, utilities.getTransforms({\n                translateX: canvasData.left,\n                translateY: canvasData.top\n            })));\n            this.renderImage(changed);\n            if (this.cropped && this.limited) {\n                this.limitCropBox(true, true);\n            }\n        },\n        renderImage(changed) {\n            const {canvasData, imageData} = this;\n            const width = imageData.naturalWidth * (canvasData.width / canvasData.naturalWidth);\n            const height = imageData.naturalHeight * (canvasData.height / canvasData.naturalHeight);\n            utilities.assign(imageData, {\n                width,\n                height,\n                left: (canvasData.width - width) / 2,\n                top: (canvasData.height - height) / 2\n            });\n            utilities.setStyle(this.image, utilities.assign({\n                width: imageData.width,\n                height: imageData.height\n            }, utilities.getTransforms(utilities.assign({\n                translateX: imageData.left,\n                translateY: imageData.top\n            }, imageData))));\n            if (changed) {\n                this.output();\n            }\n        },\n        initCropBox() {\n            const {options, canvasData} = this;\n            const aspectRatio = options.aspectRatio || options.initialAspectRatio;\n            const autoCropArea = Number(options.autoCropArea) || 0.8;\n            const cropBoxData = {\n                width: canvasData.width,\n                height: canvasData.height\n            };\n            if (aspectRatio) {\n                if (canvasData.height * aspectRatio > canvasData.width) {\n                    cropBoxData.height = cropBoxData.width / aspectRatio;\n                } else {\n                    cropBoxData.width = cropBoxData.height * aspectRatio;\n                }\n            }\n            this.cropBoxData = cropBoxData;\n            this.limitCropBox(true, true);\n            cropBoxData.width = Math.min(Math.max(cropBoxData.width, cropBoxData.minWidth), cropBoxData.maxWidth);\n            cropBoxData.height = Math.min(Math.max(cropBoxData.height, cropBoxData.minHeight), cropBoxData.maxHeight);\n            cropBoxData.width = Math.max(cropBoxData.minWidth, cropBoxData.width * autoCropArea);\n            cropBoxData.height = Math.max(cropBoxData.minHeight, cropBoxData.height * autoCropArea);\n            cropBoxData.left = canvasData.left + (canvasData.width - cropBoxData.width) / 2;\n            cropBoxData.top = canvasData.top + (canvasData.height - cropBoxData.height) / 2;\n            cropBoxData.oldLeft = cropBoxData.left;\n            cropBoxData.oldTop = cropBoxData.top;\n            this.initialCropBoxData = utilities.assign({}, cropBoxData);\n        },\n        limitCropBox(sizeLimited, positionLimited) {\n            const {options, containerData, canvasData, cropBoxData, limited} = this;\n            const {aspectRatio} = options;\n            if (sizeLimited) {\n                let minCropBoxWidth = Number(options.minCropBoxWidth) || 0;\n                let minCropBoxHeight = Number(options.minCropBoxHeight) || 0;\n                let maxCropBoxWidth = limited ? Math.min(containerData.width, canvasData.width, canvasData.width + canvasData.left, containerData.width - canvasData.left) : containerData.width;\n                let maxCropBoxHeight = limited ? Math.min(containerData.height, canvasData.height, canvasData.height + canvasData.top, containerData.height - canvasData.top) : containerData.height;\n                minCropBoxWidth = Math.min(minCropBoxWidth, containerData.width);\n                minCropBoxHeight = Math.min(minCropBoxHeight, containerData.height);\n                if (aspectRatio) {\n                    if (minCropBoxWidth && minCropBoxHeight) {\n                        if (minCropBoxHeight * aspectRatio > minCropBoxWidth) {\n                            minCropBoxHeight = minCropBoxWidth / aspectRatio;\n                        } else {\n                            minCropBoxWidth = minCropBoxHeight * aspectRatio;\n                        }\n                    } else if (minCropBoxWidth) {\n                        minCropBoxHeight = minCropBoxWidth / aspectRatio;\n                    } else if (minCropBoxHeight) {\n                        minCropBoxWidth = minCropBoxHeight * aspectRatio;\n                    }\n                    if (maxCropBoxHeight * aspectRatio > maxCropBoxWidth) {\n                        maxCropBoxHeight = maxCropBoxWidth / aspectRatio;\n                    } else {\n                        maxCropBoxWidth = maxCropBoxHeight * aspectRatio;\n                    }\n                }\n                cropBoxData.minWidth = Math.min(minCropBoxWidth, maxCropBoxWidth);\n                cropBoxData.minHeight = Math.min(minCropBoxHeight, maxCropBoxHeight);\n                cropBoxData.maxWidth = maxCropBoxWidth;\n                cropBoxData.maxHeight = maxCropBoxHeight;\n            }\n            if (positionLimited) {\n                if (limited) {\n                    cropBoxData.minLeft = Math.max(0, canvasData.left);\n                    cropBoxData.minTop = Math.max(0, canvasData.top);\n                    cropBoxData.maxLeft = Math.min(containerData.width, canvasData.left + canvasData.width) - cropBoxData.width;\n                    cropBoxData.maxTop = Math.min(containerData.height, canvasData.top + canvasData.height) - cropBoxData.height;\n                } else {\n                    cropBoxData.minLeft = 0;\n                    cropBoxData.minTop = 0;\n                    cropBoxData.maxLeft = containerData.width - cropBoxData.width;\n                    cropBoxData.maxTop = containerData.height - cropBoxData.height;\n                }\n            }\n        },\n        renderCropBox() {\n            const {options, containerData, cropBoxData} = this;\n            if (cropBoxData.width > cropBoxData.maxWidth || cropBoxData.width < cropBoxData.minWidth) {\n                cropBoxData.left = cropBoxData.oldLeft;\n            }\n            if (cropBoxData.height > cropBoxData.maxHeight || cropBoxData.height < cropBoxData.minHeight) {\n                cropBoxData.top = cropBoxData.oldTop;\n            }\n            cropBoxData.width = Math.min(Math.max(cropBoxData.width, cropBoxData.minWidth), cropBoxData.maxWidth);\n            cropBoxData.height = Math.min(Math.max(cropBoxData.height, cropBoxData.minHeight), cropBoxData.maxHeight);\n            this.limitCropBox(false, true);\n            cropBoxData.left = Math.min(Math.max(cropBoxData.left, cropBoxData.minLeft), cropBoxData.maxLeft);\n            cropBoxData.top = Math.min(Math.max(cropBoxData.top, cropBoxData.minTop), cropBoxData.maxTop);\n            cropBoxData.oldLeft = cropBoxData.left;\n            cropBoxData.oldTop = cropBoxData.top;\n            if (options.movable && options.cropBoxMovable) {\n                utilities.setData(this.face, constants.DATA_ACTION, cropBoxData.width >= containerData.width && cropBoxData.height >= containerData.height ? constants.ACTION_MOVE : constants.ACTION_ALL);\n            }\n            utilities.setStyle(this.cropBox, utilities.assign({\n                width: cropBoxData.width,\n                height: cropBoxData.height\n            }, utilities.getTransforms({\n                translateX: cropBoxData.left,\n                translateY: cropBoxData.top\n            })));\n            if (this.cropped && this.limited) {\n                this.limitCanvas(true, true);\n            }\n            if (!this.disabled) {\n                this.output();\n            }\n        },\n        output() {\n            this.preview();\n            utilities.dispatchEvent(this.element, constants.EVENT_CROP, this.getData());\n        }\n    };\n});\ndefine('skylark-cropperjs/preview',[\n    './constants',\n    './utilities'\n], function (constants, utilities) {\n    'use strict';\n    return {\n        initPreview() {\n            const {element, crossOrigin} = this;\n            const {preview} = this.options;\n            const url = crossOrigin ? this.crossOriginUrl : this.url;\n            const alt = element.alt || 'The image to preview';\n            const image = document.createElement('img');\n            if (crossOrigin) {\n                image.crossOrigin = crossOrigin;\n            }\n            image.src = url;\n            image.alt = alt;\n            this.viewBox.appendChild(image);\n            this.viewBoxImage = image;\n            if (!preview) {\n                return;\n            }\n            let previews = preview;\n            if (typeof preview === 'string') {\n                previews = element.ownerDocument.querySelectorAll(preview);\n            } else if (preview.querySelector) {\n                previews = [preview];\n            }\n            this.previews = previews;\n            utilities.forEach(previews, el => {\n                const img = document.createElement('img');\n                utilities.setData(el, constants.DATA_PREVIEW, {\n                    width: el.offsetWidth,\n                    height: el.offsetHeight,\n                    html: el.innerHTML\n                });\n                if (crossOrigin) {\n                    img.crossOrigin = crossOrigin;\n                }\n                img.src = url;\n                img.alt = alt;\n                img.style.cssText = 'display:block;' + 'width:100%;' + 'height:auto;' + 'min-width:0!important;' + 'min-height:0!important;' + 'max-width:none!important;' + 'max-height:none!important;' + 'image-orientation:0deg!important;\"';\n                el.innerHTML = '';\n                el.appendChild(img);\n            });\n        },\n        resetPreview() {\n            utilities.forEach(this.previews, element => {\n                const data = utilities.getData(element, constants.DATA_PREVIEW);\n                utilities.setStyle(element, {\n                    width: data.width,\n                    height: data.height\n                });\n                element.innerHTML = data.html;\n                utilities.removeData(element, constants.DATA_PREVIEW);\n            });\n        },\n        preview() {\n            const {imageData, canvasData, cropBoxData} = this;\n            const {\n                width: cropBoxWidth,\n                height: cropBoxHeight\n            } = cropBoxData;\n            const {width, height} = imageData;\n            const left = cropBoxData.left - canvasData.left - imageData.left;\n            const top = cropBoxData.top - canvasData.top - imageData.top;\n            if (!this.cropped || this.disabled) {\n                return;\n            }\n            utilities.setStyle(this.viewBoxImage, utilities.assign({\n                width,\n                height\n            }, utilities.getTransforms(utilities.assign({\n                translateX: -left,\n                translateY: -top\n            }, imageData))));\n            utilities.forEach(this.previews, element => {\n                const data = utilities.getData(element, constants.DATA_PREVIEW);\n                const originalWidth = data.width;\n                const originalHeight = data.height;\n                let newWidth = originalWidth;\n                let newHeight = originalHeight;\n                let ratio = 1;\n                if (cropBoxWidth) {\n                    ratio = originalWidth / cropBoxWidth;\n                    newHeight = cropBoxHeight * ratio;\n                }\n                if (cropBoxHeight && newHeight > originalHeight) {\n                    ratio = originalHeight / cropBoxHeight;\n                    newWidth = cropBoxWidth * ratio;\n                    newHeight = originalHeight;\n                }\n                utilities.setStyle(element, {\n                    width: newWidth,\n                    height: newHeight\n                });\n                utilities.setStyle(element.getElementsByTagName('img')[0], utilities.assign({\n                    width: width * ratio,\n                    height: height * ratio\n                }, utilities.getTransforms(utilities.assign({\n                    translateX: -left * ratio,\n                    translateY: -top * ratio\n                }, imageData))));\n            });\n        }\n    };\n});\ndefine('skylark-cropperjs/events',[\n    './constants',\n    './utilities'\n], function (constants, utilities) {\n    'use strict';\n    return {\n        bind() {\n            const {element, options, cropper} = this;\n            if (utilities.isFunction(options.cropstart)) {\n                utilities.addListener(element, constants.EVENT_CROP_START, options.cropstart);\n            }\n            if (utilities.isFunction(options.cropmove)) {\n                utilities.addListener(element, constants.EVENT_CROP_MOVE, options.cropmove);\n            }\n            if (utilities.isFunction(options.cropend)) {\n                utilities.addListener(element, constants.EVENT_CROP_END, options.cropend);\n            }\n            if (utilities.isFunction(options.crop)) {\n                utilities.addListener(element, constants.EVENT_CROP, options.crop);\n            }\n            if (utilities.isFunction(options.zoom)) {\n                utilities.addListener(element, constants.EVENT_ZOOM, options.zoom);\n            }\n            utilities.addListener(cropper, constants.EVENT_POINTER_DOWN, this.onCropStart = this.cropStart.bind(this));\n            if (options.zoomable && options.zoomOnWheel) {\n                utilities.addListener(cropper, constants.EVENT_WHEEL, this.onWheel = this.wheel.bind(this), {\n                    passive: false,\n                    capture: true\n                });\n            }\n            if (options.toggleDragModeOnDblclick) {\n                utilities.addListener(cropper, constants.EVENT_DBLCLICK, this.onDblclick = this.dblclick.bind(this));\n            }\n            utilities.addListener(element.ownerDocument, constants.EVENT_POINTER_MOVE, this.onCropMove = this.cropMove.bind(this));\n            utilities.addListener(element.ownerDocument, constants.EVENT_POINTER_UP, this.onCropEnd = this.cropEnd.bind(this));\n            if (options.responsive) {\n                utilities.addListener(window, constants.EVENT_RESIZE, this.onResize = this.resize.bind(this));\n            }\n        },\n        unbind() {\n            const {element, options, cropper} = this;\n            if (utilities.isFunction(options.cropstart)) {\n                utilities.removeListener(element, constants.EVENT_CROP_START, options.cropstart);\n            }\n            if (utilities.isFunction(options.cropmove)) {\n                utilities.removeListener(element, constants.EVENT_CROP_MOVE, options.cropmove);\n            }\n            if (utilities.isFunction(options.cropend)) {\n                utilities.removeListener(element, constants.EVENT_CROP_END, options.cropend);\n            }\n            if (utilities.isFunction(options.crop)) {\n                utilities.removeListener(element, constants.EVENT_CROP, options.crop);\n            }\n            if (utilities.isFunction(options.zoom)) {\n                utilities.removeListener(element, constants.EVENT_ZOOM, options.zoom);\n            }\n            utilities.removeListener(cropper, constants.EVENT_POINTER_DOWN, this.onCropStart);\n            if (options.zoomable && options.zoomOnWheel) {\n                utilities.removeListener(cropper, constants.EVENT_WHEEL, this.onWheel, {\n                    passive: false,\n                    capture: true\n                });\n            }\n            if (options.toggleDragModeOnDblclick) {\n                utilities.removeListener(cropper, constants.EVENT_DBLCLICK, this.onDblclick);\n            }\n            utilities.removeListener(element.ownerDocument, constants.EVENT_POINTER_MOVE, this.onCropMove);\n            utilities.removeListener(element.ownerDocument, constants.EVENT_POINTER_UP, this.onCropEnd);\n            if (options.responsive) {\n                utilities.removeListener(window, constants.EVENT_RESIZE, this.onResize);\n            }\n        }\n    };\n});\ndefine('skylark-cropperjs/handlers',[\n    './constants',\n    './utilities'\n], function (constants, utilities) {\n    'use strict';\n    return {\n        resize() {\n            const {options, container, containerData} = this;\n            const minContainerWidth = Number(options.minContainerWidth) || constants.MIN_CONTAINER_WIDTH;\n            const minContainerHeight = Number(options.minContainerHeight) || constants.MIN_CONTAINER_HEIGHT;\n            if (this.disabled || containerData.width <= minContainerWidth || containerData.height <= minContainerHeight) {\n                return;\n            }\n            const ratio = container.offsetWidth / containerData.width;\n            if (ratio !== 1 || container.offsetHeight !== containerData.height) {\n                let canvasData;\n                let cropBoxData;\n                if (options.restore) {\n                    canvasData = this.getCanvasData();\n                    cropBoxData = this.getCropBoxData();\n                }\n                this.render();\n                if (options.restore) {\n                    this.setCanvasData(utilities.forEach(canvasData, (n, i) => {\n                        canvasData[i] = n * ratio;\n                    }));\n                    this.setCropBoxData(utilities.forEach(cropBoxData, (n, i) => {\n                        cropBoxData[i] = n * ratio;\n                    }));\n                }\n            }\n        },\n        dblclick() {\n            if (this.disabled || this.options.dragMode === constants.DRAG_MODE_NONE) {\n                return;\n            }\n            this.setDragMode(utilities.hasClass(this.dragBox, constants.CLASS_CROP) ? constants.DRAG_MODE_MOVE : constants.DRAG_MODE_CROP);\n        },\n        wheel(event) {\n            const ratio = Number(this.options.wheelZoomRatio) || 0.1;\n            let delta = 1;\n            if (this.disabled) {\n                return;\n            }\n            event.preventDefault();\n            if (this.wheeling) {\n                return;\n            }\n            this.wheeling = true;\n            setTimeout(() => {\n                this.wheeling = false;\n            }, 50);\n            if (event.deltaY) {\n                delta = event.deltaY > 0 ? 1 : -1;\n            } else if (event.wheelDelta) {\n                delta = -event.wheelDelta / 120;\n            } else if (event.detail) {\n                delta = event.detail > 0 ? 1 : -1;\n            }\n            this.zoom(-delta * ratio, event);\n        },\n        cropStart(event) {\n            const {buttons, button} = event;\n            if (this.disabled || (event.type === 'mousedown' || event.type === 'pointerdown' && event.pointerType === 'mouse') && (utilities.isNumber(buttons) && buttons !== 1 || utilities.isNumber(button) && button !== 0 || event.ctrlKey)) {\n                return;\n            }\n            const {options, pointers} = this;\n            let action;\n            if (event.changedTouches) {\n                utilities.forEach(event.changedTouches, touch => {\n                    pointers[touch.identifier] = utilities.getPointer(touch);\n                });\n            } else {\n                pointers[event.pointerId || 0] = utilities.getPointer(event);\n            }\n            if (Object.keys(pointers).length > 1 && options.zoomable && options.zoomOnTouch) {\n                action = constants.ACTION_ZOOM;\n            } else {\n                action = utilities.getData(event.target, constants.DATA_ACTION);\n            }\n            if (!constants.REGEXP_ACTIONS.test(action)) {\n                return;\n            }\n            if (utilities.dispatchEvent(this.element, constants.EVENT_CROP_START, {\n                    originalEvent: event,\n                    action\n                }) === false) {\n                return;\n            }\n            event.preventDefault();\n            this.action = action;\n            this.cropping = false;\n            if (action === constants.ACTION_CROP) {\n                this.cropping = true;\n                utilities.addClass(this.dragBox, constants.CLASS_MODAL);\n            }\n        },\n        cropMove(event) {\n            const {action} = this;\n            if (this.disabled || !action) {\n                return;\n            }\n            const {pointers} = this;\n            event.preventDefault();\n            if (utilities.dispatchEvent(this.element, constants.EVENT_CROP_MOVE, {\n                    originalEvent: event,\n                    action\n                }) === false) {\n                return;\n            }\n            if (event.changedTouches) {\n                utilities.forEach(event.changedTouches, touch => {\n                    utilities.assign(pointers[touch.identifier] || {}, utilities.getPointer(touch, true));\n                });\n            } else {\n                utilities.assign(pointers[event.pointerId || 0] || {}, utilities.getPointer(event, true));\n            }\n            this.change(event);\n        },\n        cropEnd(event) {\n            if (this.disabled) {\n                return;\n            }\n            const {action, pointers} = this;\n            if (event.changedTouches) {\n                utilities.forEach(event.changedTouches, touch => {\n                    delete pointers[touch.identifier];\n                });\n            } else {\n                delete pointers[event.pointerId || 0];\n            }\n            if (!action) {\n                return;\n            }\n            event.preventDefault();\n            if (!Object.keys(pointers).length) {\n                this.action = '';\n            }\n            if (this.cropping) {\n                this.cropping = false;\n                utilities.toggleClass(this.dragBox, constants.CLASS_MODAL, this.cropped && this.options.modal);\n            }\n            utilities.dispatchEvent(this.element, constants.EVENT_CROP_END, {\n                originalEvent: event,\n                action\n            });\n        }\n    };\n});\ndefine('skylark-cropperjs/change',[\n    './constants',\n    './utilities'\n], function (constants, utilities) {\n    'use strict';\n    return {\n        change(event) {\n            const {options, canvasData, containerData, cropBoxData, pointers} = this;\n            let {action} = this;\n            let {aspectRatio} = options;\n            let {left, top, width, height} = cropBoxData;\n            const right = left + width;\n            const bottom = top + height;\n            let minLeft = 0;\n            let minTop = 0;\n            let maxWidth = containerData.width;\n            let maxHeight = containerData.height;\n            let renderable = true;\n            let offset;\n            if (!aspectRatio && event.shiftKey) {\n                aspectRatio = width && height ? width / height : 1;\n            }\n            if (this.limited) {\n                ({minLeft, minTop} = cropBoxData);\n                maxWidth = minLeft + Math.min(containerData.width, canvasData.width, canvasData.left + canvasData.width);\n                maxHeight = minTop + Math.min(containerData.height, canvasData.height, canvasData.top + canvasData.height);\n            }\n            const pointer = pointers[Object.keys(pointers)[0]];\n            const range = {\n                x: pointer.endX - pointer.startX,\n                y: pointer.endY - pointer.startY\n            };\n            const check = side => {\n                switch (side) {\n                case constants.ACTION_EAST:\n                    if (right + range.x > maxWidth) {\n                        range.x = maxWidth - right;\n                    }\n                    break;\n                case constants.ACTION_WEST:\n                    if (left + range.x < minLeft) {\n                        range.x = minLeft - left;\n                    }\n                    break;\n                case constants.ACTION_NORTH:\n                    if (top + range.y < minTop) {\n                        range.y = minTop - top;\n                    }\n                    break;\n                case constants.ACTION_SOUTH:\n                    if (bottom + range.y > maxHeight) {\n                        range.y = maxHeight - bottom;\n                    }\n                    break;\n                default:\n                }\n            };\n            switch (action) {\n            case constants.ACTION_ALL:\n                left += range.x;\n                top += range.y;\n                break;\n            case constants.ACTION_EAST:\n                if (range.x >= 0 && (right >= maxWidth || aspectRatio && (top <= minTop || bottom >= maxHeight))) {\n                    renderable = false;\n                    break;\n                }\n                check(constants.ACTION_EAST);\n                width += range.x;\n                if (width < 0) {\n                    action = constants.ACTION_WEST;\n                    width = -width;\n                    left -= width;\n                }\n                if (aspectRatio) {\n                    height = width / aspectRatio;\n                    top += (cropBoxData.height - height) / 2;\n                }\n                break;\n            case constants.ACTION_NORTH:\n                if (range.y <= 0 && (top <= minTop || aspectRatio && (left <= minLeft || right >= maxWidth))) {\n                    renderable = false;\n                    break;\n                }\n                check(constants.ACTION_NORTH);\n                height -= range.y;\n                top += range.y;\n                if (height < 0) {\n                    action = constants.ACTION_SOUTH;\n                    height = -height;\n                    top -= height;\n                }\n                if (aspectRatio) {\n                    width = height * aspectRatio;\n                    left += (cropBoxData.width - width) / 2;\n                }\n                break;\n            case constants.ACTION_WEST:\n                if (range.x <= 0 && (left <= minLeft || aspectRatio && (top <= minTop || bottom >= maxHeight))) {\n                    renderable = false;\n                    break;\n                }\n                check(constants.ACTION_WEST);\n                width -= range.x;\n                left += range.x;\n                if (width < 0) {\n                    action = constants.ACTION_EAST;\n                    width = -width;\n                    left -= width;\n                }\n                if (aspectRatio) {\n                    height = width / aspectRatio;\n                    top += (cropBoxData.height - height) / 2;\n                }\n                break;\n            case constants.ACTION_SOUTH:\n                if (range.y >= 0 && (bottom >= maxHeight || aspectRatio && (left <= minLeft || right >= maxWidth))) {\n                    renderable = false;\n                    break;\n                }\n                check(constants.ACTION_SOUTH);\n                height += range.y;\n                if (height < 0) {\n                    action = constants.ACTION_NORTH;\n                    height = -height;\n                    top -= height;\n                }\n                if (aspectRatio) {\n                    width = height * aspectRatio;\n                    left += (cropBoxData.width - width) / 2;\n                }\n                break;\n            case constants.ACTION_NORTH_EAST:\n                if (aspectRatio) {\n                    if (range.y <= 0 && (top <= minTop || right >= maxWidth)) {\n                        renderable = false;\n                        break;\n                    }\n                    check(constants.ACTION_NORTH);\n                    height -= range.y;\n                    top += range.y;\n                    width = height * aspectRatio;\n                } else {\n                    check(constants.ACTION_NORTH);\n                    check(constants.ACTION_EAST);\n                    if (range.x >= 0) {\n                        if (right < maxWidth) {\n                            width += range.x;\n                        } else if (range.y <= 0 && top <= minTop) {\n                            renderable = false;\n                        }\n                    } else {\n                        width += range.x;\n                    }\n                    if (range.y <= 0) {\n                        if (top > minTop) {\n                            height -= range.y;\n                            top += range.y;\n                        }\n                    } else {\n                        height -= range.y;\n                        top += range.y;\n                    }\n                }\n                if (width < 0 && height < 0) {\n                    action = constants.ACTION_SOUTH_WEST;\n                    height = -height;\n                    width = -width;\n                    top -= height;\n                    left -= width;\n                } else if (width < 0) {\n                    action = constants.ACTION_NORTH_WEST;\n                    width = -width;\n                    left -= width;\n                } else if (height < 0) {\n                    action = constants.ACTION_SOUTH_EAST;\n                    height = -height;\n                    top -= height;\n                }\n                break;\n            case constants.ACTION_NORTH_WEST:\n                if (aspectRatio) {\n                    if (range.y <= 0 && (top <= minTop || left <= minLeft)) {\n                        renderable = false;\n                        break;\n                    }\n                    check(constants.ACTION_NORTH);\n                    height -= range.y;\n                    top += range.y;\n                    width = height * aspectRatio;\n                    left += cropBoxData.width - width;\n                } else {\n                    check(constants.ACTION_NORTH);\n                    check(constants.ACTION_WEST);\n                    if (range.x <= 0) {\n                        if (left > minLeft) {\n                            width -= range.x;\n                            left += range.x;\n                        } else if (range.y <= 0 && top <= minTop) {\n                            renderable = false;\n                        }\n                    } else {\n                        width -= range.x;\n                        left += range.x;\n                    }\n                    if (range.y <= 0) {\n                        if (top > minTop) {\n                            height -= range.y;\n                            top += range.y;\n                        }\n                    } else {\n                        height -= range.y;\n                        top += range.y;\n                    }\n                }\n                if (width < 0 && height < 0) {\n                    action = constants.ACTION_SOUTH_EAST;\n                    height = -height;\n                    width = -width;\n                    top -= height;\n                    left -= width;\n                } else if (width < 0) {\n                    action = constants.ACTION_NORTH_EAST;\n                    width = -width;\n                    left -= width;\n                } else if (height < 0) {\n                    action = constants.ACTION_SOUTH_WEST;\n                    height = -height;\n                    top -= height;\n                }\n                break;\n            case constants.ACTION_SOUTH_WEST:\n                if (aspectRatio) {\n                    if (range.x <= 0 && (left <= minLeft || bottom >= maxHeight)) {\n                        renderable = false;\n                        break;\n                    }\n                    check(constants.ACTION_WEST);\n                    width -= range.x;\n                    left += range.x;\n                    height = width / aspectRatio;\n                } else {\n                    check(constants.ACTION_SOUTH);\n                    check(constants.ACTION_WEST);\n                    if (range.x <= 0) {\n                        if (left > minLeft) {\n                            width -= range.x;\n                            left += range.x;\n                        } else if (range.y >= 0 && bottom >= maxHeight) {\n                            renderable = false;\n                        }\n                    } else {\n                        width -= range.x;\n                        left += range.x;\n                    }\n                    if (range.y >= 0) {\n                        if (bottom < maxHeight) {\n                            height += range.y;\n                        }\n                    } else {\n                        height += range.y;\n                    }\n                }\n                if (width < 0 && height < 0) {\n                    action = constants.ACTION_NORTH_EAST;\n                    height = -height;\n                    width = -width;\n                    top -= height;\n                    left -= width;\n                } else if (width < 0) {\n                    action = constants.ACTION_SOUTH_EAST;\n                    width = -width;\n                    left -= width;\n                } else if (height < 0) {\n                    action = constants.ACTION_NORTH_WEST;\n                    height = -height;\n                    top -= height;\n                }\n                break;\n            case constants.ACTION_SOUTH_EAST:\n                if (aspectRatio) {\n                    if (range.x >= 0 && (right >= maxWidth || bottom >= maxHeight)) {\n                        renderable = false;\n                        break;\n                    }\n                    check(constants.ACTION_EAST);\n                    width += range.x;\n                    height = width / aspectRatio;\n                } else {\n                    check(constants.ACTION_SOUTH);\n                    check(constants.ACTION_EAST);\n                    if (range.x >= 0) {\n                        if (right < maxWidth) {\n                            width += range.x;\n                        } else if (range.y >= 0 && bottom >= maxHeight) {\n                            renderable = false;\n                        }\n                    } else {\n                        width += range.x;\n                    }\n                    if (range.y >= 0) {\n                        if (bottom < maxHeight) {\n                            height += range.y;\n                        }\n                    } else {\n                        height += range.y;\n                    }\n                }\n                if (width < 0 && height < 0) {\n                    action = constants.ACTION_NORTH_WEST;\n                    height = -height;\n                    width = -width;\n                    top -= height;\n                    left -= width;\n                } else if (width < 0) {\n                    action = constants.ACTION_SOUTH_WEST;\n                    width = -width;\n                    left -= width;\n                } else if (height < 0) {\n                    action = constants.ACTION_NORTH_EAST;\n                    height = -height;\n                    top -= height;\n                }\n                break;\n            case constants.ACTION_MOVE:\n                this.move(range.x, range.y);\n                renderable = false;\n                break;\n            case constants.ACTION_ZOOM:\n                this.zoom(utilities.getMaxZoomRatio(pointers), event);\n                renderable = false;\n                break;\n            case constants.ACTION_CROP:\n                if (!range.x || !range.y) {\n                    renderable = false;\n                    break;\n                }\n                offset = utilities.getOffset(this.cropper);\n                left = pointer.startX - offset.left;\n                top = pointer.startY - offset.top;\n                width = cropBoxData.minWidth;\n                height = cropBoxData.minHeight;\n                if (range.x > 0) {\n                    action = range.y > 0 ? constants.ACTION_SOUTH_EAST : constants.ACTION_NORTH_EAST;\n                } else if (range.x < 0) {\n                    left -= width;\n                    action = range.y > 0 ? constants.ACTION_SOUTH_WEST : constants.ACTION_NORTH_WEST;\n                }\n                if (range.y < 0) {\n                    top -= height;\n                }\n                if (!this.cropped) {\n                    utilities.removeClass(this.cropBox, constants.CLASS_HIDDEN);\n                    this.cropped = true;\n                    if (this.limited) {\n                        this.limitCropBox(true, true);\n                    }\n                }\n                break;\n            default:\n            }\n            if (renderable) {\n                cropBoxData.width = width;\n                cropBoxData.height = height;\n                cropBoxData.left = left;\n                cropBoxData.top = top;\n                this.action = action;\n                this.renderCropBox();\n            }\n            utilities.forEach(pointers, p => {\n                p.startX = p.endX;\n                p.startY = p.endY;\n            });\n        }\n    };\n});\ndefine('skylark-cropperjs/methods',[\n    './constants',\n    './utilities'\n], function (constants, utilities) {\n    'use strict';\n    return {\n        crop() {\n            if (this.ready && !this.cropped && !this.disabled) {\n                this.cropped = true;\n                this.limitCropBox(true, true);\n                if (this.options.modal) {\n                    utilities.addClass(this.dragBox, constants.CLASS_MODAL);\n                }\n                utilities.removeClass(this.cropBox, constants.CLASS_HIDDEN);\n                this.setCropBoxData(this.initialCropBoxData);\n            }\n            return this;\n        },\n        reset() {\n            if (this.ready && !this.disabled) {\n                this.imageData = utilities.assign({}, this.initialImageData);\n                this.canvasData = utilities.assign({}, this.initialCanvasData);\n                this.cropBoxData = utilities.assign({}, this.initialCropBoxData);\n                this.renderCanvas();\n                if (this.cropped) {\n                    this.renderCropBox();\n                }\n            }\n            return this;\n        },\n        clear() {\n            if (this.cropped && !this.disabled) {\n                utilities.assign(this.cropBoxData, {\n                    left: 0,\n                    top: 0,\n                    width: 0,\n                    height: 0\n                });\n                this.cropped = false;\n                this.renderCropBox();\n                this.limitCanvas(true, true);\n                this.renderCanvas();\n                utilities.removeClass(this.dragBox, constants.CLASS_MODAL);\n                utilities.addClass(this.cropBox, constants.CLASS_HIDDEN);\n            }\n            return this;\n        },\n        replace(url, hasSameSize = false) {\n            if (!this.disabled && url) {\n                if (this.isImg) {\n                    this.element.src = url;\n                }\n                if (hasSameSize) {\n                    this.url = url;\n                    this.image.src = url;\n                    if (this.ready) {\n                        this.viewBoxImage.src = url;\n                        utilities.forEach(this.previews, element => {\n                            element.getElementsByTagName('img')[0].src = url;\n                        });\n                    }\n                } else {\n                    if (this.isImg) {\n                        this.replaced = true;\n                    }\n                    this.options.data = null;\n                    this.uncreate();\n                    this.load(url);\n                }\n            }\n            return this;\n        },\n        enable() {\n            if (this.ready && this.disabled) {\n                this.disabled = false;\n                utilities.removeClass(this.cropper, constants.CLASS_DISABLED);\n            }\n            return this;\n        },\n        disable() {\n            if (this.ready && !this.disabled) {\n                this.disabled = true;\n                utilities.addClass(this.cropper, constants.CLASS_DISABLED);\n            }\n            return this;\n        },\n        destroy() {\n            const {element} = this;\n            if (!element[constants.NAMESPACE]) {\n                return this;\n            }\n            element[constants.NAMESPACE] = undefined;\n            if (this.isImg && this.replaced) {\n                element.src = this.originalUrl;\n            }\n            this.uncreate();\n            return this;\n        },\n        move(offsetX, offsetY = offsetX) {\n            const {left, top} = this.canvasData;\n            return this.moveTo(utilities.isUndefined(offsetX) ? offsetX : left + Number(offsetX), utilities.isUndefined(offsetY) ? offsetY : top + Number(offsetY));\n        },\n        moveTo(x, y = x) {\n            const {canvasData} = this;\n            let changed = false;\n            x = Number(x);\n            y = Number(y);\n            if (this.ready && !this.disabled && this.options.movable) {\n                if (utilities.isNumber(x)) {\n                    canvasData.left = x;\n                    changed = true;\n                }\n                if (utilities.isNumber(y)) {\n                    canvasData.top = y;\n                    changed = true;\n                }\n                if (changed) {\n                    this.renderCanvas(true);\n                }\n            }\n            return this;\n        },\n        zoom(ratio, _originalEvent) {\n            const {canvasData} = this;\n            ratio = Number(ratio);\n            if (ratio < 0) {\n                ratio = 1 / (1 - ratio);\n            } else {\n                ratio = 1 + ratio;\n            }\n            return this.zoomTo(canvasData.width * ratio / canvasData.naturalWidth, null, _originalEvent);\n        },\n        zoomTo(ratio, pivot, _originalEvent) {\n            const {options, canvasData} = this;\n            const {width, height, naturalWidth, naturalHeight} = canvasData;\n            ratio = Number(ratio);\n            if (ratio >= 0 && this.ready && !this.disabled && options.zoomable) {\n                const newWidth = naturalWidth * ratio;\n                const newHeight = naturalHeight * ratio;\n                if (utilities.dispatchEvent(this.element, constants.EVENT_ZOOM, {\n                        ratio,\n                        oldRatio: width / naturalWidth,\n                        originalEvent: _originalEvent\n                    }) === false) {\n                    return this;\n                }\n                if (_originalEvent) {\n                    const {pointers} = this;\n                    const offset = utilities.getOffset(this.cropper);\n                    const center = pointers && Object.keys(pointers).length ? utilities.getPointersCenter(pointers) : {\n                        pageX: _originalEvent.pageX,\n                        pageY: _originalEvent.pageY\n                    };\n                    canvasData.left -= (newWidth - width) * ((center.pageX - offset.left - canvasData.left) / width);\n                    canvasData.top -= (newHeight - height) * ((center.pageY - offset.top - canvasData.top) / height);\n                } else if (utilities.isPlainObject(pivot) && utilities.isNumber(pivot.x) && utilities.isNumber(pivot.y)) {\n                    canvasData.left -= (newWidth - width) * ((pivot.x - canvasData.left) / width);\n                    canvasData.top -= (newHeight - height) * ((pivot.y - canvasData.top) / height);\n                } else {\n                    canvasData.left -= (newWidth - width) / 2;\n                    canvasData.top -= (newHeight - height) / 2;\n                }\n                canvasData.width = newWidth;\n                canvasData.height = newHeight;\n                this.renderCanvas(true);\n            }\n            return this;\n        },\n        rotate(degree) {\n            return this.rotateTo((this.imageData.rotate || 0) + Number(degree));\n        },\n        rotateTo(degree) {\n            degree = Number(degree);\n            if (utilities.isNumber(degree) && this.ready && !this.disabled && this.options.rotatable) {\n                this.imageData.rotate = degree % 360;\n                this.renderCanvas(true, true);\n            }\n            return this;\n        },\n        scaleX(scaleX) {\n            const {scaleY} = this.imageData;\n            return this.scale(scaleX, utilities.isNumber(scaleY) ? scaleY : 1);\n        },\n        scaleY(scaleY) {\n            const {scaleX} = this.imageData;\n            return this.scale(utilities.isNumber(scaleX) ? scaleX : 1, scaleY);\n        },\n        scale(scaleX, scaleY = scaleX) {\n            const {imageData} = this;\n            let transformed = false;\n            scaleX = Number(scaleX);\n            scaleY = Number(scaleY);\n            if (this.ready && !this.disabled && this.options.scalable) {\n                if (utilities.isNumber(scaleX)) {\n                    imageData.scaleX = scaleX;\n                    transformed = true;\n                }\n                if (utilities.isNumber(scaleY)) {\n                    imageData.scaleY = scaleY;\n                    transformed = true;\n                }\n                if (transformed) {\n                    this.renderCanvas(true, true);\n                }\n            }\n            return this;\n        },\n        getData(rounded = false) {\n            const {options, imageData, canvasData, cropBoxData} = this;\n            let data;\n            if (this.ready && this.cropped) {\n                data = {\n                    x: cropBoxData.left - canvasData.left,\n                    y: cropBoxData.top - canvasData.top,\n                    width: cropBoxData.width,\n                    height: cropBoxData.height\n                };\n                const ratio = imageData.width / imageData.naturalWidth;\n                utilities.forEach(data, (n, i) => {\n                    data[i] = n / ratio;\n                });\n                if (rounded) {\n                    const bottom = Math.round(data.y + data.height);\n                    const right = Math.round(data.x + data.width);\n                    data.x = Math.round(data.x);\n                    data.y = Math.round(data.y);\n                    data.width = right - data.x;\n                    data.height = bottom - data.y;\n                }\n            } else {\n                data = {\n                    x: 0,\n                    y: 0,\n                    width: 0,\n                    height: 0\n                };\n            }\n            if (options.rotatable) {\n                data.rotate = imageData.rotate || 0;\n            }\n            if (options.scalable) {\n                data.scaleX = imageData.scaleX || 1;\n                data.scaleY = imageData.scaleY || 1;\n            }\n            return data;\n        },\n        setData(data) {\n            const {options, imageData, canvasData} = this;\n            const cropBoxData = {};\n            if (this.ready && !this.disabled && utilities.isPlainObject(data)) {\n                let transformed = false;\n                if (options.rotatable) {\n                    if (utilities.isNumber(data.rotate) && data.rotate !== imageData.rotate) {\n                        imageData.rotate = data.rotate;\n                        transformed = true;\n                    }\n                }\n                if (options.scalable) {\n                    if (utilities.isNumber(data.scaleX) && data.scaleX !== imageData.scaleX) {\n                        imageData.scaleX = data.scaleX;\n                        transformed = true;\n                    }\n                    if (utilities.isNumber(data.scaleY) && data.scaleY !== imageData.scaleY) {\n                        imageData.scaleY = data.scaleY;\n                        transformed = true;\n                    }\n                }\n                if (transformed) {\n                    this.renderCanvas(true, true);\n                }\n                const ratio = imageData.width / imageData.naturalWidth;\n                if (utilities.isNumber(data.x)) {\n                    cropBoxData.left = data.x * ratio + canvasData.left;\n                }\n                if (utilities.isNumber(data.y)) {\n                    cropBoxData.top = data.y * ratio + canvasData.top;\n                }\n                if (utilities.isNumber(data.width)) {\n                    cropBoxData.width = data.width * ratio;\n                }\n                if (utilities.isNumber(data.height)) {\n                    cropBoxData.height = data.height * ratio;\n                }\n                this.setCropBoxData(cropBoxData);\n            }\n            return this;\n        },\n        getContainerData() {\n            return this.ready ? utilities.assign({}, this.containerData) : {};\n        },\n        getImageData() {\n            return this.sized ? utilities.assign({}, this.imageData) : {};\n        },\n        getCanvasData() {\n            const {canvasData} = this;\n            const data = {};\n            if (this.ready) {\n                utilities.forEach([\n                    'left',\n                    'top',\n                    'width',\n                    'height',\n                    'naturalWidth',\n                    'naturalHeight'\n                ], n => {\n                    data[n] = canvasData[n];\n                });\n            }\n            return data;\n        },\n        setCanvasData(data) {\n            const {canvasData} = this;\n            const {aspectRatio} = canvasData;\n            if (this.ready && !this.disabled && utilities.isPlainObject(data)) {\n                if (utilities.isNumber(data.left)) {\n                    canvasData.left = data.left;\n                }\n                if (utilities.isNumber(data.top)) {\n                    canvasData.top = data.top;\n                }\n                if (utilities.isNumber(data.width)) {\n                    canvasData.width = data.width;\n                    canvasData.height = data.width / aspectRatio;\n                } else if (utilities.isNumber(data.height)) {\n                    canvasData.height = data.height;\n                    canvasData.width = data.height * aspectRatio;\n                }\n                this.renderCanvas(true);\n            }\n            return this;\n        },\n        getCropBoxData() {\n            const {cropBoxData} = this;\n            let data;\n            if (this.ready && this.cropped) {\n                data = {\n                    left: cropBoxData.left,\n                    top: cropBoxData.top,\n                    width: cropBoxData.width,\n                    height: cropBoxData.height\n                };\n            }\n            return data || {};\n        },\n        setCropBoxData(data) {\n            const {cropBoxData} = this;\n            const {aspectRatio} = this.options;\n            let widthChanged;\n            let heightChanged;\n            if (this.ready && this.cropped && !this.disabled && utilities.isPlainObject(data)) {\n                if (utilities.isNumber(data.left)) {\n                    cropBoxData.left = data.left;\n                }\n                if (utilities.isNumber(data.top)) {\n                    cropBoxData.top = data.top;\n                }\n                if (utilities.isNumber(data.width) && data.width !== cropBoxData.width) {\n                    widthChanged = true;\n                    cropBoxData.width = data.width;\n                }\n                if (utilities.isNumber(data.height) && data.height !== cropBoxData.height) {\n                    heightChanged = true;\n                    cropBoxData.height = data.height;\n                }\n                if (aspectRatio) {\n                    if (widthChanged) {\n                        cropBoxData.height = cropBoxData.width / aspectRatio;\n                    } else if (heightChanged) {\n                        cropBoxData.width = cropBoxData.height * aspectRatio;\n                    }\n                }\n                this.renderCropBox();\n            }\n            return this;\n        },\n        getCroppedCanvas(options = {}) {\n            if (!this.ready || !window.HTMLCanvasElement) {\n                return null;\n            }\n            const {canvasData} = this;\n            const source = utilities.getSourceCanvas(this.image, this.imageData, canvasData, options);\n            if (!this.cropped) {\n                return source;\n            }\n            let {\n                x: initialX,\n                y: initialY,\n                width: initialWidth,\n                height: initialHeight\n            } = this.getData();\n            const ratio = source.width / Math.floor(canvasData.naturalWidth);\n            if (ratio !== 1) {\n                initialX *= ratio;\n                initialY *= ratio;\n                initialWidth *= ratio;\n                initialHeight *= ratio;\n            }\n            const aspectRatio = initialWidth / initialHeight;\n            const maxSizes = utilities.getAdjustedSizes({\n                aspectRatio,\n                width: options.maxWidth || Infinity,\n                height: options.maxHeight || Infinity\n            });\n            const minSizes = utilities.getAdjustedSizes({\n                aspectRatio,\n                width: options.minWidth || 0,\n                height: options.minHeight || 0\n            }, 'cover');\n            let {width, height} = utilities.getAdjustedSizes({\n                aspectRatio,\n                width: options.width || (ratio !== 1 ? source.width : initialWidth),\n                height: options.height || (ratio !== 1 ? source.height : initialHeight)\n            });\n            width = Math.min(maxSizes.width, Math.max(minSizes.width, width));\n            height = Math.min(maxSizes.height, Math.max(minSizes.height, height));\n            const canvas = document.createElement('canvas');\n            const context = canvas.getContext('2d');\n            canvas.width = utilities.normalizeDecimalNumber(width);\n            canvas.height = utilities.normalizeDecimalNumber(height);\n            context.fillStyle = options.fillColor || 'transparent';\n            context.fillRect(0, 0, width, height);\n            const {imageSmoothingEnabled = true, imageSmoothingQuality} = options;\n            context.imageSmoothingEnabled = imageSmoothingEnabled;\n            if (imageSmoothingQuality) {\n                context.imageSmoothingQuality = imageSmoothingQuality;\n            }\n            const sourceWidth = source.width;\n            const sourceHeight = source.height;\n            let srcX = initialX;\n            let srcY = initialY;\n            let srcWidth;\n            let srcHeight;\n            let dstX;\n            let dstY;\n            let dstWidth;\n            let dstHeight;\n            if (srcX <= -initialWidth || srcX > sourceWidth) {\n                srcX = 0;\n                srcWidth = 0;\n                dstX = 0;\n                dstWidth = 0;\n            } else if (srcX <= 0) {\n                dstX = -srcX;\n                srcX = 0;\n                srcWidth = Math.min(sourceWidth, initialWidth + srcX);\n                dstWidth = srcWidth;\n            } else if (srcX <= sourceWidth) {\n                dstX = 0;\n                srcWidth = Math.min(initialWidth, sourceWidth - srcX);\n                dstWidth = srcWidth;\n            }\n            if (srcWidth <= 0 || srcY <= -initialHeight || srcY > sourceHeight) {\n                srcY = 0;\n                srcHeight = 0;\n                dstY = 0;\n                dstHeight = 0;\n            } else if (srcY <= 0) {\n                dstY = -srcY;\n                srcY = 0;\n                srcHeight = Math.min(sourceHeight, initialHeight + srcY);\n                dstHeight = srcHeight;\n            } else if (srcY <= sourceHeight) {\n                dstY = 0;\n                srcHeight = Math.min(initialHeight, sourceHeight - srcY);\n                dstHeight = srcHeight;\n            }\n            const params = [\n                srcX,\n                srcY,\n                srcWidth,\n                srcHeight\n            ];\n            if (dstWidth > 0 && dstHeight > 0) {\n                const scale = width / initialWidth;\n                params.push(dstX * scale, dstY * scale, dstWidth * scale, dstHeight * scale);\n            }\n            context.drawImage(source, ...params.map(param => Math.floor(utilities.normalizeDecimalNumber(param))));\n            return canvas;\n        },\n        setAspectRatio(aspectRatio) {\n            const {options} = this;\n            if (!this.disabled && !utilities.isUndefined(aspectRatio)) {\n                options.aspectRatio = Math.max(0, aspectRatio) || NaN;\n                if (this.ready) {\n                    this.initCropBox();\n                    if (this.cropped) {\n                        this.renderCropBox();\n                    }\n                }\n            }\n            return this;\n        },\n        setDragMode(mode) {\n            const {options, dragBox, face} = this;\n            if (this.ready && !this.disabled) {\n                const croppable = mode === constants.DRAG_MODE_CROP;\n                const movable = options.movable && mode === constants.DRAG_MODE_MOVE;\n                mode = croppable || movable ? mode : constants.DRAG_MODE_NONE;\n                options.dragMode = mode;\n                utilities.setData(dragBox, constants.DATA_ACTION, mode);\n                utilities.toggleClass(dragBox, constants.CLASS_CROP, croppable);\n                utilities.toggleClass(dragBox, constants.CLASS_MOVE, movable);\n                if (!options.cropBoxMovable) {\n                    utilities.setData(face, constants.DATA_ACTION, mode);\n                    utilities.toggleClass(face, constants.CLASS_CROP, croppable);\n                    utilities.toggleClass(face, constants.CLASS_MOVE, movable);\n                }\n            }\n            return this;\n        }\n    };\n});\ndefine('skylark-cropperjs/Cropper',[\n    'skylark-langx/skylark',\n    './defaults',\n    './template',\n    './render',\n    './preview',\n    './events',\n    './handlers',\n    './change',\n    './methods',\n    './constants',\n    './utilities'\n], function (skylark, DEFAULTS, TEMPLATE, render, preview, events, handlers, change, methods, constants, utilities) {\n    'use strict';\n    const AnotherCropper = constants.WINDOW.Cropper;\n    class Cropper {\n        constructor(element, options = {}) {\n            if (!element || !constants.REGEXP_TAG_NAME.test(element.tagName)) {\n                throw new Error('The first argument is required and must be an <img> or <canvas> element.');\n            }\n            this.element = element;\n            this.options = utilities.assign({}, DEFAULTS, utilities.isPlainObject(options) && options);\n            this.cropped = false;\n            this.disabled = false;\n            this.pointers = {};\n            this.ready = false;\n            this.reloading = false;\n            this.replaced = false;\n            this.sized = false;\n            this.sizing = false;\n            this.init();\n        }\n        init() {\n            const {element} = this;\n            const tagName = element.tagName.toLowerCase();\n            let url;\n            if (element[constants.NAMESPACE]) {\n                return;\n            }\n            element[constants.NAMESPACE] = this;\n            if (tagName === 'img') {\n                this.isImg = true;\n                url = element.getAttribute('src') || '';\n                this.originalUrl = url;\n                if (!url) {\n                    return;\n                }\n                url = element.src;\n            } else if (tagName === 'canvas' && window.HTMLCanvasElement) {\n                url = element.toDataURL();\n            }\n            this.load(url);\n        }\n        load(url) {\n            if (!url) {\n                return;\n            }\n            this.url = url;\n            this.imageData = {};\n            const {element, options} = this;\n            if (!options.rotatable && !options.scalable) {\n                options.checkOrientation = false;\n            }\n            if (!options.checkOrientation || !window.ArrayBuffer) {\n                this.clone();\n                return;\n            }\n            if (constants.REGEXP_DATA_URL.test(url)) {\n                if (constants.REGEXP_DATA_URL_JPEG.test(url)) {\n                    this.read(utilities.dataURLToArrayBuffer(url));\n                } else {\n                    this.clone();\n                }\n                return;\n            }\n            const xhr = new XMLHttpRequest();\n            const clone = this.clone.bind(this);\n            this.reloading = true;\n            this.xhr = xhr;\n            xhr.onabort = clone;\n            xhr.onerror = clone;\n            xhr.ontimeout = clone;\n            xhr.onprogress = () => {\n                if (xhr.getResponseHeader('content-type') !== constants.MIME_TYPE_JPEG) {\n                    xhr.abort();\n                }\n            };\n            xhr.onload = () => {\n                this.read(xhr.response);\n            };\n            xhr.onloadend = () => {\n                this.reloading = false;\n                this.xhr = null;\n            };\n            if (options.checkCrossOrigin && utilities.isCrossOriginURL(url) && element.crossOrigin) {\n                url = utilities.addTimestamp(url);\n            }\n            xhr.open('GET', url);\n            xhr.responseType = 'arraybuffer';\n            xhr.withCredentials = element.crossOrigin === 'use-credentials';\n            xhr.send();\n        }\n        read(arrayBuffer) {\n            const {options, imageData} = this;\n            const orientation = utilities.resetAndGetOrientation(arrayBuffer);\n            let rotate = 0;\n            let scaleX = 1;\n            let scaleY = 1;\n            if (orientation > 1) {\n                this.url = utilities.arrayBufferToDataURL(arrayBuffer, constants.MIME_TYPE_JPEG);\n                ({rotate, scaleX, scaleY} = utilities.parseOrientation(orientation));\n            }\n            if (options.rotatable) {\n                imageData.rotate = rotate;\n            }\n            if (options.scalable) {\n                imageData.scaleX = scaleX;\n                imageData.scaleY = scaleY;\n            }\n            this.clone();\n        }\n        clone() {\n            const {element, url} = this;\n            let {crossOrigin} = element;\n            let crossOriginUrl = url;\n            if (this.options.checkCrossOrigin && utilities.isCrossOriginURL(url)) {\n                if (!crossOrigin) {\n                    crossOrigin = 'anonymous';\n                }\n                crossOriginUrl = utilities.addTimestamp(url);\n            }\n            this.crossOrigin = crossOrigin;\n            this.crossOriginUrl = crossOriginUrl;\n            const image = document.createElement('img');\n            if (crossOrigin) {\n                image.crossOrigin = crossOrigin;\n            }\n            image.src = crossOriginUrl || url;\n            image.alt = element.alt || 'The image to crop';\n            this.image = image;\n            image.onload = this.start.bind(this);\n            image.onerror = this.stop.bind(this);\n            utilities.addClass(image, constants.CLASS_HIDE);\n            element.parentNode.insertBefore(image, element.nextSibling);\n        }\n        start() {\n            const {image} = this;\n            image.onload = null;\n            image.onerror = null;\n            this.sizing = true;\n            const isIOSWebKit = constants.WINDOW.navigator && /(?:iPad|iPhone|iPod).*?AppleWebKit/i.test(constants.WINDOW.navigator.userAgent);\n            const done = (naturalWidth, naturalHeight) => {\n                utilities.assign(this.imageData, {\n                    naturalWidth,\n                    naturalHeight,\n                    aspectRatio: naturalWidth / naturalHeight\n                });\n                this.sizing = false;\n                this.sized = true;\n                this.build();\n            };\n            if (image.naturalWidth && !isIOSWebKit) {\n                done(image.naturalWidth, image.naturalHeight);\n                return;\n            }\n            const sizingImage = document.createElement('img');\n            const body = document.body || document.documentElement;\n            this.sizingImage = sizingImage;\n            sizingImage.onload = () => {\n                done(sizingImage.width, sizingImage.height);\n                if (!isIOSWebKit) {\n                    body.removeChild(sizingImage);\n                }\n            };\n            sizingImage.src = image.src;\n            if (!isIOSWebKit) {\n                sizingImage.style.cssText = 'left:0;' + 'max-height:none!important;' + 'max-width:none!important;' + 'min-height:0!important;' + 'min-width:0!important;' + 'opacity:0;' + 'position:absolute;' + 'top:0;' + 'z-index:-1;';\n                body.appendChild(sizingImage);\n            }\n        }\n        stop() {\n            const {image} = this;\n            image.onload = null;\n            image.onerror = null;\n            image.parentNode.removeChild(image);\n            this.image = null;\n        }\n        build() {\n            if (!this.sized || this.ready) {\n                return;\n            }\n            const {element, options, image} = this;\n            const container = element.parentNode;\n            const template = document.createElement('div');\n            template.innerHTML = TEMPLATE;\n            const cropper = template.querySelector(`.${ constants.NAMESPACE }-container`);\n            const canvas = cropper.querySelector(`.${ constants.NAMESPACE }-canvas`);\n            const dragBox = cropper.querySelector(`.${ constants.NAMESPACE }-drag-box`);\n            const cropBox = cropper.querySelector(`.${ constants.NAMESPACE }-crop-box`);\n            const face = cropBox.querySelector(`.${ constants.NAMESPACE }-face`);\n            this.container = container;\n            this.cropper = cropper;\n            this.canvas = canvas;\n            this.dragBox = dragBox;\n            this.cropBox = cropBox;\n            this.viewBox = cropper.querySelector(`.${ constants.NAMESPACE }-view-box`);\n            this.face = face;\n            canvas.appendChild(image);\n            utilities.addClass(element, constants.CLASS_HIDDEN);\n            container.insertBefore(cropper, element.nextSibling);\n            if (!this.isImg) {\n                utilities.removeClass(image, constants.CLASS_HIDE);\n            }\n            this.initPreview();\n            this.bind();\n            options.initialAspectRatio = Math.max(0, options.initialAspectRatio) || NaN;\n            options.aspectRatio = Math.max(0, options.aspectRatio) || NaN;\n            options.viewMode = Math.max(0, Math.min(3, Math.round(options.viewMode))) || 0;\n            utilities.addClass(cropBox, constants.CLASS_HIDDEN);\n            if (!options.guides) {\n                utilities.addClass(cropBox.getElementsByClassName(`${ constants.NAMESPACE }-dashed`), constants.CLASS_HIDDEN);\n            }\n            if (!options.center) {\n                utilities.addClass(cropBox.getElementsByClassName(`${ constants.NAMESPACE }-center`), constants.CLASS_HIDDEN);\n            }\n            if (options.background) {\n                utilities.addClass(cropper, `${ constants.NAMESPACE }-bg`);\n            }\n            if (!options.highlight) {\n                utilities.addClass(face, constants.CLASS_INVISIBLE);\n            }\n            if (options.cropBoxMovable) {\n                utilities.addClass(face, constants.CLASS_MOVE);\n                utilities.setData(face, constants.DATA_ACTION, constants.ACTION_ALL);\n            }\n            if (!options.cropBoxResizable) {\n                utilities.addClass(cropBox.getElementsByClassName(`${ constants.NAMESPACE }-line`), constants.CLASS_HIDDEN);\n                utilities.addClass(cropBox.getElementsByClassName(`${ constants.NAMESPACE }-point`), constants.CLASS_HIDDEN);\n            }\n            this.render();\n            this.ready = true;\n            this.setDragMode(options.dragMode);\n            if (options.autoCrop) {\n                this.crop();\n            }\n            this.undefined(options.data);\n            if (utilities.isFunction(options.ready)) {\n                utilities.addListener(element, constants.EVENT_READY, options.ready, { once: true });\n            }\n            utilities.dispatchEvent(element, constants.EVENT_READY);\n        }\n        unbuild() {\n            if (!this.ready) {\n                return;\n            }\n            this.ready = false;\n            this.unbind();\n            this.resetPreview();\n            this.cropper.parentNode.removeChild(this.cropper);\n            utilities.removeClass(this.element, constants.CLASS_HIDDEN);\n        }\n        uncreate() {\n            if (this.ready) {\n                this.unbuild();\n                this.ready = false;\n                this.cropped = false;\n            } else if (this.sizing) {\n                this.sizingImage.onload = null;\n                this.sizing = false;\n                this.sized = false;\n            } else if (this.reloading) {\n                this.xhr.onabort = null;\n                this.xhr.abort();\n            } else if (this.image) {\n                this.stop();\n            }\n        }\n        static noConflict() {\n            window.Cropper = AnotherCropper;\n            return Cropper;\n        }\n        static setDefaults(options) {\n            utilities.assign(DEFAULTS, utilities.isPlainObject(options) && options);\n        }\n    }\n    utilities.assign(Cropper.prototype, render, preview, events, handlers, change, methods);\n    return skylark.attach('intg.Cropper', Cropper);\n});\ndefine('skylark-cropperjs/main',[\r\n\t\"./Cropper\"\r\n],function(Cropper){\r\n\treturn Cropper;\r\n});\ndefine('skylark-cropperjs', ['skylark-cropperjs/main'], function (main) { return main; });\n\n"]}