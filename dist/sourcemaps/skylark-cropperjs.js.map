{"version":3,"sources":["skylark-cropperjs.js"],"names":["define","IS_BROWSER","window","document","WINDOW","IS_TOUCH_DEVICE","documentElement","HAS_POINTER_EVENT","CLASS_CROP","CLASS_DISABLED","CLASS_HIDDEN","CLASS_HIDE","CLASS_INVISIBLE","CLASS_MODAL","CLASS_MOVE","DATA_ACTION","DATA_PREVIEW","EVENT_TOUCH_START","EVENT_TOUCH_MOVE","EVENT_TOUCH_END","EVENT_POINTER_DOWN","EVENT_POINTER_MOVE","EVENT_POINTER_UP","NAMESPACE","ACTION_ALL","ACTION_CROP","ACTION_MOVE","ACTION_ZOOM","ACTION_EAST","ACTION_WEST","ACTION_SOUTH","ACTION_NORTH","ACTION_NORTH_EAST","ACTION_NORTH_WEST","ACTION_SOUTH_EAST","ACTION_SOUTH_WEST","DRAG_MODE_CROP","DRAG_MODE_MOVE","DRAG_MODE_NONE","EVENT_CROP","EVENT_CROP_END","EVENT_CROP_MOVE","EVENT_CROP_START","EVENT_DBLCLICK","EVENT_READY","EVENT_RESIZE","EVENT_WHEEL","EVENT_ZOOM","MIME_TYPE_JPEG","REGEXP_ACTIONS","REGEXP_DATA_URL","REGEXP_DATA_URL_JPEG","REGEXP_TAG_NAME","MIN_CONTAINER_WIDTH","MIN_CONTAINER_HEIGHT","a","viewMode","dragMode","initialAspectRatio","NaN","aspectRatio","data","preview","responsive","restore","checkCrossOrigin","checkOrientation","modal","guides","center","highlight","background","autoCrop","autoCropArea","movable","rotatable","scalable","zoomable","zoomOnTouch","zoomOnWheel","wheelZoomRatio","cropBoxMovable","cropBoxResizable","toggleDragModeOnDblclick","minCanvasWidth","minCanvasHeight","minCropBoxWidth","minCropBoxHeight","minContainerWidth","minContainerHeight","ready","cropstart","cropmove","cropend","crop","zoom","constants","isNaN","Number","isNumber","value","isPositiveNumber","Infinity","isObject","hasOwnProperty","Object","prototype","isFunction","slice","Array","toArray","from","call","forEach","callback","isArray","length","key","keys","assign","target","_len","arguments","args","_key","arg","REGEXP_DECIMALS","normalizeDecimalNumber","times","undefined","test","Math","round","REGEXP_SUFFIX","addClass","element","elem","classList","add","className","trim","indexOf","concat","removeClass","remove","replace","REGEXP_CAMEL_CASE","toParamCase","toLowerCase","REGEXP_SPACES","onceSupported","supported","once","listener","options","defineProperty","get","set","addEventListener","removeEventListener","location","REGEXP_ORIGINS","getAdjustedSizes","_ref4","height","width","type","isValidWidth","isValidHeight","adjustedWidth","fromCharCode","String","getStringFromCharCode","dataView","start","str","i","getUint8","REGEXP_DATA_URL_HEAD","isUndefined","isPlainObject","_constructor","constructor","error","setStyle","styles","style","property","hasClass","contains","toggleClass","added","getData","name","dataset","getAttribute","setData","setAttribute","removeData","removeAttribute","removeListener","handler","split","event","listeners","addListener","_handler","_element$listeners","_len2","_key2","apply","dispatchEvent","Event","CustomEvent","detail","bubbles","cancelable","createEvent","initCustomEvent","getOffset","box","getBoundingClientRect","left","pageXOffset","clientLeft","top","pageYOffset","clientTop","isCrossOriginURL","url","parts","match","protocol","hostname","port","addTimestamp","timestamp","Date","getTime","getTransforms","_ref","rotate","scaleX","scaleY","translateX","translateY","values","push","transform","join","WebkitTransform","msTransform","getMaxZoomRatio","pointers","pointers2","_objectSpread2","ratios","pointer","pointerId","pointer2","x1","abs","startX","y1","startY","x2","endX","y2","endY","z1","sqrt","ratio","sort","b","getPointer","_ref2","endOnly","pageX","pageY","end","getPointersCenter","count","_ref3","getRotatedSizes","_ref5","degree","arc","PI","sinArc","sin","cosArc","cos","newWidth","newHeight","getSourceCanvas","image","_ref6","_ref7","_ref8","imageAspectRatio","imageNaturalWidth","naturalWidth","imageNaturalHeight","naturalHeight","_ref6$rotate","_ref6$scaleX","_ref6$scaleY","_ref8$fillColor","fillColor","_ref8$imageSmoothingE","imageSmoothingEnabled","_ref8$imageSmoothingQ","imageSmoothingQuality","_ref8$maxWidth","maxWidth","_ref8$maxHeight","maxHeight","_ref8$minWidth","minWidth","_ref8$minHeight","minHeight","canvas","createElement","context","getContext","maxSizes","minSizes","min","max","destMaxSizes","destMinSizes","destWidth","destHeight","params","fillStyle","fillRect","save","translate","scale","drawImage","map","param","floor","dataURLToArrayBuffer","dataURL","base64","binary","atob","arrayBuffer","ArrayBuffer","uint8","Uint8Array","charCodeAt","arrayBufferToDataURL","mimeType","chunks","subarray","btoa","resetAndGetOrientation","orientation","DataView","littleEndian","app1Start","ifdStart","byteLength","offset","exifIDCode","tiffOffset","endianness","getUint16","firstIFDOffset","getUint32","_offset","_length","setUint16","parseOrientation","utilities","[object Object]","this","initContainer","initCanvas","initCropBox","renderCanvas","cropped","renderCropBox","container","cropper","containerData","offsetWidth","offsetHeight","imageData","rotated","canvasWidth","canvasHeight","canvasData","oldLeft","oldTop","limited","limitCanvas","initialImageData","initialCanvasData","sizeLimited","positionLimited","cropBoxData","newCanvasLeft","newCanvasTop","minLeft","minTop","maxLeft","maxTop","changed","transformed","renderImage","limitCropBox","output","initialCropBoxData","maxCropBoxWidth","maxCropBoxHeight","face","cropBox","disabled","crossOrigin","crossOriginUrl","alt","src","viewBox","appendChild","viewBoxImage","previews","ownerDocument","querySelectorAll","querySelector","el","img","html","innerHTML","cssText","cropBoxWidth","cropBoxHeight","originalWidth","originalHeight","getElementsByTagName","onCropStart","cropStart","bind","onWheel","wheel","passive","capture","onDblclick","dblclick","onCropMove","cropMove","onCropEnd","cropEnd","onResize","resize","getCanvasData","getCropBoxData","render","setCanvasData","n","setCropBoxData","setDragMode","dragBox","delta","preventDefault","wheeling","setTimeout","deltaY","wheelDelta","buttons","button","pointerType","ctrlKey","action","changedTouches","touch","identifier","originalEvent","cropping","change","right","bottom","renderable","shiftKey","range","x","y","check","side","move","p","hasSameSize","isImg","replaced","uncreate","load","originalUrl","offsetX","offsetY","moveTo","_originalEvent","zoomTo","pivot","oldRatio","rotateTo","rounded","sized","widthChanged","heightChanged","HTMLCanvasElement","source","initialX","initialY","initialWidth","initialHeight","sourceWidth","sourceHeight","srcWidth","srcHeight","dstX","dstY","dstWidth","dstHeight","srcX","srcY","mode","croppable","skylark","DEFAULTS","TEMPLATE","events","handlers","methods","AnotherCropper","Cropper","tagName","Error","reloading","sizing","init","toDataURL","clone","read","xhr","XMLHttpRequest","onabort","onerror","ontimeout","onprogress","getResponseHeader","abort","onload","response","onloadend","open","responseType","withCredentials","send","stop","parentNode","insertBefore","nextSibling","isIOSWebKit","navigator","userAgent","done","build","sizingImage","body","removeChild","template","initPreview","getElementsByClassName","unbind","resetPreview","unbuild","attach","main"],"mappings":"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","file":"../skylark-cropperjs.js","sourcesContent":["define('skylark-cropperjs/constants',[],function () {\n    'use strict';\n    const IS_BROWSER = typeof window !== 'undefined' && typeof window.document !== 'undefined';\n    const WINDOW = IS_BROWSER ? window : {};\n    const IS_TOUCH_DEVICE = IS_BROWSER ? 'ontouchstart' in WINDOW.document.documentElement : false;\n    const HAS_POINTER_EVENT = IS_BROWSER ? 'PointerEvent' in WINDOW : false;\n    const NAMESPACE = 'cropper';\n    const ACTION_ALL = 'all';\n    const ACTION_CROP = 'crop';\n    const ACTION_MOVE = 'move';\n    const ACTION_ZOOM = 'zoom';\n    const ACTION_EAST = 'e';\n    const ACTION_WEST = 'w';\n    const ACTION_SOUTH = 's';\n    const ACTION_NORTH = 'n';\n    const ACTION_NORTH_EAST = 'ne';\n    const ACTION_NORTH_WEST = 'nw';\n    const ACTION_SOUTH_EAST = 'se';\n    const ACTION_SOUTH_WEST = 'sw';\n    const CLASS_CROP = `${ NAMESPACE }-crop`;\n    const CLASS_DISABLED = `${ NAMESPACE }-disabled`;\n    const CLASS_HIDDEN = `${ NAMESPACE }-hidden`;\n    const CLASS_HIDE = `${ NAMESPACE }-hide`;\n    const CLASS_INVISIBLE = `${ NAMESPACE }-invisible`;\n    const CLASS_MODAL = `${ NAMESPACE }-modal`;\n    const CLASS_MOVE = `${ NAMESPACE }-move`;\n    const DATA_ACTION = `${ NAMESPACE }Action`;\n    const DATA_PREVIEW = `${ NAMESPACE }Preview`;\n    const DRAG_MODE_CROP = 'crop';\n    const DRAG_MODE_MOVE = 'move';\n    const DRAG_MODE_NONE = 'none';\n    const EVENT_CROP = 'crop';\n    const EVENT_CROP_END = 'cropend';\n    const EVENT_CROP_MOVE = 'cropmove';\n    const EVENT_CROP_START = 'cropstart';\n    const EVENT_DBLCLICK = 'dblclick';\n    const EVENT_TOUCH_START = IS_TOUCH_DEVICE ? 'touchstart' : 'mousedown';\n    const EVENT_TOUCH_MOVE = IS_TOUCH_DEVICE ? 'touchmove' : 'mousemove';\n    const EVENT_TOUCH_END = IS_TOUCH_DEVICE ? 'touchend touchcancel' : 'mouseup';\n    const EVENT_POINTER_DOWN = HAS_POINTER_EVENT ? 'pointerdown' : EVENT_TOUCH_START;\n    const EVENT_POINTER_MOVE = HAS_POINTER_EVENT ? 'pointermove' : EVENT_TOUCH_MOVE;\n    const EVENT_POINTER_UP = HAS_POINTER_EVENT ? 'pointerup pointercancel' : EVENT_TOUCH_END;\n    const EVENT_READY = 'ready';\n    const EVENT_RESIZE = 'resize';\n    const EVENT_WHEEL = 'wheel';\n    const EVENT_ZOOM = 'zoom';\n    const MIME_TYPE_JPEG = 'image/jpeg';\n    const REGEXP_ACTIONS = /^e|w|s|n|se|sw|ne|nw|all|crop|move|zoom$/;\n    const REGEXP_DATA_URL = /^data:/;\n    const REGEXP_DATA_URL_JPEG = /^data:image\\/jpeg;base64,/;\n    const REGEXP_TAG_NAME = /^img|canvas$/i;\n    const MIN_CONTAINER_WIDTH = 200;\n    const MIN_CONTAINER_HEIGHT = 100;\n    return {\n        IS_BROWSER: IS_BROWSER,\n        WINDOW: WINDOW,\n        IS_TOUCH_DEVICE: IS_TOUCH_DEVICE,\n        HAS_POINTER_EVENT: HAS_POINTER_EVENT,\n        NAMESPACE: NAMESPACE,\n        ACTION_ALL: ACTION_ALL,\n        ACTION_CROP: ACTION_CROP,\n        ACTION_MOVE: ACTION_MOVE,\n        ACTION_ZOOM: ACTION_ZOOM,\n        ACTION_EAST: ACTION_EAST,\n        ACTION_WEST: ACTION_WEST,\n        ACTION_SOUTH: ACTION_SOUTH,\n        ACTION_NORTH: ACTION_NORTH,\n        ACTION_NORTH_EAST: ACTION_NORTH_EAST,\n        ACTION_NORTH_WEST: ACTION_NORTH_WEST,\n        ACTION_SOUTH_EAST: ACTION_SOUTH_EAST,\n        ACTION_SOUTH_WEST: ACTION_SOUTH_WEST,\n        CLASS_CROP: CLASS_CROP,\n        CLASS_DISABLED: CLASS_DISABLED,\n        CLASS_HIDDEN: CLASS_HIDDEN,\n        CLASS_HIDE: CLASS_HIDE,\n        CLASS_INVISIBLE: CLASS_INVISIBLE,\n        CLASS_MODAL: CLASS_MODAL,\n        CLASS_MOVE: CLASS_MOVE,\n        DATA_ACTION: DATA_ACTION,\n        DATA_PREVIEW: DATA_PREVIEW,\n        DRAG_MODE_CROP: DRAG_MODE_CROP,\n        DRAG_MODE_MOVE: DRAG_MODE_MOVE,\n        DRAG_MODE_NONE: DRAG_MODE_NONE,\n        EVENT_CROP: EVENT_CROP,\n        EVENT_CROP_END: EVENT_CROP_END,\n        EVENT_CROP_MOVE: EVENT_CROP_MOVE,\n        EVENT_CROP_START: EVENT_CROP_START,\n        EVENT_DBLCLICK: EVENT_DBLCLICK,\n        EVENT_TOUCH_START: EVENT_TOUCH_START,\n        EVENT_TOUCH_MOVE: EVENT_TOUCH_MOVE,\n        EVENT_TOUCH_END: EVENT_TOUCH_END,\n        EVENT_POINTER_DOWN: EVENT_POINTER_DOWN,\n        EVENT_POINTER_MOVE: EVENT_POINTER_MOVE,\n        EVENT_POINTER_UP: EVENT_POINTER_UP,\n        EVENT_READY: EVENT_READY,\n        EVENT_RESIZE: EVENT_RESIZE,\n        EVENT_WHEEL: EVENT_WHEEL,\n        EVENT_ZOOM: EVENT_ZOOM,\n        MIME_TYPE_JPEG: MIME_TYPE_JPEG,\n        REGEXP_ACTIONS: REGEXP_ACTIONS,\n        REGEXP_DATA_URL: REGEXP_DATA_URL,\n        REGEXP_DATA_URL_JPEG: REGEXP_DATA_URL_JPEG,\n        REGEXP_TAG_NAME: REGEXP_TAG_NAME,\n        MIN_CONTAINER_WIDTH: MIN_CONTAINER_WIDTH,\n        MIN_CONTAINER_HEIGHT: MIN_CONTAINER_HEIGHT\n    };\n});\ndefine('skylark-cropperjs/defaults',['./constants'], function (a) {\n    'use strict';\n    return {\n        viewMode: 0,\n        dragMode: a.DRAG_MODE_CROP,\n        initialAspectRatio: NaN,\n        aspectRatio: NaN,\n        data: null,\n        preview: '',\n        responsive: true,\n        restore: true,\n        checkCrossOrigin: true,\n        checkOrientation: true,\n        modal: true,\n        guides: true,\n        center: true,\n        highlight: true,\n        background: true,\n        autoCrop: true,\n        autoCropArea: 0.8,\n        movable: true,\n        rotatable: true,\n        scalable: true,\n        zoomable: true,\n        zoomOnTouch: true,\n        zoomOnWheel: true,\n        wheelZoomRatio: 0.1,\n        cropBoxMovable: true,\n        cropBoxResizable: true,\n        toggleDragModeOnDblclick: true,\n        minCanvasWidth: 0,\n        minCanvasHeight: 0,\n        minCropBoxWidth: 0,\n        minCropBoxHeight: 0,\n        minContainerWidth: 200,\n        minContainerHeight: 100,\n        ready: null,\n        cropstart: null,\n        cropmove: null,\n        cropend: null,\n        crop: null,\n        zoom: null\n    };\n});\ndefine('skylark-cropperjs/template',[],function () {\n    'use strict';\n    return '<div class=\"cropper-container\" touch-action=\"none\">' + '<div class=\"cropper-wrap-box\">' + '<div class=\"cropper-canvas\"></div>' + '</div>' + '<div class=\"cropper-drag-box\"></div>' + '<div class=\"cropper-crop-box\">' + '<span class=\"cropper-view-box\"></span>' + '<span class=\"cropper-dashed dashed-h\"></span>' + '<span class=\"cropper-dashed dashed-v\"></span>' + '<span class=\"cropper-center\"></span>' + '<span class=\"cropper-face\"></span>' + '<span class=\"cropper-line line-e\" data-cropper-action=\"e\"></span>' + '<span class=\"cropper-line line-n\" data-cropper-action=\"n\"></span>' + '<span class=\"cropper-line line-w\" data-cropper-action=\"w\"></span>' + '<span class=\"cropper-line line-s\" data-cropper-action=\"s\"></span>' + '<span class=\"cropper-point point-e\" data-cropper-action=\"e\"></span>' + '<span class=\"cropper-point point-n\" data-cropper-action=\"n\"></span>' + '<span class=\"cropper-point point-w\" data-cropper-action=\"w\"></span>' + '<span class=\"cropper-point point-s\" data-cropper-action=\"s\"></span>' + '<span class=\"cropper-point point-ne\" data-cropper-action=\"ne\"></span>' + '<span class=\"cropper-point point-nw\" data-cropper-action=\"nw\"></span>' + '<span class=\"cropper-point point-sw\" data-cropper-action=\"sw\"></span>' + '<span class=\"cropper-point point-se\" data-cropper-action=\"se\"></span>' + '</div>' + '</div>';\n});\ndefine('skylark-cropperjs/utilities',['./constants'], function (constants) {\n    'use strict';\n\n\n\n/**\n * Check if the given value is not a number.\n */\n\nvar isNaN = Number.isNaN || constants.WINDOW.isNaN;\n/**\n * Check if the given value is a number.\n * @param {*} value - The value to check.\n * @returns {boolean} Returns `true` if the given value is a number, else `false`.\n */\n\nfunction isNumber(value) {\n  return typeof value === 'number' && !isNaN(value);\n}\n/**\n * Check if the given value is a positive number.\n * @param {*} value - The value to check.\n * @returns {boolean} Returns `true` if the given value is a positive number, else `false`.\n */\n\nvar isPositiveNumber = function isPositiveNumber(value) {\n  return value > 0 && value < Infinity;\n};\n/**\n * Check if the given value is undefined.\n * @param {*} value - The value to check.\n * @returns {boolean} Returns `true` if the given value is undefined, else `false`.\n */\n\nfunction isUndefined(value) {\n  return typeof value === 'undefined';\n}\n/**\n * Check if the given value is an object.\n * @param {*} value - The value to check.\n * @returns {boolean} Returns `true` if the given value is an object, else `false`.\n */\n\nfunction isObject(value) {\n  return typeof(value) === 'object' && value !== null;\n}\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n/**\n * Check if the given value is a plain object.\n * @param {*} value - The value to check.\n * @returns {boolean} Returns `true` if the given value is a plain object, else `false`.\n */\n\nfunction isPlainObject(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n\n  try {\n    var _constructor = value.constructor;\n    var prototype = _constructor.prototype;\n    return _constructor && prototype && hasOwnProperty.call(prototype, 'isPrototypeOf');\n  } catch (error) {\n    return false;\n  }\n}\n/**\n * Check if the given value is a function.\n * @param {*} value - The value to check.\n * @returns {boolean} Returns `true` if the given value is a function, else `false`.\n */\n\nfunction isFunction(value) {\n  return typeof value === 'function';\n}\nvar slice = Array.prototype.slice;\n/**\n * Convert array-like or iterable object to an array.\n * @param {*} value - The value to convert.\n * @returns {Array} Returns a new array.\n */\n\nfunction toArray(value) {\n  return Array.from ? Array.from(value) : slice.call(value);\n}\n/**\n * Iterate the given data.\n * @param {*} data - The data to iterate.\n * @param {Function} callback - The process function for each element.\n * @returns {*} The original data.\n */\n\nfunction forEach(data, callback) {\n  if (data && isFunction(callback)) {\n    if (Array.isArray(data) || isNumber(data.length)\n    /* array-like */\n    ) {\n        toArray(data).forEach(function (value, key) {\n          callback.call(data, value, key, data);\n        });\n      } else if (isObject(data)) {\n      Object.keys(data).forEach(function (key) {\n        callback.call(data, data[key], key, data);\n      });\n    }\n  }\n\n  return data;\n}\n/**\n * Extend the given object.\n * @param {*} target - The target object to extend.\n * @param {*} args - The rest objects for merging to the target object.\n * @returns {Object} The extended object.\n */\n\nvar assign = Object.assign || function assign(target) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  if (isObject(target) && args.length > 0) {\n    args.forEach(function (arg) {\n      if (isObject(arg)) {\n        Object.keys(arg).forEach(function (key) {\n          target[key] = arg[key];\n        });\n      }\n    });\n  }\n\n  return target;\n};\nvar REGEXP_DECIMALS = /\\.\\d*(?:0|9){12}\\d*$/;\n/**\n * Normalize decimal number.\n * Check out {@link http://0.30000000000000004.com/}\n * @param {number} value - The value to normalize.\n * @param {number} [times=100000000000] - The times for normalizing.\n * @returns {number} Returns the normalized number.\n */\n\nfunction normalizeDecimalNumber(value) {\n  var times = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100000000000;\n  return REGEXP_DECIMALS.test(value) ? Math.round(value * times) / times : value;\n}\nvar REGEXP_SUFFIX = /^width|height|left|top|marginLeft|marginTop$/;\n/**\n * Apply styles to the given element.\n * @param {Element} element - The target element.\n * @param {Object} styles - The styles for applying.\n */\n\nfunction setStyle(element, styles) {\n  var style = element.style;\n  forEach(styles, function (value, property) {\n    if (REGEXP_SUFFIX.test(property) && isNumber(value)) {\n      value = \"\".concat(value, \"px\");\n    }\n\n    style[property] = value;\n  });\n}\n/**\n * Check if the given element has a special class.\n * @param {Element} element - The element to check.\n * @param {string} value - The class to search.\n * @returns {boolean} Returns `true` if the special class was found.\n */\n\nfunction hasClass(element, value) {\n  return element.classList ? element.classList.contains(value) : element.className.indexOf(value) > -1;\n}\n/**\n * Add classes to the given element.\n * @param {Element} element - The target element.\n * @param {string} value - The classes to be added.\n */\n\nfunction addClass(element, value) {\n  if (!value) {\n    return;\n  }\n\n  if (isNumber(element.length)) {\n    forEach(element, function (elem) {\n      addClass(elem, value);\n    });\n    return;\n  }\n\n  if (element.classList) {\n    element.classList.add(value);\n    return;\n  }\n\n  var className = element.className.trim();\n\n  if (!className) {\n    element.className = value;\n  } else if (className.indexOf(value) < 0) {\n    element.className = \"\".concat(className, \" \").concat(value);\n  }\n}\n/**\n * Remove classes from the given element.\n * @param {Element} element - The target element.\n * @param {string} value - The classes to be removed.\n */\n\nfunction removeClass(element, value) {\n  if (!value) {\n    return;\n  }\n\n  if (isNumber(element.length)) {\n    forEach(element, function (elem) {\n      removeClass(elem, value);\n    });\n    return;\n  }\n\n  if (element.classList) {\n    element.classList.remove(value);\n    return;\n  }\n\n  if (element.className.indexOf(value) >= 0) {\n    element.className = element.className.replace(value, '');\n  }\n}\n/**\n * Add or remove classes from the given element.\n * @param {Element} element - The target element.\n * @param {string} value - The classes to be toggled.\n * @param {boolean} added - Add only.\n */\n\nfunction toggleClass(element, value, added) {\n  if (!value) {\n    return;\n  }\n\n  if (isNumber(element.length)) {\n    forEach(element, function (elem) {\n      toggleClass(elem, value, added);\n    });\n    return;\n  } // IE10-11 doesn't support the second parameter of `classList.toggle`\n\n\n  if (added) {\n    addClass(element, value);\n  } else {\n    removeClass(element, value);\n  }\n}\nvar REGEXP_CAMEL_CASE = /([a-z\\d])([A-Z])/g;\n/**\n * Transform the given string from camelCase to kebab-case\n * @param {string} value - The value to transform.\n * @returns {string} The transformed value.\n */\n\nfunction toParamCase(value) {\n  return value.replace(REGEXP_CAMEL_CASE, '$1-$2').toLowerCase();\n}\n/**\n * Get data from the given element.\n * @param {Element} element - The target element.\n * @param {string} name - The data key to get.\n * @returns {string} The data value.\n */\n\nfunction getData(element, name) {\n  if (isObject(element[name])) {\n    return element[name];\n  }\n\n  if (element.dataset) {\n    return element.dataset[name];\n  }\n\n  return element.getAttribute(\"data-\".concat(toParamCase(name)));\n}\n/**\n * Set data to the given element.\n * @param {Element} element - The target element.\n * @param {string} name - The data key to set.\n * @param {string} data - The data value.\n */\n\nfunction setData(element, name, data) {\n  if (isObject(data)) {\n    element[name] = data;\n  } else if (element.dataset) {\n    element.dataset[name] = data;\n  } else {\n    element.setAttribute(\"data-\".concat(toParamCase(name)), data);\n  }\n}\n/**\n * Remove data from the given element.\n * @param {Element} element - The target element.\n * @param {string} name - The data key to remove.\n */\n\nfunction removeData(element, name) {\n  if (isObject(element[name])) {\n    try {\n      delete element[name];\n    } catch (error) {\n      element[name] = undefined;\n    }\n  } else if (element.dataset) {\n    // #128 Safari not allows to delete dataset property\n    try {\n      delete element.dataset[name];\n    } catch (error) {\n      element.dataset[name] = undefined;\n    }\n  } else {\n    element.removeAttribute(\"data-\".concat(toParamCase(name)));\n  }\n}\nvar REGEXP_SPACES = /\\s\\s*/;\n\nvar onceSupported = function () {\n  var supported = false;\n\n  if (constants.IS_BROWSER) {\n    var once = false;\n\n    var listener = function listener() {};\n\n    var options = Object.defineProperty({}, 'once', {\n      get: function get() {\n        supported = true;\n        return once;\n      },\n\n      /**\n       * This setter can fix a `TypeError` in strict mode\n       * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Getter_only}\n       * @param {boolean} value - The value to set\n       */\n      set: function set(value) {\n        once = value;\n      }\n    });\n    constants.WINDOW.addEventListener('test', listener, options);\n    constants.WINDOW.removeEventListener('test', listener, options);\n  }\n\n  return supported;\n}();\n/**\n * Remove event listener from the target element.\n * @param {Element} element - The event target.\n * @param {string} type - The event type(s).\n * @param {Function} listener - The event listener.\n * @param {Object} options - The event options.\n */\n\n\nfunction removeListener(element, type, listener) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var handler = listener;\n  type.trim().split(REGEXP_SPACES).forEach(function (event) {\n    if (!onceSupported) {\n      var listeners = element.listeners;\n\n      if (listeners && listeners[event] && listeners[event][listener]) {\n        handler = listeners[event][listener];\n        delete listeners[event][listener];\n\n        if (Object.keys(listeners[event]).length === 0) {\n          delete listeners[event];\n        }\n\n        if (Object.keys(listeners).length === 0) {\n          delete element.listeners;\n        }\n      }\n    }\n\n    element.removeEventListener(event, handler, options);\n  });\n}\n/**\n * Add event listener to the target element.\n * @param {Element} element - The event target.\n * @param {string} type - The event type(s).\n * @param {Function} listener - The event listener.\n * @param {Object} options - The event options.\n */\n\nfunction addListener(element, type, listener) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var _handler = listener;\n  type.trim().split(REGEXP_SPACES).forEach(function (event) {\n    if (options.once && !onceSupported) {\n      var _element$listeners = element.listeners,\n          listeners = _element$listeners === void 0 ? {} : _element$listeners;\n\n      _handler = function handler() {\n        delete listeners[event][listener];\n        element.removeEventListener(event, _handler, options);\n\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        listener.apply(element, args);\n      };\n\n      if (!listeners[event]) {\n        listeners[event] = {};\n      }\n\n      if (listeners[event][listener]) {\n        element.removeEventListener(event, listeners[event][listener], options);\n      }\n\n      listeners[event][listener] = _handler;\n      element.listeners = listeners;\n    }\n\n    element.addEventListener(event, _handler, options);\n  });\n}\n/**\n * Dispatch event on the target element.\n * @param {Element} element - The event target.\n * @param {string} type - The event type(s).\n * @param {Object} data - The additional event data.\n * @returns {boolean} Indicate if the event is default prevented or not.\n */\n\nfunction dispatchEvent(element, type, data) {\n  var event; // Event and CustomEvent on IE9-11 are global objects, not constructors\n\n  if (isFunction(Event) && isFunction(CustomEvent)) {\n    event = new CustomEvent(type, {\n      detail: data,\n      bubbles: true,\n      cancelable: true\n    });\n  } else {\n    event = document.createEvent('CustomEvent');\n    event.initCustomEvent(type, true, true, data);\n  }\n\n  return element.dispatchEvent(event);\n}\n/**\n * Get the offset base on the document.\n * @param {Element} element - The target element.\n * @returns {Object} The offset data.\n */\n\nfunction getOffset(element) {\n  var box = element.getBoundingClientRect();\n  return {\n    left: box.left + (window.pageXOffset - document.documentElement.clientLeft),\n    top: box.top + (window.pageYOffset - document.documentElement.clientTop)\n  };\n}\nvar location = constants.WINDOW.location;\nvar REGEXP_ORIGINS = /^(\\w+:)\\/\\/([^:/?#]*):?(\\d*)/i;\n/**\n * Check if the given URL is a cross origin URL.\n * @param {string} url - The target URL.\n * @returns {boolean} Returns `true` if the given URL is a cross origin URL, else `false`.\n */\n\nfunction isCrossOriginURL(url) {\n  var parts = url.match(REGEXP_ORIGINS);\n  return parts !== null && (parts[1] !== location.protocol || parts[2] !== location.hostname || parts[3] !== location.port);\n}\n/**\n * Add timestamp to the given URL.\n * @param {string} url - The target URL.\n * @returns {string} The result URL.\n */\n\nfunction addTimestamp(url) {\n  var timestamp = \"timestamp=\".concat(new Date().getTime());\n  return url + (url.indexOf('?') === -1 ? '?' : '&') + timestamp;\n}\n/**\n * Get transforms base on the given object.\n * @param {Object} obj - The target object.\n * @returns {string} A string contains transform values.\n */\n\nfunction getTransforms(_ref) {\n  var rotate = _ref.rotate,\n      scaleX = _ref.scaleX,\n      scaleY = _ref.scaleY,\n      translateX = _ref.translateX,\n      translateY = _ref.translateY;\n  var values = [];\n\n  if (isNumber(translateX) && translateX !== 0) {\n    values.push(\"translateX(\".concat(translateX, \"px)\"));\n  }\n\n  if (isNumber(translateY) && translateY !== 0) {\n    values.push(\"translateY(\".concat(translateY, \"px)\"));\n  } // Rotate should come first before scale to match orientation transform\n\n\n  if (isNumber(rotate) && rotate !== 0) {\n    values.push(\"rotate(\".concat(rotate, \"deg)\"));\n  }\n\n  if (isNumber(scaleX) && scaleX !== 1) {\n    values.push(\"scaleX(\".concat(scaleX, \")\"));\n  }\n\n  if (isNumber(scaleY) && scaleY !== 1) {\n    values.push(\"scaleY(\".concat(scaleY, \")\"));\n  }\n\n  var transform = values.length ? values.join(' ') : 'none';\n  return {\n    WebkitTransform: transform,\n    msTransform: transform,\n    transform: transform\n  };\n}\n/**\n * Get the max ratio of a group of pointers.\n * @param {string} pointers - The target pointers.\n * @returns {number} The result ratio.\n */\n\nfunction getMaxZoomRatio(pointers) {\n  var pointers2 = _objectSpread2({}, pointers);\n\n  var ratios = [];\n  forEach(pointers, function (pointer, pointerId) {\n    delete pointers2[pointerId];\n    forEach(pointers2, function (pointer2) {\n      var x1 = Math.abs(pointer.startX - pointer2.startX);\n      var y1 = Math.abs(pointer.startY - pointer2.startY);\n      var x2 = Math.abs(pointer.endX - pointer2.endX);\n      var y2 = Math.abs(pointer.endY - pointer2.endY);\n      var z1 = Math.sqrt(x1 * x1 + y1 * y1);\n      var z2 = Math.sqrt(x2 * x2 + y2 * y2);\n      var ratio = (z2 - z1) / z1;\n      ratios.push(ratio);\n    });\n  });\n  ratios.sort(function (a, b) {\n    return Math.abs(a) < Math.abs(b);\n  });\n  return ratios[0];\n}\n/**\n * Get a pointer from an event object.\n * @param {Object} event - The target event object.\n * @param {boolean} endOnly - Indicates if only returns the end point coordinate or not.\n * @returns {Object} The result pointer contains start and/or end point coordinates.\n */\n\nfunction getPointer(_ref2, endOnly) {\n  var pageX = _ref2.pageX,\n      pageY = _ref2.pageY;\n  var end = {\n    endX: pageX,\n    endY: pageY\n  };\n  return endOnly ? end : _objectSpread2({\n    startX: pageX,\n    startY: pageY\n  }, end);\n}\n/**\n * Get the center point coordinate of a group of pointers.\n * @param {Object} pointers - The target pointers.\n * @returns {Object} The center point coordinate.\n */\n\nfunction getPointersCenter(pointers) {\n  var pageX = 0;\n  var pageY = 0;\n  var count = 0;\n  forEach(pointers, function (_ref3) {\n    var startX = _ref3.startX,\n        startY = _ref3.startY;\n    pageX += startX;\n    pageY += startY;\n    count += 1;\n  });\n  pageX /= count;\n  pageY /= count;\n  return {\n    pageX: pageX,\n    pageY: pageY\n  };\n}\n/**\n * Get the max sizes in a rectangle under the given aspect ratio.\n * @param {Object} data - The original sizes.\n * @param {string} [type='contain'] - The adjust type.\n * @returns {Object} The result sizes.\n */\n\nfunction getAdjustedSizes(_ref4) // or 'cover'\n{\n  var aspectRatio = _ref4.aspectRatio,\n      height = _ref4.height,\n      width = _ref4.width;\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'contain';\n  var isValidWidth = isPositiveNumber(width);\n  var isValidHeight = isPositiveNumber(height);\n\n  if (isValidWidth && isValidHeight) {\n    var adjustedWidth = height * aspectRatio;\n\n    if (type === 'contain' && adjustedWidth > width || type === 'cover' && adjustedWidth < width) {\n      height = width / aspectRatio;\n    } else {\n      width = height * aspectRatio;\n    }\n  } else if (isValidWidth) {\n    height = width / aspectRatio;\n  } else if (isValidHeight) {\n    width = height * aspectRatio;\n  }\n\n  return {\n    width: width,\n    height: height\n  };\n}\n/**\n * Get the new sizes of a rectangle after rotated.\n * @param {Object} data - The original sizes.\n * @returns {Object} The result sizes.\n */\n\nfunction getRotatedSizes(_ref5) {\n  var width = _ref5.width,\n      height = _ref5.height,\n      degree = _ref5.degree;\n  degree = Math.abs(degree) % 180;\n\n  if (degree === 90) {\n    return {\n      width: height,\n      height: width\n    };\n  }\n\n  var arc = degree % 90 * Math.PI / 180;\n  var sinArc = Math.sin(arc);\n  var cosArc = Math.cos(arc);\n  var newWidth = width * cosArc + height * sinArc;\n  var newHeight = width * sinArc + height * cosArc;\n  return degree > 90 ? {\n    width: newHeight,\n    height: newWidth\n  } : {\n    width: newWidth,\n    height: newHeight\n  };\n}\n/**\n * Get a canvas which drew the given image.\n * @param {HTMLImageElement} image - The image for drawing.\n * @param {Object} imageData - The image data.\n * @param {Object} canvasData - The canvas data.\n * @param {Object} options - The options.\n * @returns {HTMLCanvasElement} The result canvas.\n */\n\nfunction getSourceCanvas(image, _ref6, _ref7, _ref8) {\n  var imageAspectRatio = _ref6.aspectRatio,\n      imageNaturalWidth = _ref6.naturalWidth,\n      imageNaturalHeight = _ref6.naturalHeight,\n      _ref6$rotate = _ref6.rotate,\n      rotate = _ref6$rotate === void 0 ? 0 : _ref6$rotate,\n      _ref6$scaleX = _ref6.scaleX,\n      scaleX = _ref6$scaleX === void 0 ? 1 : _ref6$scaleX,\n      _ref6$scaleY = _ref6.scaleY,\n      scaleY = _ref6$scaleY === void 0 ? 1 : _ref6$scaleY;\n  var aspectRatio = _ref7.aspectRatio,\n      naturalWidth = _ref7.naturalWidth,\n      naturalHeight = _ref7.naturalHeight;\n  var _ref8$fillColor = _ref8.fillColor,\n      fillColor = _ref8$fillColor === void 0 ? 'transparent' : _ref8$fillColor,\n      _ref8$imageSmoothingE = _ref8.imageSmoothingEnabled,\n      imageSmoothingEnabled = _ref8$imageSmoothingE === void 0 ? true : _ref8$imageSmoothingE,\n      _ref8$imageSmoothingQ = _ref8.imageSmoothingQuality,\n      imageSmoothingQuality = _ref8$imageSmoothingQ === void 0 ? 'low' : _ref8$imageSmoothingQ,\n      _ref8$maxWidth = _ref8.maxWidth,\n      maxWidth = _ref8$maxWidth === void 0 ? Infinity : _ref8$maxWidth,\n      _ref8$maxHeight = _ref8.maxHeight,\n      maxHeight = _ref8$maxHeight === void 0 ? Infinity : _ref8$maxHeight,\n      _ref8$minWidth = _ref8.minWidth,\n      minWidth = _ref8$minWidth === void 0 ? 0 : _ref8$minWidth,\n      _ref8$minHeight = _ref8.minHeight,\n      minHeight = _ref8$minHeight === void 0 ? 0 : _ref8$minHeight;\n  var canvas = document.createElement('canvas');\n  var context = canvas.getContext('2d');\n  var maxSizes = getAdjustedSizes({\n    aspectRatio: aspectRatio,\n    width: maxWidth,\n    height: maxHeight\n  });\n  var minSizes = getAdjustedSizes({\n    aspectRatio: aspectRatio,\n    width: minWidth,\n    height: minHeight\n  }, 'cover');\n  var width = Math.min(maxSizes.width, Math.max(minSizes.width, naturalWidth));\n  var height = Math.min(maxSizes.height, Math.max(minSizes.height, naturalHeight)); // Note: should always use image's natural sizes for drawing as\n  // imageData.naturalWidth === canvasData.naturalHeight when rotate % 180 === 90\n\n  var destMaxSizes = getAdjustedSizes({\n    aspectRatio: imageAspectRatio,\n    width: maxWidth,\n    height: maxHeight\n  });\n  var destMinSizes = getAdjustedSizes({\n    aspectRatio: imageAspectRatio,\n    width: minWidth,\n    height: minHeight\n  }, 'cover');\n  var destWidth = Math.min(destMaxSizes.width, Math.max(destMinSizes.width, imageNaturalWidth));\n  var destHeight = Math.min(destMaxSizes.height, Math.max(destMinSizes.height, imageNaturalHeight));\n  var params = [-destWidth / 2, -destHeight / 2, destWidth, destHeight];\n  canvas.width = normalizeDecimalNumber(width);\n  canvas.height = normalizeDecimalNumber(height);\n  context.fillStyle = fillColor;\n  context.fillRect(0, 0, width, height);\n  context.save();\n  context.translate(width / 2, height / 2);\n  context.rotate(rotate * Math.PI / 180);\n  context.scale(scaleX, scaleY);\n  context.imageSmoothingEnabled = imageSmoothingEnabled;\n  context.imageSmoothingQuality = imageSmoothingQuality;\n  context.drawImage(image, ...params.map((param) => Math.floor(normalizeDecimalNumber(param))));\n\n  context.restore();\n  return canvas;\n}\nvar fromCharCode = String.fromCharCode;\n/**\n * Get string from char code in data view.\n * @param {DataView} dataView - The data view for read.\n * @param {number} start - The start index.\n * @param {number} length - The read length.\n * @returns {string} The read result.\n */\n\nfunction getStringFromCharCode(dataView, start, length) {\n  var str = '';\n  length += start;\n\n  for (var i = start; i < length; i += 1) {\n    str += fromCharCode(dataView.getUint8(i));\n  }\n\n  return str;\n}\nvar REGEXP_DATA_URL_HEAD = /^data:.*,/;\n/**\n * Transform Data URL to array buffer.\n * @param {string} dataURL - The Data URL to transform.\n * @returns {ArrayBuffer} The result array buffer.\n */\n\nfunction dataURLToArrayBuffer(dataURL) {\n  var base64 = dataURL.replace(REGEXP_DATA_URL_HEAD, '');\n  var binary = atob(base64);\n  var arrayBuffer = new ArrayBuffer(binary.length);\n  var uint8 = new Uint8Array(arrayBuffer);\n  forEach(uint8, function (value, i) {\n    uint8[i] = binary.charCodeAt(i);\n  });\n  return arrayBuffer;\n}\n/**\n * Transform array buffer to Data URL.\n * @param {ArrayBuffer} arrayBuffer - The array buffer to transform.\n * @param {string} mimeType - The mime type of the Data URL.\n * @returns {string} The result Data URL.\n */\n\nfunction arrayBufferToDataURL(arrayBuffer, mimeType) {\n  var chunks = []; // Chunk Typed Array for better performance (#435)\n\n  var chunkSize = 8192;\n  var uint8 = new Uint8Array(arrayBuffer);\n\n  while (uint8.length > 0) {\n    // XXX: Babel's `toConsumableArray` helper will throw error in IE or Safari 9\n    // eslint-disable-next-line prefer-spread\n    chunks.push(fromCharCode.apply(null, toArray(uint8.subarray(0, chunkSize))));\n    uint8 = uint8.subarray(chunkSize);\n  }\n\n  return \"data:\".concat(mimeType, \";base64,\").concat(btoa(chunks.join('')));\n}\n/**\n * Get orientation value from given array buffer.\n * @param {ArrayBuffer} arrayBuffer - The array buffer to read.\n * @returns {number} The read orientation value.\n */\n\nfunction resetAndGetOrientation(arrayBuffer) {\n  var dataView = new DataView(arrayBuffer);\n  var orientation; // Ignores range error when the image does not have correct Exif information\n\n  try {\n    var littleEndian;\n    var app1Start;\n    var ifdStart; // Only handle JPEG image (start by 0xFFD8)\n\n    if (dataView.getUint8(0) === 0xFF && dataView.getUint8(1) === 0xD8) {\n      var length = dataView.byteLength;\n      var offset = 2;\n\n      while (offset + 1 < length) {\n        if (dataView.getUint8(offset) === 0xFF && dataView.getUint8(offset + 1) === 0xE1) {\n          app1Start = offset;\n          break;\n        }\n\n        offset += 1;\n      }\n    }\n\n    if (app1Start) {\n      var exifIDCode = app1Start + 4;\n      var tiffOffset = app1Start + 10;\n\n      if (getStringFromCharCode(dataView, exifIDCode, 4) === 'Exif') {\n        var endianness = dataView.getUint16(tiffOffset);\n        littleEndian = endianness === 0x4949;\n\n        if (littleEndian || endianness === 0x4D4D\n        /* bigEndian */\n        ) {\n            if (dataView.getUint16(tiffOffset + 2, littleEndian) === 0x002A) {\n              var firstIFDOffset = dataView.getUint32(tiffOffset + 4, littleEndian);\n\n              if (firstIFDOffset >= 0x00000008) {\n                ifdStart = tiffOffset + firstIFDOffset;\n              }\n            }\n          }\n      }\n    }\n\n    if (ifdStart) {\n      var _length = dataView.getUint16(ifdStart, littleEndian);\n\n      var _offset;\n\n      var i;\n\n      for (i = 0; i < _length; i += 1) {\n        _offset = ifdStart + i * 12 + 2;\n\n        if (dataView.getUint16(_offset, littleEndian) === 0x0112\n        /* Orientation */\n        ) {\n            // 8 is the offset of the current tag's value\n            _offset += 8; // Get the original orientation value\n\n            orientation = dataView.getUint16(_offset, littleEndian); // Override the orientation with its default value\n\n            dataView.setUint16(_offset, 1, littleEndian);\n            break;\n          }\n      }\n    }\n  } catch (error) {\n    orientation = 1;\n  }\n\n  return orientation;\n}\n/**\n * Parse Exif Orientation value.\n * @param {number} orientation - The orientation to parse.\n * @returns {Object} The parsed result.\n */\n\nfunction parseOrientation(orientation) {\n  var rotate = 0;\n  var scaleX = 1;\n  var scaleY = 1;\n\n  switch (orientation) {\n    // Flip horizontal\n    case 2:\n      scaleX = -1;\n      break;\n    // Rotate left 180��\n\n    case 3:\n      rotate = -180;\n      break;\n    // Flip vertical\n\n    case 4:\n      scaleY = -1;\n      break;\n    // Flip vertical and rotate right 90��\n\n    case 5:\n      rotate = 90;\n      scaleY = -1;\n      break;\n    // Rotate right 90��\n\n    case 6:\n      rotate = 90;\n      break;\n    // Flip horizontal and rotate right 90��\n\n    case 7:\n      rotate = 90;\n      scaleX = -1;\n      break;\n    // Rotate left 90��\n\n    case 8:\n      rotate = -90;\n      break;\n\n    default:\n  }\n\n  return {\n    rotate: rotate,\n    scaleX: scaleX,\n    scaleY: scaleY\n  };\n}\n\n    return {\n        isNaN: isNaN,\n        isNumber: isNumber,\n        isPositiveNumber: isPositiveNumber,\n        isUndefined: isUndefined,\n        isObject: isObject,\n        isPlainObject: isPlainObject,\n        isFunction: isFunction,\n        toArray: toArray,\n        forEach: forEach,\n        assign: assign,\n        normalizeDecimalNumber: normalizeDecimalNumber,\n        setStyle: setStyle,\n        hasClass: hasClass,\n        addClass: addClass,\n        removeClass: removeClass,\n        toggleClass: toggleClass,\n        toParamCase: toParamCase,\n        getData: getData,\n        setData: setData,\n        removeData: removeData,\n        removeListener: removeListener,\n        addListener: addListener,\n        dispatchEvent: dispatchEvent,\n        getOffset: getOffset,\n        isCrossOriginURL: isCrossOriginURL,\n        addTimestamp: addTimestamp,\n        getTransforms: getTransforms,\n        getMaxZoomRatio: getMaxZoomRatio,\n        getPointer: getPointer,\n        getPointersCenter: getPointersCenter,\n        getAdjustedSizes: getAdjustedSizes,\n        getRotatedSizes: getRotatedSizes,\n        getSourceCanvas: getSourceCanvas,\n        getStringFromCharCode: getStringFromCharCode,\n        dataURLToArrayBuffer: dataURLToArrayBuffer,\n        arrayBufferToDataURL: arrayBufferToDataURL,\n        resetAndGetOrientation: resetAndGetOrientation,\n        parseOrientation: parseOrientation\n    };\n});\ndefine('skylark-cropperjs/render',[\n    './constants',\n    './utilities'\n], function (constants, utilities) {\n    'use strict';\n    return {\n        render() {\n            this.initContainer();\n            this.initCanvas();\n            this.initCropBox();\n            this.renderCanvas();\n            if (this.cropped) {\n                this.renderCropBox();\n            }\n        },\n        initContainer() {\n            const {element, options, container, cropper} = this;\n            utilities.addClass(cropper, constants.CLASS_HIDDEN);\n            utilities.removeClass(element, constants.CLASS_HIDDEN);\n            const containerData = {\n                width: Math.max(container.offsetWidth, Number(options.minContainerWidth) || 200),\n                height: Math.max(container.offsetHeight, Number(options.minContainerHeight) || 100)\n            };\n            this.containerData = containerData;\n            utilities.setStyle(cropper, {\n                width: containerData.width,\n                height: containerData.height\n            });\n            utilities.addClass(element, constants.CLASS_HIDDEN);\n            utilities.removeClass(cropper, constants.CLASS_HIDDEN);\n        },\n        initCanvas() {\n            const {containerData, imageData} = this;\n            const {viewMode} = this.options;\n            const rotated = Math.abs(imageData.rotate) % 180 === 90;\n            const naturalWidth = rotated ? imageData.naturalHeight : imageData.naturalWidth;\n            const naturalHeight = rotated ? imageData.naturalWidth : imageData.naturalHeight;\n            const aspectRatio = naturalWidth / naturalHeight;\n            let canvasWidth = containerData.width;\n            let canvasHeight = containerData.height;\n            if (containerData.height * aspectRatio > containerData.width) {\n                if (viewMode === 3) {\n                    canvasWidth = containerData.height * aspectRatio;\n                } else {\n                    canvasHeight = containerData.width / aspectRatio;\n                }\n            } else if (viewMode === 3) {\n                canvasHeight = containerData.width / aspectRatio;\n            } else {\n                canvasWidth = containerData.height * aspectRatio;\n            }\n            const canvasData = {\n                aspectRatio,\n                naturalWidth,\n                naturalHeight,\n                width: canvasWidth,\n                height: canvasHeight\n            };\n            canvasData.left = (containerData.width - canvasWidth) / 2;\n            canvasData.top = (containerData.height - canvasHeight) / 2;\n            canvasData.oldLeft = canvasData.left;\n            canvasData.oldTop = canvasData.top;\n            this.canvasData = canvasData;\n            this.limited = viewMode === 1 || viewMode === 2;\n            this.limitCanvas(true, true);\n            this.initialImageData = utilities.assign({}, imageData);\n            this.initialCanvasData = utilities.assign({}, canvasData);\n        },\n        limitCanvas(sizeLimited, positionLimited) {\n            const {options, containerData, canvasData, cropBoxData} = this;\n            const {viewMode} = options;\n            const {aspectRatio} = canvasData;\n            const cropped = this.cropped && cropBoxData;\n            if (sizeLimited) {\n                let minCanvasWidth = Number(options.minCanvasWidth) || 0;\n                let minCanvasHeight = Number(options.minCanvasHeight) || 0;\n                if (viewMode > 1) {\n                    minCanvasWidth = Math.max(minCanvasWidth, containerData.width);\n                    minCanvasHeight = Math.max(minCanvasHeight, containerData.height);\n                    if (viewMode === 3) {\n                        if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n                            minCanvasWidth = minCanvasHeight * aspectRatio;\n                        } else {\n                            minCanvasHeight = minCanvasWidth / aspectRatio;\n                        }\n                    }\n                } else if (viewMode > 0) {\n                    if (minCanvasWidth) {\n                        minCanvasWidth = Math.max(minCanvasWidth, cropped ? cropBoxData.width : 0);\n                    } else if (minCanvasHeight) {\n                        minCanvasHeight = Math.max(minCanvasHeight, cropped ? cropBoxData.height : 0);\n                    } else if (cropped) {\n                        minCanvasWidth = cropBoxData.width;\n                        minCanvasHeight = cropBoxData.height;\n                        if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n                            minCanvasWidth = minCanvasHeight * aspectRatio;\n                        } else {\n                            minCanvasHeight = minCanvasWidth / aspectRatio;\n                        }\n                    }\n                }\n                ({\n                    width: minCanvasWidth,\n                    height: minCanvasHeight\n                } = utilities.getAdjustedSizes({\n                    aspectRatio,\n                    width: minCanvasWidth,\n                    height: minCanvasHeight\n                }));\n                canvasData.minWidth = minCanvasWidth;\n                canvasData.minHeight = minCanvasHeight;\n                canvasData.maxWidth = Infinity;\n                canvasData.maxHeight = Infinity;\n            }\n            if (positionLimited) {\n                if (viewMode > (cropped ? 0 : 1)) {\n                    const newCanvasLeft = containerData.width - canvasData.width;\n                    const newCanvasTop = containerData.height - canvasData.height;\n                    canvasData.minLeft = Math.min(0, newCanvasLeft);\n                    canvasData.minTop = Math.min(0, newCanvasTop);\n                    canvasData.maxLeft = Math.max(0, newCanvasLeft);\n                    canvasData.maxTop = Math.max(0, newCanvasTop);\n                    if (cropped && this.limited) {\n                        canvasData.minLeft = Math.min(cropBoxData.left, cropBoxData.left + (cropBoxData.width - canvasData.width));\n                        canvasData.minTop = Math.min(cropBoxData.top, cropBoxData.top + (cropBoxData.height - canvasData.height));\n                        canvasData.maxLeft = cropBoxData.left;\n                        canvasData.maxTop = cropBoxData.top;\n                        if (viewMode === 2) {\n                            if (canvasData.width >= containerData.width) {\n                                canvasData.minLeft = Math.min(0, newCanvasLeft);\n                                canvasData.maxLeft = Math.max(0, newCanvasLeft);\n                            }\n                            if (canvasData.height >= containerData.height) {\n                                canvasData.minTop = Math.min(0, newCanvasTop);\n                                canvasData.maxTop = Math.max(0, newCanvasTop);\n                            }\n                        }\n                    }\n                } else {\n                    canvasData.minLeft = -canvasData.width;\n                    canvasData.minTop = -canvasData.height;\n                    canvasData.maxLeft = containerData.width;\n                    canvasData.maxTop = containerData.height;\n                }\n            }\n        },\n        renderCanvas(changed, transformed) {\n            const {canvasData, imageData} = this;\n            if (transformed) {\n                const {\n                    width: naturalWidth,\n                    height: naturalHeight\n                } = utilities.getRotatedSizes({\n                    width: imageData.naturalWidth * Math.abs(imageData.scaleX || 1),\n                    height: imageData.naturalHeight * Math.abs(imageData.scaleY || 1),\n                    degree: imageData.rotate || 0\n                });\n                const width = canvasData.width * (naturalWidth / canvasData.naturalWidth);\n                const height = canvasData.height * (naturalHeight / canvasData.naturalHeight);\n                canvasData.left -= (width - canvasData.width) / 2;\n                canvasData.top -= (height - canvasData.height) / 2;\n                canvasData.width = width;\n                canvasData.height = height;\n                canvasData.aspectRatio = naturalWidth / naturalHeight;\n                canvasData.naturalWidth = naturalWidth;\n                canvasData.naturalHeight = naturalHeight;\n                this.limitCanvas(true, false);\n            }\n            if (canvasData.width > canvasData.maxWidth || canvasData.width < canvasData.minWidth) {\n                canvasData.left = canvasData.oldLeft;\n            }\n            if (canvasData.height > canvasData.maxHeight || canvasData.height < canvasData.minHeight) {\n                canvasData.top = canvasData.oldTop;\n            }\n            canvasData.width = Math.min(Math.max(canvasData.width, canvasData.minWidth), canvasData.maxWidth);\n            canvasData.height = Math.min(Math.max(canvasData.height, canvasData.minHeight), canvasData.maxHeight);\n            this.limitCanvas(false, true);\n            canvasData.left = Math.min(Math.max(canvasData.left, canvasData.minLeft), canvasData.maxLeft);\n            canvasData.top = Math.min(Math.max(canvasData.top, canvasData.minTop), canvasData.maxTop);\n            canvasData.oldLeft = canvasData.left;\n            canvasData.oldTop = canvasData.top;\n            utilities.setStyle(this.canvas, utilities.assign({\n                width: canvasData.width,\n                height: canvasData.height\n            }, utilities.getTransforms({\n                translateX: canvasData.left,\n                translateY: canvasData.top\n            })));\n            this.renderImage(changed);\n            if (this.cropped && this.limited) {\n                this.limitCropBox(true, true);\n            }\n        },\n        renderImage(changed) {\n            const {canvasData, imageData} = this;\n            const width = imageData.naturalWidth * (canvasData.width / canvasData.naturalWidth);\n            const height = imageData.naturalHeight * (canvasData.height / canvasData.naturalHeight);\n            utilities.assign(imageData, {\n                width,\n                height,\n                left: (canvasData.width - width) / 2,\n                top: (canvasData.height - height) / 2\n            });\n            utilities.setStyle(this.image, utilities.assign({\n                width: imageData.width,\n                height: imageData.height\n            }, utilities.getTransforms(utilities.assign({\n                translateX: imageData.left,\n                translateY: imageData.top\n            }, imageData))));\n            if (changed) {\n                this.output();\n            }\n        },\n        initCropBox() {\n            const {options, canvasData} = this;\n            const aspectRatio = options.aspectRatio || options.initialAspectRatio;\n            const autoCropArea = Number(options.autoCropArea) || 0.8;\n            const cropBoxData = {\n                width: canvasData.width,\n                height: canvasData.height\n            };\n            if (aspectRatio) {\n                if (canvasData.height * aspectRatio > canvasData.width) {\n                    cropBoxData.height = cropBoxData.width / aspectRatio;\n                } else {\n                    cropBoxData.width = cropBoxData.height * aspectRatio;\n                }\n            }\n            this.cropBoxData = cropBoxData;\n            this.limitCropBox(true, true);\n            cropBoxData.width = Math.min(Math.max(cropBoxData.width, cropBoxData.minWidth), cropBoxData.maxWidth);\n            cropBoxData.height = Math.min(Math.max(cropBoxData.height, cropBoxData.minHeight), cropBoxData.maxHeight);\n            cropBoxData.width = Math.max(cropBoxData.minWidth, cropBoxData.width * autoCropArea);\n            cropBoxData.height = Math.max(cropBoxData.minHeight, cropBoxData.height * autoCropArea);\n            cropBoxData.left = canvasData.left + (canvasData.width - cropBoxData.width) / 2;\n            cropBoxData.top = canvasData.top + (canvasData.height - cropBoxData.height) / 2;\n            cropBoxData.oldLeft = cropBoxData.left;\n            cropBoxData.oldTop = cropBoxData.top;\n            this.initialCropBoxData = utilities.assign({}, cropBoxData);\n        },\n        limitCropBox(sizeLimited, positionLimited) {\n            const {options, containerData, canvasData, cropBoxData, limited} = this;\n            const {aspectRatio} = options;\n            if (sizeLimited) {\n                let minCropBoxWidth = Number(options.minCropBoxWidth) || 0;\n                let minCropBoxHeight = Number(options.minCropBoxHeight) || 0;\n                let maxCropBoxWidth = limited ? Math.min(containerData.width, canvasData.width, canvasData.width + canvasData.left, containerData.width - canvasData.left) : containerData.width;\n                let maxCropBoxHeight = limited ? Math.min(containerData.height, canvasData.height, canvasData.height + canvasData.top, containerData.height - canvasData.top) : containerData.height;\n                minCropBoxWidth = Math.min(minCropBoxWidth, containerData.width);\n                minCropBoxHeight = Math.min(minCropBoxHeight, containerData.height);\n                if (aspectRatio) {\n                    if (minCropBoxWidth && minCropBoxHeight) {\n                        if (minCropBoxHeight * aspectRatio > minCropBoxWidth) {\n                            minCropBoxHeight = minCropBoxWidth / aspectRatio;\n                        } else {\n                            minCropBoxWidth = minCropBoxHeight * aspectRatio;\n                        }\n                    } else if (minCropBoxWidth) {\n                        minCropBoxHeight = minCropBoxWidth / aspectRatio;\n                    } else if (minCropBoxHeight) {\n                        minCropBoxWidth = minCropBoxHeight * aspectRatio;\n                    }\n                    if (maxCropBoxHeight * aspectRatio > maxCropBoxWidth) {\n                        maxCropBoxHeight = maxCropBoxWidth / aspectRatio;\n                    } else {\n                        maxCropBoxWidth = maxCropBoxHeight * aspectRatio;\n                    }\n                }\n                cropBoxData.minWidth = Math.min(minCropBoxWidth, maxCropBoxWidth);\n                cropBoxData.minHeight = Math.min(minCropBoxHeight, maxCropBoxHeight);\n                cropBoxData.maxWidth = maxCropBoxWidth;\n                cropBoxData.maxHeight = maxCropBoxHeight;\n            }\n            if (positionLimited) {\n                if (limited) {\n                    cropBoxData.minLeft = Math.max(0, canvasData.left);\n                    cropBoxData.minTop = Math.max(0, canvasData.top);\n                    cropBoxData.maxLeft = Math.min(containerData.width, canvasData.left + canvasData.width) - cropBoxData.width;\n                    cropBoxData.maxTop = Math.min(containerData.height, canvasData.top + canvasData.height) - cropBoxData.height;\n                } else {\n                    cropBoxData.minLeft = 0;\n                    cropBoxData.minTop = 0;\n                    cropBoxData.maxLeft = containerData.width - cropBoxData.width;\n                    cropBoxData.maxTop = containerData.height - cropBoxData.height;\n                }\n            }\n        },\n        renderCropBox() {\n            const {options, containerData, cropBoxData} = this;\n            if (cropBoxData.width > cropBoxData.maxWidth || cropBoxData.width < cropBoxData.minWidth) {\n                cropBoxData.left = cropBoxData.oldLeft;\n            }\n            if (cropBoxData.height > cropBoxData.maxHeight || cropBoxData.height < cropBoxData.minHeight) {\n                cropBoxData.top = cropBoxData.oldTop;\n            }\n            cropBoxData.width = Math.min(Math.max(cropBoxData.width, cropBoxData.minWidth), cropBoxData.maxWidth);\n            cropBoxData.height = Math.min(Math.max(cropBoxData.height, cropBoxData.minHeight), cropBoxData.maxHeight);\n            this.limitCropBox(false, true);\n            cropBoxData.left = Math.min(Math.max(cropBoxData.left, cropBoxData.minLeft), cropBoxData.maxLeft);\n            cropBoxData.top = Math.min(Math.max(cropBoxData.top, cropBoxData.minTop), cropBoxData.maxTop);\n            cropBoxData.oldLeft = cropBoxData.left;\n            cropBoxData.oldTop = cropBoxData.top;\n            if (options.movable && options.cropBoxMovable) {\n                utilities.setData(this.face, constants.DATA_ACTION, cropBoxData.width >= containerData.width && cropBoxData.height >= containerData.height ? constants.ACTION_MOVE : constants.ACTION_ALL);\n            }\n            utilities.setStyle(this.cropBox, utilities.assign({\n                width: cropBoxData.width,\n                height: cropBoxData.height\n            }, utilities.getTransforms({\n                translateX: cropBoxData.left,\n                translateY: cropBoxData.top\n            })));\n            if (this.cropped && this.limited) {\n                this.limitCanvas(true, true);\n            }\n            if (!this.disabled) {\n                this.output();\n            }\n        },\n        output() {\n            this.preview();\n            utilities.dispatchEvent(this.element, constants.EVENT_CROP, this.getData());\n        }\n    };\n});\ndefine('skylark-cropperjs/preview',[\n    './constants',\n    './utilities'\n], function (constants, utilities) {\n    'use strict';\n    return {\n        initPreview() {\n            const {element, crossOrigin} = this;\n            const {preview} = this.options;\n            const url = crossOrigin ? this.crossOriginUrl : this.url;\n            const alt = element.alt || 'The image to preview';\n            const image = document.createElement('img');\n            if (crossOrigin) {\n                image.crossOrigin = crossOrigin;\n            }\n            image.src = url;\n            image.alt = alt;\n            this.viewBox.appendChild(image);\n            this.viewBoxImage = image;\n            if (!preview) {\n                return;\n            }\n            let previews = preview;\n            if (typeof preview === 'string') {\n                previews = element.ownerDocument.querySelectorAll(preview);\n            } else if (preview.querySelector) {\n                previews = [preview];\n            }\n            this.previews = previews;\n            utilities.forEach(previews, el => {\n                const img = document.createElement('img');\n                utilities.setData(el, constants.DATA_PREVIEW, {\n                    width: el.offsetWidth,\n                    height: el.offsetHeight,\n                    html: el.innerHTML\n                });\n                if (crossOrigin) {\n                    img.crossOrigin = crossOrigin;\n                }\n                img.src = url;\n                img.alt = alt;\n                img.style.cssText = 'display:block;' + 'width:100%;' + 'height:auto;' + 'min-width:0!important;' + 'min-height:0!important;' + 'max-width:none!important;' + 'max-height:none!important;' + 'image-orientation:0deg!important;\"';\n                el.innerHTML = '';\n                el.appendChild(img);\n            });\n        },\n        resetPreview() {\n            utilities.forEach(this.previews, element => {\n                const data = utilities.getData(element, constants.DATA_PREVIEW);\n                utilities.setStyle(element, {\n                    width: data.width,\n                    height: data.height\n                });\n                element.innerHTML = data.html;\n                utilities.removeData(element, constants.DATA_PREVIEW);\n            });\n        },\n        preview() {\n            const {imageData, canvasData, cropBoxData} = this;\n            const {\n                width: cropBoxWidth,\n                height: cropBoxHeight\n            } = cropBoxData;\n            const {width, height} = imageData;\n            const left = cropBoxData.left - canvasData.left - imageData.left;\n            const top = cropBoxData.top - canvasData.top - imageData.top;\n            if (!this.cropped || this.disabled) {\n                return;\n            }\n            utilities.setStyle(this.viewBoxImage, utilities.assign({\n                width,\n                height\n            }, utilities.getTransforms(utilities.assign({\n                translateX: -left,\n                translateY: -top\n            }, imageData))));\n            utilities.forEach(this.previews, element => {\n                const data = utilities.getData(element, constants.DATA_PREVIEW);\n                const originalWidth = data.width;\n                const originalHeight = data.height;\n                let newWidth = originalWidth;\n                let newHeight = originalHeight;\n                let ratio = 1;\n                if (cropBoxWidth) {\n                    ratio = originalWidth / cropBoxWidth;\n                    newHeight = cropBoxHeight * ratio;\n                }\n                if (cropBoxHeight && newHeight > originalHeight) {\n                    ratio = originalHeight / cropBoxHeight;\n                    newWidth = cropBoxWidth * ratio;\n                    newHeight = originalHeight;\n                }\n                utilities.setStyle(element, {\n                    width: newWidth,\n                    height: newHeight\n                });\n                utilities.setStyle(element.getElementsByTagName('img')[0], utilities.assign({\n                    width: width * ratio,\n                    height: height * ratio\n                }, utilities.getTransforms(utilities.assign({\n                    translateX: -left * ratio,\n                    translateY: -top * ratio\n                }, imageData))));\n            });\n        }\n    };\n});\ndefine('skylark-cropperjs/events',[\n    './constants',\n    './utilities'\n], function (constants, utilities) {\n    'use strict';\n    return {\n        bind() {\n            const {element, options, cropper} = this;\n            if (utilities.isFunction(options.cropstart)) {\n                utilities.addListener(element, constants.EVENT_CROP_START, options.cropstart);\n            }\n            if (utilities.isFunction(options.cropmove)) {\n                utilities.addListener(element, constants.EVENT_CROP_MOVE, options.cropmove);\n            }\n            if (utilities.isFunction(options.cropend)) {\n                utilities.addListener(element, constants.EVENT_CROP_END, options.cropend);\n            }\n            if (utilities.isFunction(options.crop)) {\n                utilities.addListener(element, constants.EVENT_CROP, options.crop);\n            }\n            if (utilities.isFunction(options.zoom)) {\n                utilities.addListener(element, constants.EVENT_ZOOM, options.zoom);\n            }\n            utilities.addListener(cropper, constants.EVENT_POINTER_DOWN, this.onCropStart = this.cropStart.bind(this));\n            if (options.zoomable && options.zoomOnWheel) {\n                utilities.addListener(cropper, constants.EVENT_WHEEL, this.onWheel = this.wheel.bind(this), {\n                    passive: false,\n                    capture: true\n                });\n            }\n            if (options.toggleDragModeOnDblclick) {\n                utilities.addListener(cropper, constants.EVENT_DBLCLICK, this.onDblclick = this.dblclick.bind(this));\n            }\n            utilities.addListener(element.ownerDocument, constants.EVENT_POINTER_MOVE, this.onCropMove = this.cropMove.bind(this));\n            utilities.addListener(element.ownerDocument, constants.EVENT_POINTER_UP, this.onCropEnd = this.cropEnd.bind(this));\n            if (options.responsive) {\n                utilities.addListener(window, constants.EVENT_RESIZE, this.onResize = this.resize.bind(this));\n            }\n        },\n        unbind() {\n            const {element, options, cropper} = this;\n            if (utilities.isFunction(options.cropstart)) {\n                utilities.removeListener(element, constants.EVENT_CROP_START, options.cropstart);\n            }\n            if (utilities.isFunction(options.cropmove)) {\n                utilities.removeListener(element, constants.EVENT_CROP_MOVE, options.cropmove);\n            }\n            if (utilities.isFunction(options.cropend)) {\n                utilities.removeListener(element, constants.EVENT_CROP_END, options.cropend);\n            }\n            if (utilities.isFunction(options.crop)) {\n                utilities.removeListener(element, constants.EVENT_CROP, options.crop);\n            }\n            if (utilities.isFunction(options.zoom)) {\n                utilities.removeListener(element, constants.EVENT_ZOOM, options.zoom);\n            }\n            utilities.removeListener(cropper, constants.EVENT_POINTER_DOWN, this.onCropStart);\n            if (options.zoomable && options.zoomOnWheel) {\n                utilities.removeListener(cropper, constants.EVENT_WHEEL, this.onWheel, {\n                    passive: false,\n                    capture: true\n                });\n            }\n            if (options.toggleDragModeOnDblclick) {\n                utilities.removeListener(cropper, constants.EVENT_DBLCLICK, this.onDblclick);\n            }\n            utilities.removeListener(element.ownerDocument, constants.EVENT_POINTER_MOVE, this.onCropMove);\n            utilities.removeListener(element.ownerDocument, constants.EVENT_POINTER_UP, this.onCropEnd);\n            if (options.responsive) {\n                utilities.removeListener(window, constants.EVENT_RESIZE, this.onResize);\n            }\n        }\n    };\n});\ndefine('skylark-cropperjs/handlers',[\n    './constants',\n    './utilities'\n], function (constants, utilities) {\n    'use strict';\n    return {\n        resize() {\n            const {options, container, containerData} = this;\n            const minContainerWidth = Number(options.minContainerWidth) || constants.MIN_CONTAINER_WIDTH;\n            const minContainerHeight = Number(options.minContainerHeight) || constants.MIN_CONTAINER_HEIGHT;\n            if (this.disabled || containerData.width <= minContainerWidth || containerData.height <= minContainerHeight) {\n                return;\n            }\n            const ratio = container.offsetWidth / containerData.width;\n            if (ratio !== 1 || container.offsetHeight !== containerData.height) {\n                let canvasData;\n                let cropBoxData;\n                if (options.restore) {\n                    canvasData = this.getCanvasData();\n                    cropBoxData = this.getCropBoxData();\n                }\n                this.render();\n                if (options.restore) {\n                    this.setCanvasData(utilities.forEach(canvasData, (n, i) => {\n                        canvasData[i] = n * ratio;\n                    }));\n                    this.setCropBoxData(utilities.forEach(cropBoxData, (n, i) => {\n                        cropBoxData[i] = n * ratio;\n                    }));\n                }\n            }\n        },\n        dblclick() {\n            if (this.disabled || this.options.dragMode === constants.DRAG_MODE_NONE) {\n                return;\n            }\n            this.setDragMode(utilities.hasClass(this.dragBox, constants.CLASS_CROP) ? constants.DRAG_MODE_MOVE : constants.DRAG_MODE_CROP);\n        },\n        wheel(event) {\n            const ratio = Number(this.options.wheelZoomRatio) || 0.1;\n            let delta = 1;\n            if (this.disabled) {\n                return;\n            }\n            event.preventDefault();\n            if (this.wheeling) {\n                return;\n            }\n            this.wheeling = true;\n            setTimeout(() => {\n                this.wheeling = false;\n            }, 50);\n            if (event.deltaY) {\n                delta = event.deltaY > 0 ? 1 : -1;\n            } else if (event.wheelDelta) {\n                delta = -event.wheelDelta / 120;\n            } else if (event.detail) {\n                delta = event.detail > 0 ? 1 : -1;\n            }\n            this.zoom(-delta * ratio, event);\n        },\n        cropStart(event) {\n            const {buttons, button} = event;\n            if (this.disabled || (event.type === 'mousedown' || event.type === 'pointerdown' && event.pointerType === 'mouse') && (utilities.isNumber(buttons) && buttons !== 1 || utilities.isNumber(button) && button !== 0 || event.ctrlKey)) {\n                return;\n            }\n            const {options, pointers} = this;\n            let action;\n            if (event.changedTouches) {\n                utilities.forEach(event.changedTouches, touch => {\n                    pointers[touch.identifier] = utilities.getPointer(touch);\n                });\n            } else {\n                pointers[event.pointerId || 0] = utilities.getPointer(event);\n            }\n            if (Object.keys(pointers).length > 1 && options.zoomable && options.zoomOnTouch) {\n                action = constants.ACTION_ZOOM;\n            } else {\n                action = utilities.getData(event.target, constants.DATA_ACTION);\n            }\n            if (!constants.REGEXP_ACTIONS.test(action)) {\n                return;\n            }\n            if (utilities.dispatchEvent(this.element, constants.EVENT_CROP_START, {\n                    originalEvent: event,\n                    action\n                }) === false) {\n                return;\n            }\n            event.preventDefault();\n            this.action = action;\n            this.cropping = false;\n            if (action === constants.ACTION_CROP) {\n                this.cropping = true;\n                utilities.addClass(this.dragBox, constants.CLASS_MODAL);\n            }\n        },\n        cropMove(event) {\n            const {action} = this;\n            if (this.disabled || !action) {\n                return;\n            }\n            const {pointers} = this;\n            event.preventDefault();\n            if (utilities.dispatchEvent(this.element, constants.EVENT_CROP_MOVE, {\n                    originalEvent: event,\n                    action\n                }) === false) {\n                return;\n            }\n            if (event.changedTouches) {\n                utilities.forEach(event.changedTouches, touch => {\n                    utilities.assign(pointers[touch.identifier] || {}, utilities.getPointer(touch, true));\n                });\n            } else {\n                utilities.assign(pointers[event.pointerId || 0] || {}, utilities.getPointer(event, true));\n            }\n            this.change(event);\n        },\n        cropEnd(event) {\n            if (this.disabled) {\n                return;\n            }\n            const {action, pointers} = this;\n            if (event.changedTouches) {\n                utilities.forEach(event.changedTouches, touch => {\n                    delete pointers[touch.identifier];\n                });\n            } else {\n                delete pointers[event.pointerId || 0];\n            }\n            if (!action) {\n                return;\n            }\n            event.preventDefault();\n            if (!Object.keys(pointers).length) {\n                this.action = '';\n            }\n            if (this.cropping) {\n                this.cropping = false;\n                utilities.toggleClass(this.dragBox, constants.CLASS_MODAL, this.cropped && this.options.modal);\n            }\n            utilities.dispatchEvent(this.element, constants.EVENT_CROP_END, {\n                originalEvent: event,\n                action\n            });\n        }\n    };\n});\ndefine('skylark-cropperjs/change',[\n    './constants',\n    './utilities'\n], function (constants, utilities) {\n    'use strict';\n    return {\n        change(event) {\n            const {options, canvasData, containerData, cropBoxData, pointers} = this;\n            let {action} = this;\n            let {aspectRatio} = options;\n            let {left, top, width, height} = cropBoxData;\n            const right = left + width;\n            const bottom = top + height;\n            let minLeft = 0;\n            let minTop = 0;\n            let maxWidth = containerData.width;\n            let maxHeight = containerData.height;\n            let renderable = true;\n            let offset;\n            if (!aspectRatio && event.shiftKey) {\n                aspectRatio = width && height ? width / height : 1;\n            }\n            if (this.limited) {\n                ({minLeft, minTop} = cropBoxData);\n                maxWidth = minLeft + Math.min(containerData.width, canvasData.width, canvasData.left + canvasData.width);\n                maxHeight = minTop + Math.min(containerData.height, canvasData.height, canvasData.top + canvasData.height);\n            }\n            const pointer = pointers[Object.keys(pointers)[0]];\n            const range = {\n                x: pointer.endX - pointer.startX,\n                y: pointer.endY - pointer.startY\n            };\n            const check = side => {\n                switch (side) {\n                case constants.ACTION_EAST:\n                    if (right + range.x > maxWidth) {\n                        range.x = maxWidth - right;\n                    }\n                    break;\n                case constants.ACTION_WEST:\n                    if (left + range.x < minLeft) {\n                        range.x = minLeft - left;\n                    }\n                    break;\n                case constants.ACTION_NORTH:\n                    if (top + range.y < minTop) {\n                        range.y = minTop - top;\n                    }\n                    break;\n                case constants.ACTION_SOUTH:\n                    if (bottom + range.y > maxHeight) {\n                        range.y = maxHeight - bottom;\n                    }\n                    break;\n                default:\n                }\n            };\n            switch (action) {\n            case constants.ACTION_ALL:\n                left += range.x;\n                top += range.y;\n                break;\n            case constants.ACTION_EAST:\n                if (range.x >= 0 && (right >= maxWidth || aspectRatio && (top <= minTop || bottom >= maxHeight))) {\n                    renderable = false;\n                    break;\n                }\n                check(constants.ACTION_EAST);\n                width += range.x;\n                if (width < 0) {\n                    action = constants.ACTION_WEST;\n                    width = -width;\n                    left -= width;\n                }\n                if (aspectRatio) {\n                    height = width / aspectRatio;\n                    top += (cropBoxData.height - height) / 2;\n                }\n                break;\n            case constants.ACTION_NORTH:\n                if (range.y <= 0 && (top <= minTop || aspectRatio && (left <= minLeft || right >= maxWidth))) {\n                    renderable = false;\n                    break;\n                }\n                check(constants.ACTION_NORTH);\n                height -= range.y;\n                top += range.y;\n                if (height < 0) {\n                    action = constants.ACTION_SOUTH;\n                    height = -height;\n                    top -= height;\n                }\n                if (aspectRatio) {\n                    width = height * aspectRatio;\n                    left += (cropBoxData.width - width) / 2;\n                }\n                break;\n            case constants.ACTION_WEST:\n                if (range.x <= 0 && (left <= minLeft || aspectRatio && (top <= minTop || bottom >= maxHeight))) {\n                    renderable = false;\n                    break;\n                }\n                check(constants.ACTION_WEST);\n                width -= range.x;\n                left += range.x;\n                if (width < 0) {\n                    action = constants.ACTION_EAST;\n                    width = -width;\n                    left -= width;\n                }\n                if (aspectRatio) {\n                    height = width / aspectRatio;\n                    top += (cropBoxData.height - height) / 2;\n                }\n                break;\n            case constants.ACTION_SOUTH:\n                if (range.y >= 0 && (bottom >= maxHeight || aspectRatio && (left <= minLeft || right >= maxWidth))) {\n                    renderable = false;\n                    break;\n                }\n                check(constants.ACTION_SOUTH);\n                height += range.y;\n                if (height < 0) {\n                    action = constants.ACTION_NORTH;\n                    height = -height;\n                    top -= height;\n                }\n                if (aspectRatio) {\n                    width = height * aspectRatio;\n                    left += (cropBoxData.width - width) / 2;\n                }\n                break;\n            case constants.ACTION_NORTH_EAST:\n                if (aspectRatio) {\n                    if (range.y <= 0 && (top <= minTop || right >= maxWidth)) {\n                        renderable = false;\n                        break;\n                    }\n                    check(constants.ACTION_NORTH);\n                    height -= range.y;\n                    top += range.y;\n                    width = height * aspectRatio;\n                } else {\n                    check(constants.ACTION_NORTH);\n                    check(constants.ACTION_EAST);\n                    if (range.x >= 0) {\n                        if (right < maxWidth) {\n                            width += range.x;\n                        } else if (range.y <= 0 && top <= minTop) {\n                            renderable = false;\n                        }\n                    } else {\n                        width += range.x;\n                    }\n                    if (range.y <= 0) {\n                        if (top > minTop) {\n                            height -= range.y;\n                            top += range.y;\n                        }\n                    } else {\n                        height -= range.y;\n                        top += range.y;\n                    }\n                }\n                if (width < 0 && height < 0) {\n                    action = constants.ACTION_SOUTH_WEST;\n                    height = -height;\n                    width = -width;\n                    top -= height;\n                    left -= width;\n                } else if (width < 0) {\n                    action = constants.ACTION_NORTH_WEST;\n                    width = -width;\n                    left -= width;\n                } else if (height < 0) {\n                    action = constants.ACTION_SOUTH_EAST;\n                    height = -height;\n                    top -= height;\n                }\n                break;\n            case constants.ACTION_NORTH_WEST:\n                if (aspectRatio) {\n                    if (range.y <= 0 && (top <= minTop || left <= minLeft)) {\n                        renderable = false;\n                        break;\n                    }\n                    check(constants.ACTION_NORTH);\n                    height -= range.y;\n                    top += range.y;\n                    width = height * aspectRatio;\n                    left += cropBoxData.width - width;\n                } else {\n                    check(constants.ACTION_NORTH);\n                    check(constants.ACTION_WEST);\n                    if (range.x <= 0) {\n                        if (left > minLeft) {\n                            width -= range.x;\n                            left += range.x;\n                        } else if (range.y <= 0 && top <= minTop) {\n                            renderable = false;\n                        }\n                    } else {\n                        width -= range.x;\n                        left += range.x;\n                    }\n                    if (range.y <= 0) {\n                        if (top > minTop) {\n                            height -= range.y;\n                            top += range.y;\n                        }\n                    } else {\n                        height -= range.y;\n                        top += range.y;\n                    }\n                }\n                if (width < 0 && height < 0) {\n                    action = constants.ACTION_SOUTH_EAST;\n                    height = -height;\n                    width = -width;\n                    top -= height;\n                    left -= width;\n                } else if (width < 0) {\n                    action = constants.ACTION_NORTH_EAST;\n                    width = -width;\n                    left -= width;\n                } else if (height < 0) {\n                    action = constants.ACTION_SOUTH_WEST;\n                    height = -height;\n                    top -= height;\n                }\n                break;\n            case constants.ACTION_SOUTH_WEST:\n                if (aspectRatio) {\n                    if (range.x <= 0 && (left <= minLeft || bottom >= maxHeight)) {\n                        renderable = false;\n                        break;\n                    }\n                    check(constants.ACTION_WEST);\n                    width -= range.x;\n                    left += range.x;\n                    height = width / aspectRatio;\n                } else {\n                    check(constants.ACTION_SOUTH);\n                    check(constants.ACTION_WEST);\n                    if (range.x <= 0) {\n                        if (left > minLeft) {\n                            width -= range.x;\n                            left += range.x;\n                        } else if (range.y >= 0 && bottom >= maxHeight) {\n                            renderable = false;\n                        }\n                    } else {\n                        width -= range.x;\n                        left += range.x;\n                    }\n                    if (range.y >= 0) {\n                        if (bottom < maxHeight) {\n                            height += range.y;\n                        }\n                    } else {\n                        height += range.y;\n                    }\n                }\n                if (width < 0 && height < 0) {\n                    action = constants.ACTION_NORTH_EAST;\n                    height = -height;\n                    width = -width;\n                    top -= height;\n                    left -= width;\n                } else if (width < 0) {\n                    action = constants.ACTION_SOUTH_EAST;\n                    width = -width;\n                    left -= width;\n                } else if (height < 0) {\n                    action = constants.ACTION_NORTH_WEST;\n                    height = -height;\n                    top -= height;\n                }\n                break;\n            case constants.ACTION_SOUTH_EAST:\n                if (aspectRatio) {\n                    if (range.x >= 0 && (right >= maxWidth || bottom >= maxHeight)) {\n                        renderable = false;\n                        break;\n                    }\n                    check(constants.ACTION_EAST);\n                    width += range.x;\n                    height = width / aspectRatio;\n                } else {\n                    check(constants.ACTION_SOUTH);\n                    check(constants.ACTION_EAST);\n                    if (range.x >= 0) {\n                        if (right < maxWidth) {\n                            width += range.x;\n                        } else if (range.y >= 0 && bottom >= maxHeight) {\n                            renderable = false;\n                        }\n                    } else {\n                        width += range.x;\n                    }\n                    if (range.y >= 0) {\n                        if (bottom < maxHeight) {\n                            height += range.y;\n                        }\n                    } else {\n                        height += range.y;\n                    }\n                }\n                if (width < 0 && height < 0) {\n                    action = constants.ACTION_NORTH_WEST;\n                    height = -height;\n                    width = -width;\n                    top -= height;\n                    left -= width;\n                } else if (width < 0) {\n                    action = constants.ACTION_SOUTH_WEST;\n                    width = -width;\n                    left -= width;\n                } else if (height < 0) {\n                    action = constants.ACTION_NORTH_EAST;\n                    height = -height;\n                    top -= height;\n                }\n                break;\n            case constants.ACTION_MOVE:\n                this.move(range.x, range.y);\n                renderable = false;\n                break;\n            case constants.ACTION_ZOOM:\n                this.zoom(utilities.getMaxZoomRatio(pointers), event);\n                renderable = false;\n                break;\n            case constants.ACTION_CROP:\n                if (!range.x || !range.y) {\n                    renderable = false;\n                    break;\n                }\n                offset = utilities.getOffset(this.cropper);\n                left = pointer.startX - offset.left;\n                top = pointer.startY - offset.top;\n                width = cropBoxData.minWidth;\n                height = cropBoxData.minHeight;\n                if (range.x > 0) {\n                    action = range.y > 0 ? constants.ACTION_SOUTH_EAST : constants.ACTION_NORTH_EAST;\n                } else if (range.x < 0) {\n                    left -= width;\n                    action = range.y > 0 ? constants.ACTION_SOUTH_WEST : constants.ACTION_NORTH_WEST;\n                }\n                if (range.y < 0) {\n                    top -= height;\n                }\n                if (!this.cropped) {\n                    utilities.removeClass(this.cropBox, constants.CLASS_HIDDEN);\n                    this.cropped = true;\n                    if (this.limited) {\n                        this.limitCropBox(true, true);\n                    }\n                }\n                break;\n            default:\n            }\n            if (renderable) {\n                cropBoxData.width = width;\n                cropBoxData.height = height;\n                cropBoxData.left = left;\n                cropBoxData.top = top;\n                this.action = action;\n                this.renderCropBox();\n            }\n            utilities.forEach(pointers, p => {\n                p.startX = p.endX;\n                p.startY = p.endY;\n            });\n        }\n    };\n});\ndefine('skylark-cropperjs/methods',[\n    './constants',\n    './utilities'\n], function (constants, utilities) {\n    'use strict';\n    return {\n        crop() {\n            if (this.ready && !this.cropped && !this.disabled) {\n                this.cropped = true;\n                this.limitCropBox(true, true);\n                if (this.options.modal) {\n                    utilities.addClass(this.dragBox, constants.CLASS_MODAL);\n                }\n                utilities.removeClass(this.cropBox, constants.CLASS_HIDDEN);\n                this.setCropBoxData(this.initialCropBoxData);\n            }\n            return this;\n        },\n        reset() {\n            if (this.ready && !this.disabled) {\n                this.imageData = utilities.assign({}, this.initialImageData);\n                this.canvasData = utilities.assign({}, this.initialCanvasData);\n                this.cropBoxData = utilities.assign({}, this.initialCropBoxData);\n                this.renderCanvas();\n                if (this.cropped) {\n                    this.renderCropBox();\n                }\n            }\n            return this;\n        },\n        clear() {\n            if (this.cropped && !this.disabled) {\n                utilities.assign(this.cropBoxData, {\n                    left: 0,\n                    top: 0,\n                    width: 0,\n                    height: 0\n                });\n                this.cropped = false;\n                this.renderCropBox();\n                this.limitCanvas(true, true);\n                this.renderCanvas();\n                utilities.removeClass(this.dragBox, constants.CLASS_MODAL);\n                utilities.addClass(this.cropBox, constants.CLASS_HIDDEN);\n            }\n            return this;\n        },\n        replace(url, hasSameSize = false) {\n            if (!this.disabled && url) {\n                if (this.isImg) {\n                    this.element.src = url;\n                }\n                if (hasSameSize) {\n                    this.url = url;\n                    this.image.src = url;\n                    if (this.ready) {\n                        this.viewBoxImage.src = url;\n                        utilities.forEach(this.previews, element => {\n                            element.getElementsByTagName('img')[0].src = url;\n                        });\n                    }\n                } else {\n                    if (this.isImg) {\n                        this.replaced = true;\n                    }\n                    this.options.data = null;\n                    this.uncreate();\n                    this.load(url);\n                }\n            }\n            return this;\n        },\n        enable() {\n            if (this.ready && this.disabled) {\n                this.disabled = false;\n                utilities.removeClass(this.cropper, constants.CLASS_DISABLED);\n            }\n            return this;\n        },\n        disable() {\n            if (this.ready && !this.disabled) {\n                this.disabled = true;\n                utilities.addClass(this.cropper, constants.CLASS_DISABLED);\n            }\n            return this;\n        },\n        destroy() {\n            const {element} = this;\n            if (!element[constants.NAMESPACE]) {\n                return this;\n            }\n            element[constants.NAMESPACE] = undefined;\n            if (this.isImg && this.replaced) {\n                element.src = this.originalUrl;\n            }\n            this.uncreate();\n            return this;\n        },\n        move(offsetX, offsetY = offsetX) {\n            const {left, top} = this.canvasData;\n            return this.moveTo(utilities.isUndefined(offsetX) ? offsetX : left + Number(offsetX), utilities.isUndefined(offsetY) ? offsetY : top + Number(offsetY));\n        },\n        moveTo(x, y = x) {\n            const {canvasData} = this;\n            let changed = false;\n            x = Number(x);\n            y = Number(y);\n            if (this.ready && !this.disabled && this.options.movable) {\n                if (utilities.isNumber(x)) {\n                    canvasData.left = x;\n                    changed = true;\n                }\n                if (utilities.isNumber(y)) {\n                    canvasData.top = y;\n                    changed = true;\n                }\n                if (changed) {\n                    this.renderCanvas(true);\n                }\n            }\n            return this;\n        },\n        zoom(ratio, _originalEvent) {\n            const {canvasData} = this;\n            ratio = Number(ratio);\n            if (ratio < 0) {\n                ratio = 1 / (1 - ratio);\n            } else {\n                ratio = 1 + ratio;\n            }\n            return this.zoomTo(canvasData.width * ratio / canvasData.naturalWidth, null, _originalEvent);\n        },\n        zoomTo(ratio, pivot, _originalEvent) {\n            const {options, canvasData} = this;\n            const {width, height, naturalWidth, naturalHeight} = canvasData;\n            ratio = Number(ratio);\n            if (ratio >= 0 && this.ready && !this.disabled && options.zoomable) {\n                const newWidth = naturalWidth * ratio;\n                const newHeight = naturalHeight * ratio;\n                if (utilities.dispatchEvent(this.element, constants.EVENT_ZOOM, {\n                        ratio,\n                        oldRatio: width / naturalWidth,\n                        originalEvent: _originalEvent\n                    }) === false) {\n                    return this;\n                }\n                if (_originalEvent) {\n                    const {pointers} = this;\n                    const offset = utilities.getOffset(this.cropper);\n                    const center = pointers && Object.keys(pointers).length ? utilities.getPointersCenter(pointers) : {\n                        pageX: _originalEvent.pageX,\n                        pageY: _originalEvent.pageY\n                    };\n                    canvasData.left -= (newWidth - width) * ((center.pageX - offset.left - canvasData.left) / width);\n                    canvasData.top -= (newHeight - height) * ((center.pageY - offset.top - canvasData.top) / height);\n                } else if (utilities.isPlainObject(pivot) && utilities.isNumber(pivot.x) && utilities.isNumber(pivot.y)) {\n                    canvasData.left -= (newWidth - width) * ((pivot.x - canvasData.left) / width);\n                    canvasData.top -= (newHeight - height) * ((pivot.y - canvasData.top) / height);\n                } else {\n                    canvasData.left -= (newWidth - width) / 2;\n                    canvasData.top -= (newHeight - height) / 2;\n                }\n                canvasData.width = newWidth;\n                canvasData.height = newHeight;\n                this.renderCanvas(true);\n            }\n            return this;\n        },\n        rotate(degree) {\n            return this.rotateTo((this.imageData.rotate || 0) + Number(degree));\n        },\n        rotateTo(degree) {\n            degree = Number(degree);\n            if (utilities.isNumber(degree) && this.ready && !this.disabled && this.options.rotatable) {\n                this.imageData.rotate = degree % 360;\n                this.renderCanvas(true, true);\n            }\n            return this;\n        },\n        scaleX(scaleX) {\n            const {scaleY} = this.imageData;\n            return this.scale(scaleX, utilities.isNumber(scaleY) ? scaleY : 1);\n        },\n        scaleY(scaleY) {\n            const {scaleX} = this.imageData;\n            return this.scale(utilities.isNumber(scaleX) ? scaleX : 1, scaleY);\n        },\n        scale(scaleX, scaleY = scaleX) {\n            const {imageData} = this;\n            let transformed = false;\n            scaleX = Number(scaleX);\n            scaleY = Number(scaleY);\n            if (this.ready && !this.disabled && this.options.scalable) {\n                if (utilities.isNumber(scaleX)) {\n                    imageData.scaleX = scaleX;\n                    transformed = true;\n                }\n                if (utilities.isNumber(scaleY)) {\n                    imageData.scaleY = scaleY;\n                    transformed = true;\n                }\n                if (transformed) {\n                    this.renderCanvas(true, true);\n                }\n            }\n            return this;\n        },\n        getData(rounded = false) {\n            const {options, imageData, canvasData, cropBoxData} = this;\n            let data;\n            if (this.ready && this.cropped) {\n                data = {\n                    x: cropBoxData.left - canvasData.left,\n                    y: cropBoxData.top - canvasData.top,\n                    width: cropBoxData.width,\n                    height: cropBoxData.height\n                };\n                const ratio = imageData.width / imageData.naturalWidth;\n                utilities.forEach(data, (n, i) => {\n                    data[i] = n / ratio;\n                });\n                if (rounded) {\n                    const bottom = Math.round(data.y + data.height);\n                    const right = Math.round(data.x + data.width);\n                    data.x = Math.round(data.x);\n                    data.y = Math.round(data.y);\n                    data.width = right - data.x;\n                    data.height = bottom - data.y;\n                }\n            } else {\n                data = {\n                    x: 0,\n                    y: 0,\n                    width: 0,\n                    height: 0\n                };\n            }\n            if (options.rotatable) {\n                data.rotate = imageData.rotate || 0;\n            }\n            if (options.scalable) {\n                data.scaleX = imageData.scaleX || 1;\n                data.scaleY = imageData.scaleY || 1;\n            }\n            return data;\n        },\n        setData(data) {\n            const {options, imageData, canvasData} = this;\n            const cropBoxData = {};\n            if (this.ready && !this.disabled && utilities.isPlainObject(data)) {\n                let transformed = false;\n                if (options.rotatable) {\n                    if (utilities.isNumber(data.rotate) && data.rotate !== imageData.rotate) {\n                        imageData.rotate = data.rotate;\n                        transformed = true;\n                    }\n                }\n                if (options.scalable) {\n                    if (utilities.isNumber(data.scaleX) && data.scaleX !== imageData.scaleX) {\n                        imageData.scaleX = data.scaleX;\n                        transformed = true;\n                    }\n                    if (utilities.isNumber(data.scaleY) && data.scaleY !== imageData.scaleY) {\n                        imageData.scaleY = data.scaleY;\n                        transformed = true;\n                    }\n                }\n                if (transformed) {\n                    this.renderCanvas(true, true);\n                }\n                const ratio = imageData.width / imageData.naturalWidth;\n                if (utilities.isNumber(data.x)) {\n                    cropBoxData.left = data.x * ratio + canvasData.left;\n                }\n                if (utilities.isNumber(data.y)) {\n                    cropBoxData.top = data.y * ratio + canvasData.top;\n                }\n                if (utilities.isNumber(data.width)) {\n                    cropBoxData.width = data.width * ratio;\n                }\n                if (utilities.isNumber(data.height)) {\n                    cropBoxData.height = data.height * ratio;\n                }\n                this.setCropBoxData(cropBoxData);\n            }\n            return this;\n        },\n        getContainerData() {\n            return this.ready ? utilities.assign({}, this.containerData) : {};\n        },\n        getImageData() {\n            return this.sized ? utilities.assign({}, this.imageData) : {};\n        },\n        getCanvasData() {\n            const {canvasData} = this;\n            const data = {};\n            if (this.ready) {\n                utilities.forEach([\n                    'left',\n                    'top',\n                    'width',\n                    'height',\n                    'naturalWidth',\n                    'naturalHeight'\n                ], n => {\n                    data[n] = canvasData[n];\n                });\n            }\n            return data;\n        },\n        setCanvasData(data) {\n            const {canvasData} = this;\n            const {aspectRatio} = canvasData;\n            if (this.ready && !this.disabled && utilities.isPlainObject(data)) {\n                if (utilities.isNumber(data.left)) {\n                    canvasData.left = data.left;\n                }\n                if (utilities.isNumber(data.top)) {\n                    canvasData.top = data.top;\n                }\n                if (utilities.isNumber(data.width)) {\n                    canvasData.width = data.width;\n                    canvasData.height = data.width / aspectRatio;\n                } else if (utilities.isNumber(data.height)) {\n                    canvasData.height = data.height;\n                    canvasData.width = data.height * aspectRatio;\n                }\n                this.renderCanvas(true);\n            }\n            return this;\n        },\n        getCropBoxData() {\n            const {cropBoxData} = this;\n            let data;\n            if (this.ready && this.cropped) {\n                data = {\n                    left: cropBoxData.left,\n                    top: cropBoxData.top,\n                    width: cropBoxData.width,\n                    height: cropBoxData.height\n                };\n            }\n            return data || {};\n        },\n        setCropBoxData(data) {\n            const {cropBoxData} = this;\n            const {aspectRatio} = this.options;\n            let widthChanged;\n            let heightChanged;\n            if (this.ready && this.cropped && !this.disabled && utilities.isPlainObject(data)) {\n                if (utilities.isNumber(data.left)) {\n                    cropBoxData.left = data.left;\n                }\n                if (utilities.isNumber(data.top)) {\n                    cropBoxData.top = data.top;\n                }\n                if (utilities.isNumber(data.width) && data.width !== cropBoxData.width) {\n                    widthChanged = true;\n                    cropBoxData.width = data.width;\n                }\n                if (utilities.isNumber(data.height) && data.height !== cropBoxData.height) {\n                    heightChanged = true;\n                    cropBoxData.height = data.height;\n                }\n                if (aspectRatio) {\n                    if (widthChanged) {\n                        cropBoxData.height = cropBoxData.width / aspectRatio;\n                    } else if (heightChanged) {\n                        cropBoxData.width = cropBoxData.height * aspectRatio;\n                    }\n                }\n                this.renderCropBox();\n            }\n            return this;\n        },\n        getCroppedCanvas(options = {}) {\n            if (!this.ready || !window.HTMLCanvasElement) {\n                return null;\n            }\n            const {canvasData} = this;\n            const source = utilities.getSourceCanvas(this.image, this.imageData, canvasData, options);\n            if (!this.cropped) {\n                return source;\n            }\n            let {\n                x: initialX,\n                y: initialY,\n                width: initialWidth,\n                height: initialHeight\n            } = this.getData();\n            const ratio = source.width / Math.floor(canvasData.naturalWidth);\n            if (ratio !== 1) {\n                initialX *= ratio;\n                initialY *= ratio;\n                initialWidth *= ratio;\n                initialHeight *= ratio;\n            }\n            const aspectRatio = initialWidth / initialHeight;\n            const maxSizes = utilities.getAdjustedSizes({\n                aspectRatio,\n                width: options.maxWidth || Infinity,\n                height: options.maxHeight || Infinity\n            });\n            const minSizes = utilities.getAdjustedSizes({\n                aspectRatio,\n                width: options.minWidth || 0,\n                height: options.minHeight || 0\n            }, 'cover');\n            let {width, height} = utilities.getAdjustedSizes({\n                aspectRatio,\n                width: options.width || (ratio !== 1 ? source.width : initialWidth),\n                height: options.height || (ratio !== 1 ? source.height : initialHeight)\n            });\n            width = Math.min(maxSizes.width, Math.max(minSizes.width, width));\n            height = Math.min(maxSizes.height, Math.max(minSizes.height, height));\n            const canvas = document.createElement('canvas');\n            const context = canvas.getContext('2d');\n            canvas.width = utilities.normalizeDecimalNumber(width);\n            canvas.height = utilities.normalizeDecimalNumber(height);\n            context.fillStyle = options.fillColor || 'transparent';\n            context.fillRect(0, 0, width, height);\n            const {imageSmoothingEnabled = true, imageSmoothingQuality} = options;\n            context.imageSmoothingEnabled = imageSmoothingEnabled;\n            if (imageSmoothingQuality) {\n                context.imageSmoothingQuality = imageSmoothingQuality;\n            }\n            const sourceWidth = source.width;\n            const sourceHeight = source.height;\n            let srcX = initialX;\n            let srcY = initialY;\n            let srcWidth;\n            let srcHeight;\n            let dstX;\n            let dstY;\n            let dstWidth;\n            let dstHeight;\n            if (srcX <= -initialWidth || srcX > sourceWidth) {\n                srcX = 0;\n                srcWidth = 0;\n                dstX = 0;\n                dstWidth = 0;\n            } else if (srcX <= 0) {\n                dstX = -srcX;\n                srcX = 0;\n                srcWidth = Math.min(sourceWidth, initialWidth + srcX);\n                dstWidth = srcWidth;\n            } else if (srcX <= sourceWidth) {\n                dstX = 0;\n                srcWidth = Math.min(initialWidth, sourceWidth - srcX);\n                dstWidth = srcWidth;\n            }\n            if (srcWidth <= 0 || srcY <= -initialHeight || srcY > sourceHeight) {\n                srcY = 0;\n                srcHeight = 0;\n                dstY = 0;\n                dstHeight = 0;\n            } else if (srcY <= 0) {\n                dstY = -srcY;\n                srcY = 0;\n                srcHeight = Math.min(sourceHeight, initialHeight + srcY);\n                dstHeight = srcHeight;\n            } else if (srcY <= sourceHeight) {\n                dstY = 0;\n                srcHeight = Math.min(initialHeight, sourceHeight - srcY);\n                dstHeight = srcHeight;\n            }\n            const params = [\n                srcX,\n                srcY,\n                srcWidth,\n                srcHeight\n            ];\n            if (dstWidth > 0 && dstHeight > 0) {\n                const scale = width / initialWidth;\n                params.push(dstX * scale, dstY * scale, dstWidth * scale, dstHeight * scale);\n            }\n            context.drawImage(source, ...params.map(param => Math.floor(utilities.normalizeDecimalNumber(param))));\n            return canvas;\n        },\n        setAspectRatio(aspectRatio) {\n            const {options} = this;\n            if (!this.disabled && !utilities.isUndefined(aspectRatio)) {\n                options.aspectRatio = Math.max(0, aspectRatio) || NaN;\n                if (this.ready) {\n                    this.initCropBox();\n                    if (this.cropped) {\n                        this.renderCropBox();\n                    }\n                }\n            }\n            return this;\n        },\n        setDragMode(mode) {\n            const {options, dragBox, face} = this;\n            if (this.ready && !this.disabled) {\n                const croppable = mode === constants.DRAG_MODE_CROP;\n                const movable = options.movable && mode === constants.DRAG_MODE_MOVE;\n                mode = croppable || movable ? mode : constants.DRAG_MODE_NONE;\n                options.dragMode = mode;\n                utilities.setData(dragBox, constants.DATA_ACTION, mode);\n                utilities.toggleClass(dragBox, constants.CLASS_CROP, croppable);\n                utilities.toggleClass(dragBox, constants.CLASS_MOVE, movable);\n                if (!options.cropBoxMovable) {\n                    utilities.setData(face, constants.DATA_ACTION, mode);\n                    utilities.toggleClass(face, constants.CLASS_CROP, croppable);\n                    utilities.toggleClass(face, constants.CLASS_MOVE, movable);\n                }\n            }\n            return this;\n        }\n    };\n});\ndefine('skylark-cropperjs/Cropper',[\n    'skylark-langx-ns',\n    './defaults',\n    './template',\n    './render',\n    './preview',\n    './events',\n    './handlers',\n    './change',\n    './methods',\n    './constants',\n    './utilities'\n], function (skylark, DEFAULTS, TEMPLATE, render, preview, events, handlers, change, methods, constants, utilities) {\n    'use strict';\n    const AnotherCropper = constants.WINDOW.Cropper;\n    class Cropper {\n        constructor(element, options = {}) {\n            if (!element || !constants.REGEXP_TAG_NAME.test(element.tagName)) {\n                throw new Error('The first argument is required and must be an <img> or <canvas> element.');\n            }\n            this.element = element;\n            this.options = utilities.assign({}, DEFAULTS, utilities.isPlainObject(options) && options);\n            this.cropped = false;\n            this.disabled = false;\n            this.pointers = {};\n            this.ready = false;\n            this.reloading = false;\n            this.replaced = false;\n            this.sized = false;\n            this.sizing = false;\n            this.init();\n        }\n        init() {\n            const {element} = this;\n            const tagName = element.tagName.toLowerCase();\n            let url;\n            if (element[constants.NAMESPACE]) {\n                return;\n            }\n            element[constants.NAMESPACE] = this;\n            if (tagName === 'img') {\n                this.isImg = true;\n                url = element.getAttribute('src') || '';\n                this.originalUrl = url;\n                if (!url) {\n                    return;\n                }\n                url = element.src;\n            } else if (tagName === 'canvas' && window.HTMLCanvasElement) {\n                url = element.toDataURL();\n            }\n            this.load(url);\n        }\n        load(url) {\n            if (!url) {\n                return;\n            }\n            this.url = url;\n            this.imageData = {};\n            const {element, options} = this;\n            if (!options.rotatable && !options.scalable) {\n                options.checkOrientation = false;\n            }\n            if (!options.checkOrientation || !window.ArrayBuffer) {\n                this.clone();\n                return;\n            }\n            if (constants.REGEXP_DATA_URL.test(url)) {\n                if (constants.REGEXP_DATA_URL_JPEG.test(url)) {\n                    this.read(utilities.dataURLToArrayBuffer(url));\n                } else {\n                    this.clone();\n                }\n                return;\n            }\n            const xhr = new XMLHttpRequest();\n            const clone = this.clone.bind(this);\n            this.reloading = true;\n            this.xhr = xhr;\n            xhr.onabort = clone;\n            xhr.onerror = clone;\n            xhr.ontimeout = clone;\n            xhr.onprogress = () => {\n                if (xhr.getResponseHeader('content-type') !== constants.MIME_TYPE_JPEG) {\n                    xhr.abort();\n                }\n            };\n            xhr.onload = () => {\n                this.read(xhr.response);\n            };\n            xhr.onloadend = () => {\n                this.reloading = false;\n                this.xhr = null;\n            };\n            if (options.checkCrossOrigin && utilities.isCrossOriginURL(url) && element.crossOrigin) {\n                url = utilities.addTimestamp(url);\n            }\n            xhr.open('GET', url);\n            xhr.responseType = 'arraybuffer';\n            xhr.withCredentials = element.crossOrigin === 'use-credentials';\n            xhr.send();\n        }\n        read(arrayBuffer) {\n            const {options, imageData} = this;\n            const orientation = utilities.resetAndGetOrientation(arrayBuffer);\n            let rotate = 0;\n            let scaleX = 1;\n            let scaleY = 1;\n            if (orientation > 1) {\n                this.url = utilities.arrayBufferToDataURL(arrayBuffer, constants.MIME_TYPE_JPEG);\n                ({rotate, scaleX, scaleY} = utilities.parseOrientation(orientation));\n            }\n            if (options.rotatable) {\n                imageData.rotate = rotate;\n            }\n            if (options.scalable) {\n                imageData.scaleX = scaleX;\n                imageData.scaleY = scaleY;\n            }\n            this.clone();\n        }\n        clone() {\n            const {element, url} = this;\n            let {crossOrigin} = element;\n            let crossOriginUrl = url;\n            if (this.options.checkCrossOrigin && utilities.isCrossOriginURL(url)) {\n                if (!crossOrigin) {\n                    crossOrigin = 'anonymous';\n                }\n                crossOriginUrl = utilities.addTimestamp(url);\n            }\n            this.crossOrigin = crossOrigin;\n            this.crossOriginUrl = crossOriginUrl;\n            const image = document.createElement('img');\n            if (crossOrigin) {\n                image.crossOrigin = crossOrigin;\n            }\n            image.src = crossOriginUrl || url;\n            image.alt = element.alt || 'The image to crop';\n            this.image = image;\n            image.onload = this.start.bind(this);\n            image.onerror = this.stop.bind(this);\n            utilities.addClass(image, constants.CLASS_HIDE);\n            element.parentNode.insertBefore(image, element.nextSibling);\n        }\n        start() {\n            const {image} = this;\n            image.onload = null;\n            image.onerror = null;\n            this.sizing = true;\n            const isIOSWebKit = constants.WINDOW.navigator && /(?:iPad|iPhone|iPod).*?AppleWebKit/i.test(constants.WINDOW.navigator.userAgent);\n            const done = (naturalWidth, naturalHeight) => {\n                utilities.assign(this.imageData, {\n                    naturalWidth,\n                    naturalHeight,\n                    aspectRatio: naturalWidth / naturalHeight\n                });\n                this.sizing = false;\n                this.sized = true;\n                this.build();\n            };\n            if (image.naturalWidth && !isIOSWebKit) {\n                done(image.naturalWidth, image.naturalHeight);\n                return;\n            }\n            const sizingImage = document.createElement('img');\n            const body = document.body || document.documentElement;\n            this.sizingImage = sizingImage;\n            sizingImage.onload = () => {\n                done(sizingImage.width, sizingImage.height);\n                if (!isIOSWebKit) {\n                    body.removeChild(sizingImage);\n                }\n            };\n            sizingImage.src = image.src;\n            if (!isIOSWebKit) {\n                sizingImage.style.cssText = 'left:0;' + 'max-height:none!important;' + 'max-width:none!important;' + 'min-height:0!important;' + 'min-width:0!important;' + 'opacity:0;' + 'position:absolute;' + 'top:0;' + 'z-index:-1;';\n                body.appendChild(sizingImage);\n            }\n        }\n        stop() {\n            const {image} = this;\n            image.onload = null;\n            image.onerror = null;\n            image.parentNode.removeChild(image);\n            this.image = null;\n        }\n        build() {\n            if (!this.sized || this.ready) {\n                return;\n            }\n            const {element, options, image} = this;\n            const container = element.parentNode;\n            const template = document.createElement('div');\n            template.innerHTML = TEMPLATE;\n            const cropper = template.querySelector(`.${ constants.NAMESPACE }-container`);\n            const canvas = cropper.querySelector(`.${ constants.NAMESPACE }-canvas`);\n            const dragBox = cropper.querySelector(`.${ constants.NAMESPACE }-drag-box`);\n            const cropBox = cropper.querySelector(`.${ constants.NAMESPACE }-crop-box`);\n            const face = cropBox.querySelector(`.${ constants.NAMESPACE }-face`);\n            this.container = container;\n            this.cropper = cropper;\n            this.canvas = canvas;\n            this.dragBox = dragBox;\n            this.cropBox = cropBox;\n            this.viewBox = cropper.querySelector(`.${ constants.NAMESPACE }-view-box`);\n            this.face = face;\n            canvas.appendChild(image);\n            utilities.addClass(element, constants.CLASS_HIDDEN);\n            container.insertBefore(cropper, element.nextSibling);\n            if (!this.isImg) {\n                utilities.removeClass(image, constants.CLASS_HIDE);\n            }\n            this.initPreview();\n            this.bind();\n            options.initialAspectRatio = Math.max(0, options.initialAspectRatio) || NaN;\n            options.aspectRatio = Math.max(0, options.aspectRatio) || NaN;\n            options.viewMode = Math.max(0, Math.min(3, Math.round(options.viewMode))) || 0;\n            utilities.addClass(cropBox, constants.CLASS_HIDDEN);\n            if (!options.guides) {\n                utilities.addClass(cropBox.getElementsByClassName(`${ constants.NAMESPACE }-dashed`), constants.CLASS_HIDDEN);\n            }\n            if (!options.center) {\n                utilities.addClass(cropBox.getElementsByClassName(`${ constants.NAMESPACE }-center`), constants.CLASS_HIDDEN);\n            }\n            if (options.background) {\n                utilities.addClass(cropper, `${ constants.NAMESPACE }-bg`);\n            }\n            if (!options.highlight) {\n                utilities.addClass(face, constants.CLASS_INVISIBLE);\n            }\n            if (options.cropBoxMovable) {\n                utilities.addClass(face, constants.CLASS_MOVE);\n                utilities.setData(face, constants.DATA_ACTION, constants.ACTION_ALL);\n            }\n            if (!options.cropBoxResizable) {\n                utilities.addClass(cropBox.getElementsByClassName(`${ constants.NAMESPACE }-line`), constants.CLASS_HIDDEN);\n                utilities.addClass(cropBox.getElementsByClassName(`${ constants.NAMESPACE }-point`), constants.CLASS_HIDDEN);\n            }\n            this.render();\n            this.ready = true;\n            this.setDragMode(options.dragMode);\n            if (options.autoCrop) {\n                this.crop();\n            }\n            this.setData(options.data);\n            if (utilities.isFunction(options.ready)) {\n                utilities.addListener(element, constants.EVENT_READY, options.ready, { once: true });\n            }\n            utilities.dispatchEvent(element, constants.EVENT_READY);\n        }\n        unbuild() {\n            if (!this.ready) {\n                return;\n            }\n            this.ready = false;\n            this.unbind();\n            this.resetPreview();\n            this.cropper.parentNode.removeChild(this.cropper);\n            utilities.removeClass(this.element, constants.CLASS_HIDDEN);\n        }\n        uncreate() {\n            if (this.ready) {\n                this.unbuild();\n                this.ready = false;\n                this.cropped = false;\n            } else if (this.sizing) {\n                this.sizingImage.onload = null;\n                this.sizing = false;\n                this.sized = false;\n            } else if (this.reloading) {\n                this.xhr.onabort = null;\n                this.xhr.abort();\n            } else if (this.image) {\n                this.stop();\n            }\n        }\n        static noConflict() {\n            window.Cropper = AnotherCropper;\n            return Cropper;\n        }\n        static setDefaults(options) {\n            utilities.assign(DEFAULTS, utilities.isPlainObject(options) && options);\n        }\n    }\n    utilities.assign(Cropper.prototype, render, preview, events, handlers, change, methods);\n    return skylark.attach('intg.Cropper', Cropper);\n});\ndefine('skylark-cropperjs/main',[\r\n\t\"./Cropper\"\r\n],function(Cropper){\r\n\treturn Cropper;\r\n});\ndefine('skylark-cropperjs', ['skylark-cropperjs/main'], function (main) { return main; });\n\n"]}